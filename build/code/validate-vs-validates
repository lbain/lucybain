/* Generated by Opal 0.10.6 */
(function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$attr_accessor', '$validate', '$describe', '$it', '$new', '$should', '$valid?', '$be_false']);
  self.$require("active_record");
  (function($base, $super) {
    function $Foo(){};
    var self = $Foo = $klass($base, $super, 'Foo', $Foo);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include(((Opal.get('ActiveModel')).$$scope.get('Validations')));

    self.$attr_accessor("should_validate");

    return self.$validate("should_validate", $hash2(["presence"], {"presence": true}));
  })($scope.base, null);
  self.$require("rspec");
  self.$require("rspec/autorun");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, TMP_2;

  return ($c = ($d = self).$it, $c.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, foo = nil;

    foo = $scope.get('Foo').$new();
      return foo['$valid?']().$should(self.$be_false());}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $c).call($d, "fails to actually validate")}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "Foo");
})(Opal);
