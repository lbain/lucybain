<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-04-09T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Rails Girls event manager</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/rails-girls-event-manager/"/>
    <id>http://lucybain.com/blog/2015/rails-girls-event-manager/</id>
    <published>2015-04-09T00:00:00Z</published>
    <updated>2015-04-09T23:07:35+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m looking for something that Rails Girls could use to manage our events, particularly user sign ups. In the past we&amp;#39;ve cobbled together something from various sites. Those sites are good on their own, but the whole system is pretty flimsy and I&amp;#39;m afraid someone might fall through the cracks. So I&amp;#39;m asking you for suggestions, but we&amp;#39;ve got some fairly specific requests... Here&amp;#39;s what we&amp;#39;re looking for:&lt;/p&gt;

&lt;p&gt;Required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When people &amp;quot;sign up&amp;quot; it&amp;#39;s really an application to attend - they are not issued a ticket&lt;/li&gt;
&lt;li&gt;We can send custom emails to people when they are accepted, as well as before the event&lt;/li&gt;
&lt;li&gt;Free, or maybe willing to be free for a non-profit (we&amp;#39;re happy to list them as sponsors)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perfered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up form allows for custom fields&lt;/li&gt;
&lt;li&gt;There is a &amp;quot;notes&amp;quot; (or similar) section for each applicant/attendee, or we can easily create one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track attendance at the event&lt;/li&gt;
&lt;li&gt;Support for multiple (or at least two) tracks (Rails Girls and Rails Girls Next, ideally mentors as well)&lt;/li&gt;
&lt;li&gt;Keep history on people between events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything else that&amp;#39;s used for event management - tracking caterers, receipts, sponsors, to do lists, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that&amp;#39;s a fairly long list. I&amp;#39;ve looked around at a few, but haven&amp;#39;t found anything that meets our needs yet, so I&amp;#39;m reaching out to ask if you know of any such product.&lt;/p&gt;

&lt;p&gt;Yes, I know we &lt;em&gt;could&lt;/em&gt; build it ourselves. I&amp;#39;m sure that&amp;#39;ll have a fair bit of upkeep and I&amp;#39;m keen to keep our involvement to a minimum. (But hey, if you want to build it, you know you&amp;#39;ll have at least one (non-paying) customer!)&lt;/p&gt;

&lt;p&gt;Please let us know if you have any suggestions.&lt;/p&gt;

&lt;p&gt;Thanks!
Lucy and the Rails Girls Sydney team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: How can you accept optional parameters?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-optional-parameters/"/>
    <id>http://lucybain.com/blog/2015/js-optional-parameters/</id>
    <published>2015-04-03T00:00:00Z</published>
    <updated>2015-05-30T20:01:07+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There&amp;#39;s more than one way to skin a cat, and there&amp;#39;s more than one way to accept optional parameters. (Editors note: I do not condone skinning cats!)&lt;/p&gt;

&lt;h2&gt;Object&lt;/h2&gt;

&lt;p&gt;Coming from a Ruby background, I find this option the most intuitive. You can create an object of your optional parameters, it&amp;#39;d look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var params = {
    size: 'small',
    color: 'red'
};

function carSentence(optionalParams) {
    var size = optionalParams.size;
    var color = optionalParams.color;
    var speed = optionalParams.speed;
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence(params);
// logs "My favourite car is a small sized red one that goes "
&lt;/pre&gt;
&lt;p&gt;As you can see I didn&amp;#39;t supply the &lt;code&gt;speed&lt;/code&gt; parameter in my &lt;code&gt;params&lt;/code&gt; object, but the &lt;code&gt;carSentence&lt;/code&gt; function still worked. So &lt;code&gt;speed&lt;/code&gt; was an optional parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But &lt;code&gt;optionalParams&lt;/code&gt; was still required&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yep, you caught me! This isn&amp;#39;t really what people usually mean by &amp;quot;optional&amp;quot; parameters. But I did want to throw it out there as a possibility. I think it&amp;#39;s an underrated option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if I wanted a default speed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;optionalParams&lt;/code&gt; didn&amp;#39;t define a value for &lt;code&gt;speed&lt;/code&gt;, but the sentence expected &lt;code&gt;speed&lt;/code&gt; to be defined. In this case you can give a default value for the variable (such as &lt;code&gt;&amp;quot;fast&amp;quot;&lt;/code&gt;). It&amp;#39;s tempting to do this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var speed = optionalParams.speed || "fast";
&lt;/pre&gt;
&lt;p&gt;but this won&amp;#39;t work when &lt;code&gt;optionalParams.speed&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The better way to handle it is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var speed;
if (typeof optionalParams.speed !== 'undefined') {
    speed = optionalParams.speed;
} else {
    speed = "fast";
}
&lt;/pre&gt;
&lt;p&gt;however that&amp;#39;s quite wordy. You can cut it down with a &lt;a href="/blog/2014/js-ternary/"&gt;ternary&lt;/a&gt;, or make a &lt;code&gt;givenOrDefault&lt;/code&gt; method (hopefully with a better name!).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function givenOrDefault(given, default) {
    if (typeof given !== 'undefined') {
        return given;
    } else {
        return default;
    }
}
&lt;/pre&gt;
&lt;p&gt;Thus our example becomes:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var params = {
    size: 'small',
    color: 'red'
};

function carSentence(optionalParams) {
    var size = givenOrDefault(optionalParams.size, "medium");
    var color = givenOrDefault(optionalParams.color, "blue");
    var speed = givenOrDefault(optionalParams.speed, "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence(params);
// logs "My favourite car is a small sized red one that goes fast"
&lt;/pre&gt;
&lt;h2&gt;Missing parameters&lt;/h2&gt;

&lt;p&gt;Another method of dealing with optional parameters is to simply allow them to be missing.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function carSentence(size, color, speed) {
    size = givenOrDefault(size, "medium");
    color = givenOrDefault(color, "blue");
    speed = givenOrDefault(speed, "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence("medium", "blue");
// logs "My favourite car is a medium sized blue one that goes fast"
&lt;/pre&gt;
&lt;p&gt;This way of dealing with optional parameters works well if people won&amp;#39;t bother trying to extend it past the limit. However, not all functions meet this requirement, consider the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function add(a, b, c) {
    a = a || 0;
    b = b || 0;
    c = c || 0;
    return a + b + c;
}

add(1, 2); // returns 3
add(1, 2, 3); // returns 6
add(1, undefined, 3); // returns 4
&lt;/pre&gt;
&lt;p&gt;It kinda works. It&amp;#39;ll fall over if you try &lt;code&gt;add(1, 2, 3, 4)&lt;/code&gt; which returns 6 rather than 10.&lt;/p&gt;

&lt;h2&gt;arguments&lt;/h2&gt;

&lt;p&gt;Finally we come to the &lt;code&gt;arguments&lt;/code&gt; keyword. it looks like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function carSentence() {
    size = givenOrDefault(arguments[0], "medium");
    color = givenOrDefault(arguments[1], "blue");
    speed = givenOrDefault(arguments[2], "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence("medium", "blue");
// logs "My favourite car is a medium sized blue one that goes fast"
&lt;/pre&gt;
&lt;p&gt;or like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function add() {
    var sum = 0;
    var index = 0;

    while(index &amp;lt; arguments.length) {
        if(typeof arguments[index] !== 'undefined') {
            sum = sum + arguments[index];
        }
        index++;
    }
    return sum;
}

add(1, 2); // returns 3
add(1, 2, 3); // returns 6
add(1, undefined, 3); // returns 4
add(1, 2, 3, 4); // returns 10
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What is this black magic?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well it turns out &lt;code&gt;arguments&lt;/code&gt; is a secret variable available in all functions that gives a list of the parameters passed to that function. It&amp;#39;s a little bonus JS throws in free of charge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So it&amp;#39;s an array of all the params&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Almost. It&amp;#39;s not quite an array. It&amp;#39;s like a kiddy array - hasn&amp;#39;t got all the functionality just yet. If you want to use it for access only (as in the example above), then you&amp;#39;re all good. But if you want to do interesting manipulations, &lt;code&gt;pop&lt;/code&gt; things off, or reorder items, then you need to convert &lt;code&gt;arguments&lt;/code&gt; to a full array:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var temp = Array.slice(arguments);
&lt;/pre&gt;
&lt;p&gt;I assume the reason for this is to make &lt;code&gt;arguments&lt;/code&gt; read only, although I haven&amp;#39;t researched that.&lt;/p&gt;

&lt;p&gt;And there you have it - three ways to handle optional parameters in JavaScript.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/148901/is-there-a-better-way-to-do-optional-function-parameters-in-javascript"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.markhansen.co.nz/javascript-optional-parameters/"&gt;Mark Hansen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"&gt;Arguments&lt;/a&gt; official&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascriptweblog.wordpress.com/2011/01/18/javascripts-arguments-object-and-beyond/"&gt;Arguments&lt;/a&gt; this one is more entertaining&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>In programming, what is an object?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/in-programming-what-is-an-object/"/>
    <id>http://lucybain.com/blog/2015/in-programming-what-is-an-object/</id>
    <published>2015-03-26T00:00:00Z</published>
    <updated>2015-05-30T17:00:36+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As promissed in my last blog post: intro to objects.&lt;/p&gt;

&lt;h2&gt;Objects&lt;/h2&gt;

&lt;p&gt;Many languages have the concept of an &amp;quot;object.&amp;quot; It&amp;#39;s a way of organising code based around objects (things) with similar characteristics. As in, most dogs have four legs, most cars can drive forward, most houses have doors. Templates (often called Classes) are used to create objects. These templates come with empty fields (like a form), and sometimes with default values as well (such as four legs). So it could look something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;As you can see some fields (name and gender) are left blank, and some (arms and legs) have a default value associated. Again, this is a template, these values are assigned for each object (often called &amp;quot;instance of the class&amp;quot;). Mine would look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: _Lucy_
Gender: _Female_
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;But objects hold more than just fields of information; they can also hold actions! Let&amp;#39;s build on our Human class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
Laugh: say "hahaha!"
Run: move your legs quickly
&lt;/pre&gt;
&lt;p&gt;So you can see the Human template now has two actions associated with it (laugh and run). Here&amp;#39;s the great part about objects: those actions are shared! I only have to write the method &lt;em&gt;once&lt;/em&gt; and all humans can now laugh and run. Pretty slick, huh?&lt;/p&gt;

&lt;p&gt;So a &lt;strong&gt;class&lt;/strong&gt; is a template of fields (variables) and actions (methods). Each &lt;strong&gt;object&lt;/strong&gt; fills out the template with it&amp;#39;s particular information. This is how you can write code like &lt;code&gt;me.name&lt;/code&gt; - the &lt;code&gt;me&lt;/code&gt; object has a &lt;code&gt;name&lt;/code&gt; field that keeps track of &lt;code&gt;me&lt;/code&gt;&amp;#39;s name. It&amp;#39;s also how you can write:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;fido.bark();
buddy.bark();
buster.bark();
princess.bark();
&lt;/pre&gt;
&lt;p&gt;but only need to implement the &lt;code&gt;bark&lt;/code&gt; action on the &lt;code&gt;Dog&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object Oriented Programming&lt;/strong&gt; is a way of organising your code into these objects for ease of use, readability, and understanding. It&amp;#39;s not the only &lt;a href="http://upload.wikimedia.org/wikipedia/commons/f/f7/Programming_paradigms.svg"&gt;programming paradigm&lt;/a&gt;, but it&amp;#39;s been popular over the years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/lii0o/eli5_what_do_it_programmer_developer_people_mean/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/j4dmq/eli5_what_is_objectoriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Still more &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/syjy3/can_someone_explain_object_oriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: What datatypes are supported in Javascript?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-data-types/"/>
    <id>http://lucybain.com/blog/2015/js-data-types/</id>
    <published>2015-03-22T00:00:00Z</published>
    <updated>2015-09-19T15:28:37+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;According to the latest &lt;a href="http://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; release, these are the data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let&amp;#39;s run over those one by one:&lt;/p&gt;

&lt;h3&gt;Boolean&lt;/h3&gt;

&lt;p&gt;Pretty standard across all languages, booleans are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. They&amp;#39;re often used for conditional statements.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var raining = false;
if(raining) {
  bringUmbrella();
}
&lt;/pre&gt;
&lt;h3&gt;Null and Undefined&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve &lt;a href="/blog/2014/null-undefined-undeclared/"&gt;written&lt;/a&gt; about these before, so give that a read :)&lt;/p&gt;

&lt;h3&gt;Number&lt;/h3&gt;

&lt;p&gt;Things start to get more interesting here. The number data type covers integers and floats. That is, the &lt;code&gt;number&lt;/code&gt; type can handle normal numbers (1, 2, 3, 4), but also negative numbers and decimal places. This is different from many languages that have multiple data types to support different numbers.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var num = 1;
typeof num; // number

var num = -2;
typeof num; // number

var num = 0.3;
typeof num; // number
&lt;/pre&gt;
&lt;h3&gt;String&lt;/h3&gt;

&lt;p&gt;As in most languages, JS strings are groupings of characters.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"hello world";
"I like cats";
'Testing "quotes';
&lt;/pre&gt;
&lt;p&gt;I don&amp;#39;t think they&amp;#39;re particularly interesting, but they are remarkably powerful. The main way we communicate with our users is the written word and &lt;code&gt;string&lt;/code&gt; makes this possible.&lt;/p&gt;

&lt;h3&gt;Symbol&lt;/h3&gt;

&lt;p&gt;This is new in ECMAScript 6; check the &lt;a href="https://kangax.github.io/compat-table/es6/#Symbol"&gt;browser support&lt;/a&gt; before you use it.&lt;/p&gt;

&lt;p&gt;Symbols allow for private(ish) properties on objects. Before ECMAScript 6 all properties for an object could be accessed through &lt;code&gt;for in&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var dog = { bark: true }

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark"
  }
}
&lt;/pre&gt;
&lt;p&gt;Since symbols are not enumerable they cannot be accessed in this way. However, the symbolised properties are not truly private since they can be accessed directly.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var breed = Symbol("breed");
var dog = { bark: true };
dog[breed] = "Corgi";

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark", but not "breed"
  }
}
console.log(dog[breed]); // logs "Corgi"
&lt;/pre&gt;
&lt;h3&gt;Object&lt;/h3&gt;

&lt;p&gt;Everything in JS that we didn&amp;#39;t discuss above is an Object. So objects are the most complex data type; I&amp;#39;ll dedicate a future post to them since it&amp;#39;s a lot to cover here. But you&amp;#39;ve probably worked with objects in the past. They typically look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var cat = { sound: "meow" };

var fluffy = new Cat();

var whiskers = new function() {
    this.sound = "meow";
}
&lt;/pre&gt;
&lt;p&gt;But notice that we haven&amp;#39;t mentioned &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, or even &lt;code&gt;function&lt;/code&gt; that&amp;#39;s because, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#.22Normal.22_objects.2C_and_functions"&gt;officially&lt;/a&gt;, they&amp;#39;re all of type &lt;code&gt;object&lt;/code&gt;. Pretty crazy, huh?&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/understandinges6/read/#leanpub-auto-symbols"&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: What is Javascript namespacing? How and where is it used?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-namespacing/"/>
    <id>http://lucybain.com/blog/2015/js-namespacing/</id>
    <published>2015-03-17T00:00:00Z</published>
    <updated>2015-05-24T18:18:27+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What is Javascript namespacing? How and where is it used?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Well, what is namespacing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Namespacing is a way of organising your code. It organises concepts and ideas into a group and gives the group a &lt;strong&gt;name.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So rather than having everything dumped in together...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function bark() { /* ... */ }
function meow() { /* ... */ }
function wagTail() { /* ... */ }
function sleepAllDay() { /* ... */ }
function beHyper() { /* ... */ }
function purr() { /* ... */ }
&lt;/pre&gt;
&lt;p&gt;...you group similar things together...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// Dog's can...
function bark() { /* ... */ }
function wagTail() { /* ... */ }
function beHyper() { /* ... */ }

// Cat's can...
function meow() { /* ... */ }
function sleepAllDay() { /* ... */ }
function purr() { /* ... */ }
&lt;/pre&gt;
&lt;p&gt;...and then give the groups a name!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var dog = {
  bark: function() { /* ... */ },
  wagTail: function() { /* ... */ },
  beHyper: function() { /* ... */ }
};

var cat = {
  meow: function() { /* ... */ },
  sleepAllDay: function() { /* ... */ },
  purr: function() { /* ... */ }
};
&lt;/pre&gt;
&lt;p&gt;Partly this is for ease of programming - it&amp;#39;s simpler to keep track of many things if they&amp;#39;re grouped into smaller numbers. But it&amp;#39;s also really important for avoiding naming collisions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are naming collisions?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say I&amp;#39;m working on a big project and I get a little lost in the code sometimes. At some point I defined a &lt;code&gt;warningAlert&lt;/code&gt; function. Then, a few weeks later, I forget that I had a &lt;code&gt;warningAlert&lt;/code&gt; function defined already, and I define a new one lower down.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function warningAlert(text) {
  alert('Warning: ' + text);
}

/* ... */

function warningAlert(text) {
  alert('ALERT: ' + text);
}
&lt;/pre&gt;
&lt;p&gt;Now calls to &lt;code&gt;warningAlert&lt;/code&gt; will use the second definition since it overwrote (collided with) the first definition.&lt;/p&gt;

&lt;p&gt;If I&amp;#39;d had a namespace for my &lt;code&gt;warningAlert&lt;/code&gt; method I probably would have known where to look for the function definition. Something like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var alerts = {}
alerts.warning = function(text) {
  alert('Warning: ' + text);
};
&lt;/pre&gt;
&lt;p&gt;Namespaces aren&amp;#39;t only for you (because I&amp;#39;m sure &lt;em&gt;you&amp;#39;d&lt;/em&gt; never make a mistake like this... just for demonstration purposes, right?). They&amp;#39;re also important when you start including code by a third party.&lt;/p&gt;

&lt;p&gt;Since everything gets dumped into the global namespace there&amp;#39;s no way to know what you wrote and what was written by someone else. It&amp;#39;s generally a good idea to have a namespace for everything you wrote so you don&amp;#39;t get naming conflicts with anyone else. Actually, jQuery does just that. All the jQuery functions are namespaced to &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for &lt;em&gt;how is it used?&lt;/em&gt; I&amp;#39;ll leave the implementation details up to &lt;a href="http://www.kenneth-truyers.net/2013/04/27/javascript-namespaces-and-modules/"&gt;Kenneth Truyers&lt;/a&gt; since he did an excellent job listing out all your options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kenneth-truyers.net/2013/04/27/javascript-namespaces-and-modules/"&gt;Kenneth Truyers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/5947280/863846"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/12/07/namespacing-in-javascript/"&gt;Angus Croll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Split vs. Splice</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-split-vs-splice/"/>
    <id>http://lucybain.com/blog/2015/js-split-vs-splice/</id>
    <published>2015-03-12T00:00:00Z</published>
    <updated>2015-03-25T22:57:07+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What&amp;#39;s the difference between &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Well, what does &lt;code&gt;split&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Much like the name implies &lt;code&gt;split&lt;/code&gt; breaks something into pieces. The &lt;code&gt;split&lt;/code&gt; method is used for strings in JS. It has a few optional parameters, so let&amp;#39;s see what the simplest call does:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split()); // ['My test string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Hmmm, that&amp;#39;s not super useful - &lt;code&gt;split&lt;/code&gt; called without a parameter simply creates an array with one element, the string. But note that calling &lt;code&gt;split&lt;/code&gt; on &lt;code&gt;myString&lt;/code&gt; doesn&amp;#39;t change &lt;code&gt;myString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let&amp;#39;s try something a little more interesting. I want to break &lt;code&gt;myString&lt;/code&gt; up into whole words. We can split &lt;code&gt;myString&lt;/code&gt; on spaces like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ')); // ['My', 'test', 'string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Much more useful! When you call &lt;code&gt;split&lt;/code&gt; with a parameter the string is &lt;em&gt;split&lt;/em&gt; on every occurrence of that parameter. Note that the parameter itself is removed from the array (there are no spaces in &lt;code&gt;[&amp;#39;My&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;string&amp;#39;]&lt;/code&gt;). Now we can know how many words are in a sentence, or find people&amp;#39;s first and last names (sometimes, names can get tricky...). Again, note that &lt;code&gt;myString&lt;/code&gt; wasn&amp;#39;t changed.&lt;/p&gt;

&lt;p&gt;But what if &lt;code&gt;myString&lt;/code&gt; was really long? Maybe you don&amp;#39;t want an array with hundreds of items in it. Or perhaps you only want to find the first nonoccurence of something. Let&amp;#39;s look for the first two word in &lt;code&gt;myString&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ', 2)); // ['My', 'test']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Again, we split on spaces because we were looking for full words. The second parameter we sent to &lt;code&gt;split&lt;/code&gt; was the number of elements to go in the array. We wanted the first two words, so we sent through 2.&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;split&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrap a string up in an array &lt;code&gt;string.split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;break up a string whenever a particular string is found &lt;code&gt;string.split(breakString)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;return only a certain number of elements from all the break points &lt;code&gt;string.split(breakString, 3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweet, we&amp;#39;re halfway there!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what does &lt;code&gt;splice&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The name isn&amp;#39;t great, but it&amp;#39;s related to &lt;strong&gt;splicing&lt;/strong&gt; things together. Like you can take the end of one rope and splice it together with another. It&amp;#39;s a &lt;a href="https://www.google.com.au/search?q=splice+rope"&gt;real thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways... in JS &lt;code&gt;splice&lt;/code&gt; is an array method. Let&amp;#39;s look at a few sample calls:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(0, 2); // ['this', 'is']
console.log(myArray); // ['an', 'array']
&lt;/pre&gt;
&lt;p&gt;Ok, a really important thing to note is that &lt;code&gt;myArray&lt;/code&gt; was changed during the call to &lt;code&gt;splice&lt;/code&gt;. So if you ever want to use the original array you&amp;#39;ll need to keep a backup somewhere. Another thing to note is that &lt;code&gt;splice&lt;/code&gt; returns a value (in fact, it returns the elements that are missing from the array).&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;splice&lt;/code&gt; requires at least two parameters. The first parameter is an index in the array. I think of it as where the cursor is. The second parameter is how many elements to delete. So what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;0&lt;/strong&gt; please remove &lt;strong&gt;2&lt;/strong&gt; elements and return them to me.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at a similar example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var countingArray = [5, 6, 7, 8];
countingArray.splice(1, 1); // [6]
console.log(countingArray); // [5, 7, 8]
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;1&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me.&amp;quot;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: JS doesn&amp;#39;t have a &lt;code&gt;.delete(index)&lt;/code&gt; for arrays. The best you can do is &lt;code&gt;delete array[index]&lt;/code&gt;, but that actually just replaces the value at &lt;code&gt;array[index]&lt;/code&gt; with &lt;code&gt;undefined&lt;/code&gt;. Using &lt;code&gt;splice&lt;/code&gt; in the above example is how you can actually delete elements from an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, on to the optional parameter(s)!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;Hopefully you&amp;#39;ve got a good idea of what happened here. The first parameter is still an index. The second parameter is still how many elements to remove. And finally the third element is what to add &lt;strong&gt;after&lt;/strong&gt; the index given in the first parameter. Again, what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'amazingly', 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'amazingly', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;amazing&amp;#39;&lt;/strong&gt; and &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot; The third parameter can keep on going. If you wanted to add 100 elements to &lt;code&gt;myArray&lt;/code&gt; you could do it with &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you can also switch words in place:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(2, 1, 'the'); // ['an']
console.log(myArray); // ['this', 'is', 'the', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;2&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;2&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;the&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;splice&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove elements by index&lt;/li&gt;
&lt;li&gt;add elements after an index&lt;/li&gt;
&lt;li&gt;add and remove in one step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew! Thanks for sticking with me - this was a long one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"&gt;Mozilla (split)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Mozilla (splice)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ariya.ofilabs.com/2014/02/javascript-array-slice-vs-splice.html"&gt;split vs. splice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
