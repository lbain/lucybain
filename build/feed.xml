<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2014-12-30T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS: don't touch the global scope</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/js-dont-touch-global-scope/"/>
    <id>http://lucybain.com/blog/2014/js-dont-touch-global-scope/</id>
    <published>2014-12-30T00:00:00Z</published>
    <updated>2014-12-30T21:23:20+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of the last installments from my series on &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#js"&gt;javascript interview questions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?&lt;/h2&gt;

&lt;p&gt;Form most languages, global variables are &lt;a href="http://en.wikipedia.org/wiki/Global_variable#Use"&gt;considered&lt;/a&gt; a &amp;quot;bad thing&amp;quot;. JS is no different, but it probably has more severe consequences than most languages.&lt;/p&gt;

&lt;p&gt;Some points on why &lt;strong&gt;global variables are generally bad&lt;/strong&gt; (taken from &lt;a href="http://c2.com/cgi/wiki?GlobalVariablesAreBad"&gt;Cunningham &amp;amp; Cunningham&lt;/a&gt; with modifications for easier reading):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#39;s harder to read the code and reason about it when variables seem to appear out of thin air (but really from the global scope).&lt;/li&gt;
&lt;li&gt;Anyone can update a global variable from any point in the program at any time (and from any thread if there&amp;#39;s more than one going).&lt;/li&gt;
&lt;li&gt;General &lt;a href="http://en.wikipedia.org/wiki/Code_smell"&gt;code smell&lt;/a&gt; - if you&amp;#39;re too lazy to put the variable only where it needs to be then what other corners are you cutting?&lt;/li&gt;
&lt;li&gt;It&amp;#39;s probable that you&amp;#39;ll encounter global variable name clashes. Since there&amp;#39;s only one namespace you&amp;#39;re more likely to double up on a variable name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Global variables are particularly bad for JS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not only are all of those points above true (and a few others I didn&amp;#39;t include), but for JS specifically global variables can be particularly problematic. This is because JS defaults all variables to the global scope unless they are explicitly defined elsewhere. Here&amp;#39;s an example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function badlyScoped() {
    globalVariable = "I'm a global variable";
}

badlyScoped();
console.log(globalVariable); // logs "I'm a global variable"
&lt;/pre&gt;
&lt;p&gt;Well isn&amp;#39;t that terrifying! We thought we were creating a local variable, since it was defined within a function, but nope! We forgot the &lt;code&gt;var&lt;/code&gt; keyword, which would make the variable local. Here&amp;#39;s a corrected version:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function wellScoped() {
    var localVariable = "I'm a local variable";
}

wellScoped();
console.log(localVariable); // throws: "localVariable is not defined"
&lt;/pre&gt;
&lt;p&gt;This is a quirk (&lt;a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;some say&lt;/a&gt; a mistake) of JS. It makes global variables particularly dangerous since you might not even know you were creating one. So watch your back and don&amp;#39;t forget to use &lt;code&gt;var&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a more in depth discussion about &lt;a href="http://c2.com/cgi/wiki?GlobalVariablesAreBad"&gt;why globals are bad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;some ways to &lt;a href="http://stackoverflow.com/questions/1841916/how-to-avoid-global-variables-in-javascript"&gt;avoid global variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2613310/ive-heard-global-variables-are-bad-what-alternative-solution-should-i-use"&gt;stackoverflow&lt;/a&gt; question about why globals are bad&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: ternary expressions</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/js-ternary/"/>
    <id>http://lucybain.com/blog/2014/js-ternary/</id>
    <published>2014-12-26T00:00:00Z</published>
    <updated>2014-12-26T18:36:12+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Why is it called a Ternary expression, what does the word &amp;quot;Ternary&amp;quot; indicate?&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s answer the second question first: what does the word &amp;quot;ternary&amp;quot; indicate? According to &lt;a href="http://en.wikipedia.org/wiki/Ternary_operation"&gt;Wikipedia&lt;/a&gt; the word &amp;quot;ternary&amp;quot; comes from the n-ary word setup. Other examples of n-ary words are u&lt;strong&gt;nary&lt;/strong&gt; and bi&lt;strong&gt;nary&lt;/strong&gt;. All of these (including ternary) are operands. The prefix section of their name lists how many inputs the operand accepts.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;unary&lt;/strong&gt; operand accepts one parameter, e.g. &lt;code&gt;-1&lt;/code&gt;, where &lt;code&gt;-&lt;/code&gt; is the operand, and 1 is the parameter.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;binary&lt;/strong&gt; operand accepts two parameters, e.g. &lt;code&gt;2 + 3&lt;/code&gt;, where &lt;code&gt;+&lt;/code&gt; is the operand, and &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; are the parameters.&lt;/p&gt;

&lt;p&gt;So a &lt;strong&gt;ternary&lt;/strong&gt; operand accepts three parameters.&lt;/p&gt;

&lt;p&gt;In programming the ternary operand we use is a rewrite of an if statement. Before we write an actual ternary, we&amp;#39;ll just take a quick look at an if statement:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;if(conditional) { // one
    truethy_block // two
} else {
    falsey_block // three
}
&lt;/pre&gt;
&lt;p&gt;You can see there are three sections to an if statement. Let&amp;#39;s write them as a property ternary expression:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;conditional ? truethy_block : falsey_block
&lt;/pre&gt;
&lt;p&gt;All the same code is there, but it&amp;#39;s arranged slightly differently. The ternary&amp;#39;s operand looks like &lt;code&gt;?:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JS ternarys are often used for assignment:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;is_sunny = true;
var weather = is_sunny ? 'Sunny' : 'Cloudy';
console.log(weather); // logs 'Sunny'
&lt;/pre&gt;
&lt;p&gt;They can also be used for very short conditional statements. But be wary of using them for long or complex logic as they are harder to read than traditional statements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/%3F:"&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/a&gt; on Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Unary_operation"&gt;unary operands&lt;/a&gt; on Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Binary_operation"&gt;binary operands&lt;/a&gt; on Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6259982/js-how-to-use-the-ternary-operator"&gt;Stackoverflow&lt;/a&gt; about using the JS ternary operand specifically&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: same-origin policy</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/same-origin-policy/"/>
    <id>http://lucybain.com/blog/2014/same-origin-policy/</id>
    <published>2014-12-20T00:00:00Z</published>
    <updated>2014-12-26T10:36:45+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explain the same-origin policy with regards to JavaScript.&lt;/h2&gt;

&lt;p&gt;The same-origin policy helps prevent malicious attacks by stopping code from another site executing on your site. An attacks like this is known as a &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;Cross Site Scripting&lt;/a&gt; attack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How does JS decide if it&amp;#39;s a &amp;quot;same&amp;quot; site?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &amp;quot;origin&amp;quot; is the same if three things are the same: the protocol (http vs. https), the domain (subdomain.yoursite.com vs. yoursite.com vs. google.com), and the port (:80 vs. :4567). If all three of these line up, then JS views the sites as the same, and code is executed. If any of them are different then the code is marked as potentially malicious and is not run.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmmm, if I own &amp;quot;subdomain.yoursite.com&amp;quot; and &amp;quot;yoursite.com&amp;quot; I might want to share resources. This same-origin policy could be really annoying!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s possible to work around the subdomain problem. You can change the domain of a page, so it can access it&amp;#39;s parent&amp;#39;s resources:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// in the code on subdomain.yoursite.com
document.domain = "yoursite.com";
&lt;/pre&gt;
&lt;p&gt;There are a couple other pieces to remember about changing the domain (mostly about the port). You can read about them &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11474336/same-origin-policy-in-layman-terms"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Same-origin_policy"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: document load vs document ready</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/js-document-load-vs-ready/"/>
    <id>http://lucybain.com/blog/2014/js-document-load-vs-ready/</id>
    <published>2014-12-16T00:00:00Z</published>
    <updated>2014-12-16T20:24:59+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Difference between document load event and document ready event?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;$(document).ready()&lt;/code&gt;&lt;/strong&gt; fires when the HTML has finished loading. You can&amp;#39;t interact with the DOM before the HTML has finished loading, so we keep all our JS interactions wrapped up in the ready handler.&lt;/p&gt;

&lt;p&gt;Note: The ready event is just for jQuery, so that&amp;#39;s a downside if you weren&amp;#39;t planning on including all of jQuery on your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;window.onload&lt;/code&gt;&lt;/strong&gt; fires when all of the content (images, scripts, CSS, the whole lot) has finished loading. This can be really slow, so we try not to keep too much here. But it can be useful if you need to work with images of unknown size.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s it! This has been the most straight forward answer yet :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3698200/window-onload-vs-document-ready"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another &lt;a href="http://stackoverflow.com/questions/7971615/difference-between-pageload-onload-document-ready"&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There were a bunch more, but they all said the same thing.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Explain "hoisting"</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/hoisting/"/>
    <id>http://lucybain.com/blog/2014/hoisting/</id>
    <published>2014-12-13T00:00:00Z</published>
    <updated>2014-12-13T20:32:34+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;m continuing my series of &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#js"&gt;JS interview questions&lt;/a&gt;. These posts are proving very good practice for the interviews I&amp;#39;m doing!&lt;/p&gt;

&lt;h2&gt;Explain &amp;quot;hoisting&amp;quot;&lt;/h2&gt;

&lt;p&gt;Hoisting is when a JS declaration is lifted (&amp;quot;hoisted&amp;quot;) to the top of it&amp;#39;s scope by the JS interpreter. What this really means is that a variable or function isn&amp;#39;t necessarily declared where you think it is. Understandably, this can cause problems. Variables and functions are hoisted differently, as we&amp;#39;ll see below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hoisting variables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll start with an example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// Code saved in file:

function containsHoisting() {
    console.log(hoistedVariable);
    var hoistedVariable = "I was hoisted!";
}

containsHoisting(); // logs undefined
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Wait, how did &lt;code&gt;hoistedVariable&lt;/code&gt; get to be undefined? Surely it should be undeclared since we haven&amp;#39;t hit &lt;code&gt;var hoistedVariable&lt;/code&gt; yet.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s because of hoisting! You see, although I wrote the code in the example above, the JS interpreter changes it to this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// What the interpreter changed it to:

function containsHoisting() {
    var hoistedVariable; // &amp;lt;-- this line here!
    console.log(hoistedVariable);
    hoistedVariable = "I was hoisted!";
}
&lt;/pre&gt;
&lt;p&gt;That new line is &lt;code&gt;hoistedVariable&lt;/code&gt; getting hoisted up to the top of it&amp;#39;s scope. So it&amp;#39;s now declared, but not defined.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a more complex example (inspired by &lt;a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html"&gt;Adequately Good&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var hoistedVariable = 1;

function scopingFunction() {
    if (!hoistedVariable) {
        var hoistedVariable = 10;
    }
    return hoistedVariable;
}

scopingFunction(); // returns 10
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What?! How can it return 10?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tangent about scopes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was surprised about this myself until I understood JS scoping better, here&amp;#39;s how it breaks down:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Javascript scopes are defined at &lt;strong&gt;function level&lt;/strong&gt;. Many other languages define scope at a block level (as in an &lt;code&gt;if&lt;/code&gt; block or &lt;code&gt;for&lt;/code&gt; loop). This is an important difference to remember.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back to the main event&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code above gets rewritten in the JS interpreter to look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var hoistedVariable = 1;

function scopingFunction() {
    var hoistedVariable; // &amp;lt;-- this line here!
    if (!hoistedVariable) {
        hoistedVariable = 10;
    }
    return hoistedVariable;
}

scopingFunction(); // returns 10
&lt;/pre&gt;
&lt;p&gt;Note that the &lt;em&gt;global&lt;/em&gt; &lt;code&gt;hoistedVariable&lt;/code&gt; gets completely overwritten by the &lt;em&gt;local&lt;/em&gt; &lt;code&gt;hoistedVariable&lt;/code&gt; as declared in &lt;code&gt;scopingFunction&lt;/code&gt;. So at the point of the &lt;code&gt;if&lt;/code&gt; conditional &lt;code&gt;hoistedVariable&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; and not 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function hoisting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hoisting functions works differently than variables. Since a function is declared and defined at the same time the function definition is hoisted along with the function name.&lt;/p&gt;

&lt;p&gt;Since examples make things clearer:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function containingFunction() {
    var hoistedVariable = 2 + 2;
    function hoistedFunction() {
        return hoistedVariable;
    }
    return hoistedFunction();
}
containingFunction() // returns 4
&lt;/pre&gt;
&lt;p&gt;Hopefully that example wasn&amp;#39;t surprising. But just to better understand what&amp;#39;s going on, here&amp;#39;s how the JS interpreter rewrote things:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function containingFunction() {
    // this is the hoisted section
    var hoistedVariable;
    function hoistedFunction() {
        return hoistedVariable;
    }

    // here's the rest of the code
    hoistedVariable = 2 + 2;
    return hoistedFunction();
}
containingFunction() // returns 4
&lt;/pre&gt;
&lt;p&gt;Notice that the entire &lt;code&gt;hoistedFunction&lt;/code&gt; gets moved up, while only the declaration for the &lt;code&gt;hoistedVariable&lt;/code&gt; is hoisted.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try with a more complicated example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function containingFunction() {
    var hoisted = "I'm the variable";
    function hoisted() {
        return "I'm the function";
    }
    return hoisted(); // results in a TypeError
}
containingFunction()
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But wait, the &lt;code&gt;hoisted&lt;/code&gt; function is defined right there, what gives?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because functions are hoisted after variables, naming conflicts can happen. Again, let&amp;#39;s look at what the JS interpreter wrote for this code&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function containingFunction() {
    // hoisted section
    var hoisted;
    function hoisted() {
        return "I'm the function";
    }

    // rest of the code
    hoisted = "I'm the variable";
    return hoisted();
}
containingFunction() // results in a TypeError
&lt;/pre&gt;
&lt;p&gt;As you can see, the function definition for &lt;code&gt;hoisted&lt;/code&gt; is overwritten by the variable definition (&lt;code&gt;&amp;quot;I&amp;#39;m the variable&amp;quot;&lt;/code&gt;) which appears lower down in the interpreter&amp;#39;s version of the code. Yet another reason why good names are important!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/"&gt;JS is sexy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html"&gt;Adequately Good&lt;/a&gt; (which I think is a hilarious name for a coding blog!)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Async Google Adwords conversion</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/google-adwords-async/"/>
    <id>http://lucybain.com/blog/2014/google-adwords-async/</id>
    <published>2014-12-10T00:00:00Z</published>
    <updated>2014-12-10T12:14:53+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;How can I trigger a Google Adwords conversion when the page is loaded asynchronously?&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve been working with Google Adwords at work this week (yay learning!). My first task was to add a &amp;quot;tracking pixel&amp;quot; to a thank you page after a user has given us their contact details.&lt;/p&gt;

&lt;p&gt;(Side note: It turns out we don&amp;#39;t really use pixels any more, we use JS to actually make the call, and only fall back to a pixel when the user doesn&amp;#39;t have JS enabled.)&lt;/p&gt;

&lt;p&gt;Our thank you page is loaded asynchronously, so the Google Adwords script was getting injected into the dom in that async call. As it turns out, you can&amp;#39;t just inject scripts into the dom and expect them to run. If you do inject the script (as I did) you&amp;#39;ll get this warning in Chrome:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Failed to execute 'write' on 'Document': It isn't possible to write into a document from an asynchronously-loaded external script unless it is explicitly opened.
&lt;/pre&gt;
&lt;p&gt;(Personally I think this should be an error, not just a warning. To me, this is saying &amp;quot;Hey, your code that you think is running isn&amp;#39;t actually running&amp;quot; - that sounds like an error. But I digress...)&lt;/p&gt;

&lt;p&gt;After some Googling around I know of two ways to fix this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix one (bad)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mess with &lt;code&gt;document.write&lt;/code&gt;. Basically Chrome has a check that an async loaded script doesn&amp;#39;t make any calls to &lt;code&gt;document.write&lt;/code&gt;. But it doesn&amp;#39;t check for &lt;code&gt;$(&amp;#39;body&amp;#39;).append()&lt;/code&gt; (yet). So if you set &lt;code&gt;document.write&lt;/code&gt; to actually use &lt;code&gt;$(&amp;#39;body&amp;#39;).append()&lt;/code&gt; the error goes away. Here&amp;#39;s an example (taken from &lt;a href="http://www.jakobbeyer.de/asynchronous-google-adwords-conversion-tracking"&gt;Jakob Beyer&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var oldDocumentWrite = document.write

// change document.write temporary
document.write = function(node){
    $("body").append(node)
}

// get script
$.getScript( "http://www.googleadservices.com/pagead/conversion.js", function() {
    // replace the temp document.write with the original version
    setTimeout(function() {
        document.write = oldDocumentWrite
    }, 100)
});
&lt;/pre&gt;
&lt;p&gt;This threw up some red flags for me - why are we hijacking &lt;code&gt;document.write&lt;/code&gt;? If we have to do this weird dance to get around the problem, maybe it&amp;#39;s as unsafe as Chrome would have us believe - should we do something safer?&lt;/p&gt;

&lt;p&gt;Time to do some more Googling...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix two (good)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The correct way to deal with this problem is to use Google Adwords async script. I know it seems really simple and obvious, but I did find a lot of people suggesting the first way, so I&amp;#39;m hoping this post is news to some of you.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how to use Google&amp;#39;s async code:&lt;/p&gt;

&lt;p&gt;On your main page (not anything that&amp;#39;s loaded asynchronously) link to the async conversion file.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script type="text/javascript" src="//www.googleadservices.com/pagead/conversion_async.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This way the &lt;code&gt;google_trackConversion&lt;/code&gt; method is written on document load, and not async which caused the original warning we saw.&lt;/p&gt;

&lt;p&gt;Then wherever your async call returns you can trigger a call to track the conversion:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script type="text/javascript"&amp;gt;
/* &amp;lt;![CDATA[ */
window.google_trackConversion({
  google_conversion_id: 123456789,
  google_conversion_label: "your label here",
  google_custom_params: {
    parameter1: 'abc123',
    parameter2: 29.99
  }
});
//]]&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/adwords-remarketing-tag/asynchronous/"&gt;Docs&lt;/a&gt; for the good fix&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/25240908/863846"&gt;Stack overflow answer&lt;/a&gt; for the good fix&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jakobbeyer.de/asynchronous-google-adwords-conversion-tracking"&gt;Bad fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
