<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-10-20T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>CSS: Flexbox in action - Bitbucket Server pull request header</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-flexbox-in-action/"/>
    <id>http://lucybain.com/blog/2015/css-flexbox-in-action/</id>
    <published>2015-10-20T00:00:00Z</published>
    <updated>2015-10-15T19:28:15+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I &lt;a href="/blog/2015/css-flexbox/"&gt;recently wrote&lt;/a&gt; about using the &lt;code&gt;flex-box&lt;/code&gt; rule in CSS. That was a practice round because I knew I needed to use flexbox at work in the future. Well, the time has come!&lt;/p&gt;

&lt;p&gt;As you might know, I work for Atlassian on the &lt;a href="https://www.atlassian.com/software/bitbucket/download"&gt;Bitbucket Server&lt;/a&gt; product. Today I spent some time implementing flexbox on our pull request page, specifically in the header. Let’s take a look at what it’s currently like:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/current.png" /&gt;&lt;/p&gt;

&lt;p&gt;Adding flexbox is part of a much larger chunk of work, so my “finished product” looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/rough-draft.png" /&gt;&lt;/p&gt;

&lt;p&gt;Obviously it’s got a ways to go, but this little bit is done! The main point is that we utilise all of the space available to us. Previously we were’t able to expand a branch name fully even though there was enough space for it.&lt;/p&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;I was fortunate enough to be able to throw away all existing HTML and CSS. Nothing else relies on this piece of code and I had full control of how to implement this part of the feature (with lots of feedback from my fantastic colegues!). So we don’t need to talk about what &lt;em&gt;was&lt;/em&gt; there, we’re starting from scratch.&lt;/p&gt;

&lt;h3&gt;Desired outcome&lt;/h3&gt;

&lt;p&gt;The pull request header (known as PRH from now on) has X main sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;author (avatar and name)&lt;/li&gt;
&lt;li&gt;branch details (source, destination and an arrow between them)&lt;/li&gt;
&lt;li&gt;PR status&lt;/li&gt;
&lt;li&gt;reviewers (avatars only)&lt;/li&gt;
&lt;li&gt;approve button&lt;/li&gt;
&lt;li&gt;indication of merge issues&lt;/li&gt;
&lt;li&gt;merge button&lt;/li&gt;
&lt;li&gt;menu for other options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately only the author and branches should be “flexible.” Everything else should always be completely visible. After a little thought and discussion we decided that the branches should be more flexible than the author (i.e. branches should shrink faster than the author).&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;Ok, so now we understand the problem, let’s start coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: to keep the CSS easy to read, the demo pages only work in Chrome.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Getting started&lt;/h3&gt;

&lt;p&gt;When I first got into it I figured I’d just work with everything all together. I already had the HTML set up from another bit of work, so I’d &lt;em&gt;just&lt;/em&gt; add the CSS. This wasn’t successful. There were too many moving parts and I didn’t have a good enough understanding of how flexbox worked to hold all the parts in my head.&lt;/p&gt;

&lt;p&gt;I followed the (very good) advice I give to people new to programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s easier to get a small thing right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than think about the whole thing at once I focused on just the branch details section.&lt;/p&gt;

&lt;h3&gt;Branch details&lt;/h3&gt;

&lt;p&gt;The branch details looks like this:&lt;/p&gt;

&lt;p&gt;your-awesome-branch --&amp;gt; the-destination-branch&lt;/p&gt;

&lt;p&gt;So I set up my HTML like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="branch-details"&amp;gt;
    &amp;lt;div class="source"&amp;gt;
        your-awesome-branch
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="arrow"&amp;gt;
        --&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="destination"&amp;gt;
        the-destination-branch
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;(Obviously we use a better arrow really, but we’ll ignore that for this post.)&lt;/p&gt;

&lt;p&gt;Alright, now we’re getting somewhere!&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; ultimately need to be shrinkable. In order to allow them to shrink we need to make their container, &lt;code&gt;branch-details&lt;/code&gt;, flexible.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.branch-details {
    display: flex;
}
&lt;/pre&gt;
&lt;p&gt;At this point everything is flexibile. So if you &lt;a href="/blog/2015/pr-header/simple-flexbox"&gt;play with it&lt;/a&gt; you can see everything shrinks equally and the branch names wrap across lines. This wrapping makes sense for “normal” uses of flexbox (i.e. columns of text) but it isn’t what we want for the branch names.&lt;/p&gt;

&lt;p&gt;We can stop words from wrapping with a quick &lt;code&gt;white-space: nowrap&lt;/code&gt; rule. &lt;a href="/blog/2015/pr-header/no-wrap"&gt;This works&lt;/a&gt; in that the words don’t wrap, but it has the unfortuante side effect of stopping things from shrinking. Let‘s put that back by hiding overflowing text: &lt;code&gt;overflow: hidden;&lt;/code&gt;. While we’re at it, we can style the ending with an ellipsis using &lt;code&gt;text-overflow: ellipsis;&lt;/code&gt;. Ok, we’re &lt;a href="/blog/2015/pr-header/ellipsis"&gt;back in buisness&lt;/a&gt; now!&lt;/p&gt;

&lt;p&gt;And that’s it for the branch details! The source and destination branches shrink equally while the arrow remains full width.&lt;/p&gt;

&lt;h3&gt;Add the author&lt;/h3&gt;

&lt;p&gt;The other element that can strink is the author. From the designs the author, branch details and PR status are all to the left, so I’ll group these all together in my HTML. We’ll add this next layer of wrapping to make sure the author can shrink, the PR status cannot shink, and the braches continue to shrink as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/2015/pr-header/author-branches-status"&gt;New HTML:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-info"&amp;gt;
    &amp;lt;div class="author"&amp;gt;
        Author name
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="branch-details"&amp;gt;
        &amp;lt;div class="source"&amp;gt;
            your-awesome-branch
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="arrow"&amp;gt;
            --&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="destination"&amp;gt;
            the-destination-branch
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="status"&amp;gt;
        PR status
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Again, the author name needs to be flexible, so we’ll apply most of the same styles we did for the branch details to the &lt;code&gt;pr-info&lt;/code&gt; section.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}
&lt;/pre&gt;
&lt;p&gt;So we’re left with quite a good &lt;a href="http://localhost:4567/blog/2015/pr-header/author-branches-status-basic-flexible"&gt;base&lt;/a&gt; of what we want. However, you’ll noice that if you start to shrink the screen too much the author gets complete hidden. We need a better way to keep the author at least somewhat visible, and actually we want to shrink the author slower than the branches (something like: for every 5px the branches shrink the author only shrinks 1px).&lt;/p&gt;

&lt;p&gt;Well, keeping the author always somewhat visible is easy enough: we can just chuck a &lt;code&gt;min-width: 5em&lt;/code&gt; on there so we don&amp;#39;t accedentally hide the author completely. But now the branch details section doesn’t flex at all. WHY NOT??? Since the branches can flex down to nothing we’ll give the branch details a &lt;code&gt;min-width: 0&lt;/code&gt;. (In real life the PRH has the same min-width as the page and won’t be able to shrink down to completely hide the branch details. For this post I’m not going to worry about the page shrinking too small.)&lt;/p&gt;

&lt;p&gt;Ok, now we have both the author and the branch details shrinking, time to make that happen at different rates. Flexbox items have a &lt;code&gt;flex-grow&lt;/code&gt; property which says how fast the items should grow; there’s also a &lt;code&gt;flex-shrink&lt;/code&gt; property that, surprise, surprise, deals with how fast items should shrink. So we’ll make the branches shrink faster than the author by adding:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.author {
    flex-shrink: 1;
}

.branch-details {
    flex-shrink: 5;
}
&lt;/pre&gt;
&lt;p&gt;The rates are fairly arbetrary, but easily changed if needed.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href="/blog/2015/pr-header/author-branches-status-flexible"&gt;working version&lt;/a&gt; for you to play with.&lt;/p&gt;

&lt;h3&gt;Put it in context&lt;/h3&gt;

&lt;p&gt;Finally we can add the rest of the PRH code in. As a reminder, that’s the: 
reviewers, approve button, indication of merge issues, merge button, and menu for other options. Thankfully all of these will be full width (no shrinking) and most will be a consistent size.&lt;/p&gt;

&lt;p&gt;New HTML:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-header"&amp;gt;
    &amp;lt;div class="pr-info"&amp;gt;
        &amp;lt;div class="author"&amp;gt;
            Author name that’s really long, like super duper long
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="branch-details"&amp;gt;
            &amp;lt;div class="source"&amp;gt;
                your-awesome-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="arrow"&amp;gt;
                --&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="destination"&amp;gt;
                the-destination-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="status"&amp;gt;
            PR status
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="pr-actions"&amp;gt;
        &amp;lt;div&amp;gt;reviewers&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;approve button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge issues&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;menu&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Since we know we want the header to be flexible I’ll go ahead and add the basics in. Right now the &lt;code&gt;div&lt;/code&gt;s in the &lt;code&gt;.pr-actions&lt;/code&gt; are all displayed as block elements, so let’s line them up nicely. Here are the changes:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-header, .pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.pr-info, .author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}

.pr-actions div {
    display: inline-block;
}
&lt;/pre&gt;
&lt;p&gt;And &lt;a href="/blog/2015/pr-header/in-context"&gt;that’s it!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Safari&lt;/h3&gt;

&lt;p&gt;Except for Safari. Once I had the proper vendor prefixing in, everything worked as expected in all browsers (even IE!) but not Safari. This &lt;a href="LINK%20HERE"&gt;bug&lt;/a&gt; might be the culprate, but I’m really not sure. If you have any knowledge about what’s causing this, I’m interested! Anyways, for whatever reason you need to add &lt;code&gt;flex-shrink: 0&lt;/code&gt; to the things you don’t want to shrink. So for this we’ll add:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.arrow, .status, .pr-actions {
    flex-shrink: 0;
}
&lt;/pre&gt;
&lt;p&gt;And with that it’s &lt;a href="/blog/2015/pr-header/in-context-safari"&gt;Safari compliant!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Done&lt;/h2&gt;
</content>
  </entry>
  <entry>
    <title>JS: new keyword and functions</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-new-keyword-and-functions/"/>
    <id>http://lucybain.com/blog/2015/js-new-keyword-and-functions/</id>
    <published>2015-10-12T00:00:00Z</published>
    <updated>2015-10-18T17:43:07+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m still slowly making my through the &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#js"&gt;javascript interview questions&lt;/a&gt;, despite having started a new job on JS. There&amp;#39;s just so much I don’t know! Maybe one day I&amp;#39;ll actually interview someone with these questions...&lt;/p&gt;

&lt;p&gt;Alright, let’s get to today’s question:&lt;/p&gt;

&lt;h2&gt;What’s the difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = new Person()&lt;/code&gt;, and &lt;code&gt;var person = Person()&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gah! Too many things!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s take them one by one:&lt;/p&gt;

&lt;h3&gt;1. &lt;code&gt;function Person(){}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Ok, well this defined a function. Hopefully that was fairly obvious by the &lt;code&gt;function&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wow, mind blowing stuff here...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The more interesting side of it is the &lt;code&gt;Person&lt;/code&gt;. Now, the name of the function is user defined (i.e. not a keyword like &lt;code&gt;function&lt;/code&gt;), but what’s interesting here is the capital &lt;code&gt;P&lt;/code&gt;. This is a JS convention. (JS doesn’t care at all if you follow it or not, but all the other devs will be sad if you don’t.) The convention is that if a function name starts with a capital letter then that function defines a constructor (similar to a class in other languages). So we can infer that &lt;code&gt;function Person(){}&lt;/code&gt; defines a constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so functions with names starting with a capital letter are usually constructors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, it’s really, really common (hopefully you’re using this convention too!), so it’s a pretty safe bet. Let’s move on.&lt;/p&gt;

&lt;h3&gt;2. &lt;code&gt;var person = new Person()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So in many other languages we’d say “The &lt;code&gt;new&lt;/code&gt; keyword creates an instance of the &lt;code&gt;Person&lt;/code&gt; class.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is JS, not some “other language.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, very true. JS is a world unto itself. But I hope the sentence above will probably help someone from a more traditional object-oriented background.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so how does &lt;code&gt;new&lt;/code&gt; work for JS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt; does three main things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; creates a new object. It’s just a plain old, bog standard, nothing-in-it object. It looks like &lt;code&gt;{}&lt;/code&gt;. Boring, I know, but it’s very important.&lt;/li&gt;
&lt;li&gt;The newly created object has it’s prototype set to whatever the &lt;code&gt;Person&lt;/code&gt;’s prototype is right now.&lt;/li&gt;
&lt;li&gt;Finally the constructor function is called (the body of &lt;code&gt;Person&lt;/code&gt;) with any references to &lt;code&gt;this&lt;/code&gt; replaced with the object created in step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why is this important?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although I knew the final outcome of using the &lt;code&gt;new&lt;/code&gt; keyword before, having those three steps spelled out helped remove some of the magic. So let’s talk about them in more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; (the plain old empty JS object) means that you get a unique “deep copy” (other languages would say “instance”) of the constructor each time it’s run. If &lt;code&gt;new&lt;/code&gt; didn’t create a new object then you’d constantly be overwriting things in seemingly different objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; (setting the prototype) means that you can set methods on the constructor’s prototype and they’ll be available on your new object. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy');
lucy.introduce(); // logs out: "Hi, my name is Lucy"
&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;lucy&lt;/code&gt;’s prototype hadn’t been set to &lt;code&gt;Person&lt;/code&gt;’s prototype then the &lt;code&gt;introduce&lt;/code&gt; method wouldn’t have been available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; (constructor with &lt;code&gt;this&lt;/code&gt; set) means that each object’s &lt;code&gt;this&lt;/code&gt; points to the object, rather than the window or something else. Without the third step &lt;code&gt;this&lt;/code&gt; from the &lt;code&gt;Person&lt;/code&gt; constructor wouldn’t work correctly and &lt;code&gt;lucy&lt;/code&gt; wouldn’t be able to introduce herself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huh, ok, so the &lt;code&gt;new&lt;/code&gt; keyword is super important for getting &lt;strong&gt;new&lt;/strong&gt; objects. See what I did there?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moving on...&lt;/p&gt;

&lt;h3&gt;3. &lt;code&gt;var person = Person()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Things get a little tricky here, since we don’t actually have the &lt;code&gt;Person&lt;/code&gt; constructor. It can go one of three ways so let’s look at all of them.&lt;/p&gt;

&lt;h4&gt;Scenario 1 - everything is ruined&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; is a constructor that was written to work with the &lt;code&gt;new&lt;/code&gt; keyword, such as the &lt;code&gt;Person&lt;/code&gt; in my example above. In this case things will break, hopefully in an expected way given the three steps above.&lt;/p&gt;

&lt;p&gt;So, without the &lt;code&gt;new&lt;/code&gt; keyword from above those three steps won’t happen. Let’s look at what that means step by step. We’re going to use the same example as above, but without the &lt;code&gt;new&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = Person('Lucy'); // &amp;lt;-- NO NEW KEYWORD
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; (the plain old empty JS object) doesn’t happen. Now instead of getting a new object for &lt;code&gt;lucy&lt;/code&gt; all we get is the return value of &lt;code&gt;Person&lt;/code&gt;. Which is nothing (a.k.a &lt;code&gt;undefined&lt;/code&gt;). Bummer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; (setting the prototype) doesn&amp;#39;t happen. Well that’s kind of a given. Since there’s no new object (see step 1 that didn’t happen) there can’t be a prototype set on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; (constructor with &lt;code&gt;this&lt;/code&gt; set) tries to happen. It really does it’s very best. Since there’s no new object to set &lt;code&gt;this&lt;/code&gt; to, JS does the next best thing and uses the default &lt;code&gt;this&lt;/code&gt;, the window. So now there’s a brand new property on the window, and you can call it with &lt;code&gt;window.name&lt;/code&gt; or &lt;code&gt;this.name&lt;/code&gt; both of which are &lt;code&gt;&amp;quot;Lucy&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well that’s a problem.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, leaving of the &lt;code&gt;new&lt;/code&gt; keyword when it’s expected will cause all kinds of headaches.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s the “when it’s expected” caveat for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great question! The above scenario is, I think, the most likely one, both for what the question was asking about, and in buggy real life code. However, there are two other options. Let’s look at them now.&lt;/p&gt;

&lt;h4&gt;Scenario 2 - nobody cares&lt;/h4&gt;

&lt;p&gt;It’s possible that the &lt;code&gt;Person&lt;/code&gt; constructor was written to avoid just this pitfall. It would look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    if (this instanceof Person) {
        this.name = name;
      } else {
        return new Person(name);
      }
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy'); // &amp;lt;-- NEW KEYWORD IS PRESENT
lucy.introduce(); // logs out: "Hi, my name is Lucy"

var bob = Person('Bob'); // &amp;lt;-- NO NEW KEYWORD
bob.introduce(); // logs out: "Hi, my name is Bob"
&lt;/pre&gt;
&lt;p&gt;This takes advantage of the three steps that &lt;code&gt;new&lt;/code&gt; goes through as discussed above. By the time the constructor is actually run there &lt;em&gt;should&lt;/em&gt; be an object assigned to &lt;code&gt;this&lt;/code&gt; with it’s prototype set correctly so &lt;code&gt;this instanceof Person&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;em&gt;However&lt;/em&gt; if someone happened to forget the &lt;code&gt;new&lt;/code&gt; keyword then the constructor would go straight to the &lt;code&gt;else&lt;/code&gt; section and create a new object, using the &lt;code&gt;new&lt;/code&gt; keyword correctly.&lt;/p&gt;

&lt;p&gt;This means using the constructor with and without the &lt;code&gt;new&lt;/code&gt; keyword works correctly (as shown by &lt;code&gt;bob&lt;/code&gt; and &lt;code&gt;lucy&lt;/code&gt; above).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s a pretty sneaky trick!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, it’s quite clever. It’s also &lt;em&gt;really&lt;/em&gt; defensive programming. I mean, we can’t write everything to allow important keywords to just be forgotten... I think it’s bad practice (not to mention a little mean) to hide mistakes from people. I want to know when I mess up. Which brings us nicely to:&lt;/p&gt;

&lt;h4&gt;Scenario 3 - warning&lt;/h4&gt;

&lt;p&gt;Finally we reach a happy middle ground. Scenario 1 failed quietly. Scenario 2 didn’t fail at all, but also allowed incorrect code to work correctly. But scenario 3 will just give a warning, and it’s quite a simple fix.&lt;/p&gt;

&lt;p&gt;A while ago I wrote about &lt;a href="/blog/2014/js-use-strict/"&gt;strict mode&lt;/a&gt;, which is exactly what we’ll use now. Here’s an example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict"; // &amp;lt;-- THIS LINE HERE

function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy'); // &amp;lt;-- NEW KEYWORD IS PRESENT
lucy.introduce(); // logs out: "Hi, my name is Lucy"

var bob = Person('Bob'); // &amp;lt;-- NO NEW KEYWORD
// throws "Uncaught TypeError: Cannot set property 'name' of undefined"
&lt;/pre&gt;
&lt;p&gt;As you can see, using the &lt;code&gt;new&lt;/code&gt; keyword works exactly as expected. However, if you forget to use &lt;code&gt;new&lt;/code&gt; an error will be thrown, alerting you to your mistake.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s happening behind the scenes?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; just means that JS won’t allow the &lt;code&gt;this&lt;/code&gt; in the constructor to be bound to the window. Instead it leaves &lt;code&gt;this&lt;/code&gt; as undefined (since no new object was created to be properly bound to &lt;code&gt;this&lt;/code&gt;) which cuases the error &lt;code&gt;Cannot set property &amp;#39;name&amp;#39; of undefined&amp;quot;&lt;/code&gt;. I think it’s pretty slick.&lt;/p&gt;

&lt;p&gt;Note: I couldn’t get the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; to work properly in this window’s console when I ran it just now, so here’s a &lt;a href="https://jsfiddle.net/1nu5g2by/"&gt;JSFiddle&lt;/a&gt; of the example if you want to double check. Just be sure to have the console of that window open to see the error.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;That was quite a lot, can I have it one more time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing, let’s wrap it up!&lt;/p&gt;

&lt;p&gt;Our question was &amp;quot;What’s the difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = new Person()&lt;/code&gt;, and &lt;code&gt;var person = Person()&lt;/code&gt;?&amp;quot;&lt;/p&gt;

&lt;p&gt;The first one &lt;code&gt;function Person(){}&lt;/code&gt; defines a function. Since it’s got a capital letter at the beginning of the function name we expect that it’s a constructor.&lt;/p&gt;

&lt;p&gt;Next &lt;code&gt;var person = new Person()&lt;/code&gt; is one way to create new objects. Using this method &lt;code&gt;person&lt;/code&gt; will have access to everything &lt;code&gt;Person.prototype&lt;/code&gt; has access to, as well as any instance variables set in the &lt;code&gt;Person&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Finally &lt;code&gt;var person = Person()&lt;/code&gt; is a mistake. There are ways of dealing with mistakes like this (my preference is the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; method), but ultimately this should be corrected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Done?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Done! That was a long one - thanks for sticking with me!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/1564489/863846"&gt;Capitalise constructor function names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/3658673/863846"&gt;What &lt;code&gt;new&lt;/code&gt; does&lt;/a&gt; - I really recommend this question (give it an upvote for me!), as it spelled out the three steps that &lt;code&gt;new&lt;/code&gt; takes&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/383503/863846"&gt;Defensive new&lt;/a&gt; for discussion around scenario 2&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/"&gt;Strict mode and new&lt;/a&gt; - look for the section called “Global Leakage”&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zeekat.nl/articles/constructors-considered-mildly-confusing.html"&gt;More discussion&lt;/a&gt; this was the reference from the “what &lt;code&gt;new&lt;/code&gt; does” answer, so I figured it should get some credit too.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Bower link</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-bower-link/"/>
    <id>http://lucybain.com/blog/2015/js-bower-link/</id>
    <published>2015-09-28T00:00:00Z</published>
    <updated>2015-10-01T20:58:30+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;At work today I used &lt;code&gt;bower link&lt;/code&gt; and wanted to know more about how it works. I&amp;#39;m not going to talk about why you should use Bower, how to use it generally, or really anything useful for most people. I&amp;#39;m only going to talk about the &lt;code&gt;bower link&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;Linking with Bower creates symlinks. It makes a connection between two places on your computer so you can keep a clean file structure but still have all the code where you need it. It also means if you need the code in more than one place you only need one “master” copy and it can appear elsewhere as well.&lt;/p&gt;

&lt;h2&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;First, let’s lay out an example. You’re working on a project and need to write some new functionality. Typically you’d just make a new directory and include your feature’s code in there, but for this example you want the code to be stand alone (perhaps you’ll use it in another project, or perhaps you’ll publish it for others to use). So you decide to write a package for Bower to manage.&lt;/p&gt;

&lt;p&gt;Here’s the setup so far:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
&lt;/pre&gt;
&lt;h3&gt;Make your package a Bower package&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower init
&lt;/pre&gt;
&lt;p&gt;I just went ahead and accepted all the defaults, but if it was a real package you’d probably want to think about them. Again, this isn’t a post about all of Bower, so I’ll skip over any details on the &lt;code&gt;bower init&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now your package looks like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;new_package/
  node_modules/ &amp;lt;-- New!
  bower.json &amp;lt;-- New!
&lt;/pre&gt;
&lt;h3&gt;Tell Bower about your package&lt;/h3&gt;

&lt;p&gt;Next we need to tell Bower about the &lt;code&gt;new_package&lt;/code&gt; directory. This command won’t change the &lt;code&gt;new_package&lt;/code&gt; directory at all.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower link
&lt;/pre&gt;
&lt;p&gt;For Mac computers, the output of that will be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;bower link /Users/lbain/.local/share/bower/links/new_package &amp;gt; /Users/lbain/code/new_package
&lt;/pre&gt;
&lt;p&gt;(Obviously the &lt;code&gt;lbain&lt;/code&gt; will be different in your case.)&lt;/p&gt;

&lt;p&gt;Ok, let’s take a quick peak under the hood and look into &lt;code&gt;/Users/lbain/.local/share/bower/links&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd /Users/lbain/.local/share/bower/links
&lt;/pre&gt;
&lt;p&gt;From here you can see all the links you’ve created (probably just the one &lt;code&gt;new_package&lt;/code&gt; link).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd new_package
&lt;/pre&gt;
&lt;p&gt;And now you should see the &lt;code&gt;node_modules&lt;/code&gt; directory and the &lt;code&gt;bower.json&lt;/code&gt; right there. So you can see using &lt;code&gt;bower link&lt;/code&gt; creates a connection (some might even go so far as to say “link”) between the original and the bower-controlled code.&lt;/p&gt;

&lt;p&gt;Ok, we’re halfway there! &lt;/p&gt;

&lt;h3&gt;Tell your project about your package&lt;/h3&gt;

&lt;p&gt;Now we can go back to your project and get to include your package.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/my_awesome_project
&lt;/pre&gt;
&lt;p&gt;From here we run the &lt;code&gt;bower link&lt;/code&gt; command, but with a parameter of the package name.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link new_package
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The fact that you’re just giving the name of the directory you want to link is pretty much the only really clear advantage of using &lt;code&gt;bower link&lt;/code&gt; over a traditional symlink. Yes, you get all of the associated Bower-goodness, but for this example (where we’re not looking at the Bower-goodness) the name is about the only interesting thing.&lt;/p&gt;

&lt;p&gt;The output of that is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link /Users/lbain/code/my_awesome_project/bower_components/new_package &amp;gt; /Users/lbain/.local/share/bower/links/new_package
&lt;/pre&gt;
&lt;p&gt;The content of &lt;code&gt;/Users/lbain/.local/share/bower/links/&lt;/code&gt; hasn’t changed. Rather, that directory keeps a list of all linkable packages, not the packages that have been linked.&lt;/p&gt;

&lt;p&gt;Now your directories should look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    bower_components/ &amp;lt;-- New!
      new_package/ &amp;lt;-- New!
        node_modules/ &amp;lt;-- New!
        bower.json &amp;lt;-- New!
    node_modules/ &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
&lt;/pre&gt;
&lt;p&gt;So, as you can see, you&amp;#39;ve got all of &lt;code&gt;new_package&lt;/code&gt;’s content in &lt;code&gt;my_awesome_project/bower_components&lt;/code&gt;. Any other Bower packages you link would also go to the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;Prove it!&lt;/h3&gt;

&lt;p&gt;Alright, let’s give it a quick test. Make a new file in &lt;code&gt;new_package&lt;/code&gt; and save it. It should also be in &lt;code&gt;my_awesome_project&lt;/code&gt;!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    new_package/
      node_modules/
      bower.json
      test.txt &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
    test.txt &amp;lt;-- New!
&lt;/pre&gt;
&lt;p&gt;You can also add files the other way. Make a new file in &lt;code&gt;my_awesome_project&lt;/code&gt; and save it. It should also be in &lt;code&gt;new_package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can develop as though your code was inline, but actually keep it as a stand alone package.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Again, this is a 100% normal symlink. The code used to make the link can be found on &lt;a href="https://github.com/bower/bower/blob/master/lib/util/createLink.js"&gt;Bower’s GitHub&lt;/a&gt; and doesn’t do anything fancy. If you go around moving &lt;code&gt;new_package&lt;/code&gt; the symlinks will break!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.tutsplus.com/tutorials/meet-bower-a-package-manager-for-the-web--net-27774"&gt;Intro to Bower&lt;/a&gt; - I really liked the style of this one, it’s quite chatty, just like me!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bower/bower/"&gt;Bower’s code&lt;/a&gt; if you want to look under the hood&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: ES6 Const keyword</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-es6-const/"/>
    <id>http://lucybain.com/blog/2015/js-es6-const/</id>
    <published>2015-08-02T00:00:00Z</published>
    <updated>2015-12-17T22:33:11+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;A little bit of background&lt;/h2&gt;

&lt;h3&gt;ES6&lt;/h3&gt;

&lt;p&gt;ECMAScript 6 (ES6) introduced a lot of new JS keywords to play with. Generally these changes make JS a bit more approchable for new JS developers by making JS more similar to other programming languages.&lt;/p&gt;

&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;Some languages (particularly compiled ones like Java) have a concept of &lt;em&gt;constants&lt;/em&gt;. This are like &lt;em&gt;variables&lt;/em&gt;, but the opposite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wow, that was really clear...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Constants are like variables in that a value can be assigned to them. They are unlike variables in that their value cannot be changed after the a value has been assigned to them. (There’s a lot more that could be said about this, but I’ll leave it there since it’s enough to get through this post.)&lt;/p&gt;

&lt;p&gt;In sudo code it would look kinda like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;variable = 1
constant = 2

variable = 3 // All good since variables can change
constant = 4 // Error since constants can't change
&lt;/pre&gt;
&lt;h2&gt;Let’s talk about JS&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;So that’s how other languages do it - but what about JS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Honestly ES6’s implementation seems pretty similar to other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since ES6 isn’t fully implemented in browsers most people are using a compiler to get from ES6 syntax to normal JS. These compilers might throw errors for some of the examples below.&lt;/p&gt;

&lt;h3&gt;Basic usage&lt;/h3&gt;

&lt;p&gt;ES6 introduced a new &lt;code&gt;const&lt;/code&gt; keyword to behave like a constant. Something that is defined &lt;code&gt;const&lt;/code&gt; can only be assigned once.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const cat = 'meow';
cat = 'woof';
console.log(cat); // logs 'meow'
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But what if I try something tricky?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There’re are a couple of ways you could try to beat the system, but ES6 has covered them.&lt;/p&gt;

&lt;p&gt;Reuse the &lt;code&gt;const&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const cat = 'meow';
const cat = 'woof';
console.log(cat); // logs 'meow'
&lt;/pre&gt;
&lt;p&gt;Change a constant to a variable:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const cat = 'meow';
var cat = 'woof';
console.log(cat); // logs 'meow'
&lt;/pre&gt;
&lt;p&gt;Declare a constant without defining it:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const cat; // SyntaxError
&lt;/pre&gt;
&lt;p&gt;Ideally you should use constants in their intended way without getting too tricky!&lt;/p&gt;

&lt;h3&gt;Gotcha&lt;/h3&gt;

&lt;p&gt;Here’s the big catch: a constant can only be defined once, but it can be changed in other ways. In “programming terms” something that cannot be changed in anyway is &lt;strong&gt;immutable&lt;/strong&gt;. ES6 constants are mutable (i.e. not immutable, i.e. changeable).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can I change a constant?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some object types can be changed without assigning again. Let’s look at a couple.&lt;/p&gt;

&lt;p&gt;Arrays:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const animals = [];
animals.push('cat', 'dog');
console.log(animals); // ['cat', 'dog']
&lt;/pre&gt;
&lt;p&gt;Objects:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;const cat = {'sound': 'meow'};
cat.sound = 'woof'
console.log(cat.sound); // 'meow'
&lt;/pre&gt;
&lt;p&gt;Any mutable object type will have this problem. The immutable types are: Boolean, Null, Undefined, Number, String, Symbol (the primative types).&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://strongloop.com/strongblog/es6-variable-declarations/"&gt;StrongLoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io/repl/"&gt;Babel REPL&lt;/a&gt; if you want to play around with ES6&lt;/li&gt;
&lt;li&gt;&lt;a href="http://programmers.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6"&gt;StackExchange&lt;/a&gt; for a discussion about when to use &lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Intro to programming: If statements</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/intro-to-programming-if-statements/"/>
    <id>http://lucybain.com/blog/2015/intro-to-programming-if-statements/</id>
    <published>2015-07-24T00:00:00Z</published>
    <updated>2015-11-10T20:54:37+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explanation&lt;/h2&gt;

&lt;p&gt;Although computers live in a very predictable world of 1s and 0s they need to be able to handle uncertainties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; a customer has enough money in his account &lt;strong&gt;then&lt;/strong&gt; the ATM should give money out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; a shirt is on sale &lt;strong&gt;then&lt;/strong&gt; the shirt’s price must be updated &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You deal with uncertainties by using the same kind of &lt;strong&gt;if statements&lt;/strong&gt; as a computer every day.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; it is sunny &lt;strong&gt;then&lt;/strong&gt; we will have a picnic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You first determine that it’s sunny, then you know you will have a picnic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; you are over 4ft tall &lt;strong&gt;then&lt;/strong&gt; you can ride this roller coaster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you know you know you are over 4ft tall you also know you are allowed to ride this roller coaster.&lt;/p&gt;

&lt;p&gt;Each if statement will occur only under a certain condition (it’s sunny or you are over 4ft tall in the above examples). This condition will be a &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; statement. When the condition is &lt;code&gt;True&lt;/code&gt;, the “then” section will occur. When the condition is &lt;code&gt;False&lt;/code&gt;, the “then” section is ignored.&lt;/p&gt;

&lt;p&gt;We might string many of these ifs together:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; it is sunny &lt;strong&gt;then&lt;/strong&gt; we will have a picnic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; it is raining &lt;strong&gt;then&lt;/strong&gt; I will bring an umbrella.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; it is cold &lt;strong&gt;then&lt;/strong&gt; I will wear a coat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s assume that it’s both sunny and cold. Using your “human” brain, reread the above.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Will you go on a picnic? Yes.&lt;/li&gt;
&lt;li&gt;Will you bring an umbrella? No.&lt;/li&gt;
&lt;li&gt;Will you wear a coat? Yes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lovely! You&amp;#39;ve got a picnic wearing a light jacket to look forward to!&lt;/p&gt;

&lt;p&gt;Now look at the conditions in the examples above with your “computer” brain. Notice anything? These conditions are always a statement that is &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. “It is sunny”, “it is raining”, and “it is cold” are all boolean expressions. So the computer can read these examples as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt; &lt;strong&gt;then&lt;/strong&gt; we will have a picnic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; &lt;code&gt;False&lt;/code&gt; (this is ignored since the condition evaluated to &lt;code&gt;False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt; &lt;strong&gt;then&lt;/strong&gt; I will wear a coat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Computers use these if statements to determine what should happen next. If statements control the flow of the program, some things happen (like having a picnic), while others are skipped over (like bringing an umbrella).&lt;/p&gt;

&lt;h2&gt;Exercises&lt;/h2&gt;

&lt;p&gt;Ok, now it’s your turn. Answer the following questions for you at the current moment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; it is sunny &lt;strong&gt;then&lt;/strong&gt; we will have a picnic.&lt;/p&gt;

&lt;p&gt;Will you have a picnic today?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; you eat your vegetables &lt;strong&gt;then&lt;/strong&gt; you can have dessert.&lt;/p&gt;

&lt;p&gt;Any dessert for you?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; the sky is blue &lt;strong&gt;then&lt;/strong&gt; the world is turning.&lt;/p&gt;

&lt;p&gt;Is the world still turning?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt; the light is off &lt;strong&gt;then&lt;/strong&gt; the teacher will turn it on.&lt;/p&gt;

&lt;p&gt;Does the teacher turn on the light?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think about your every day life, and come up with at least five more examples of when you use if statements to decide what to do.&lt;/p&gt;

&lt;iframe id="hidden_iframe" name="hidden_iframe" style="display:none;"&gt;
&lt;/iframe&gt;

&lt;form action="https://docs.google.com/forms/d/1u4xIbGktEd3RzHQHfJcSRwuqUklokVcmeNBTrVbH6oI/formResponse" method="POST" id="ss-form" onsubmit="hideQuestions();" target="hidden_iframe" class="programming-examples"&gt;
  &lt;div class="example-questions"&gt;
    &lt;input type="hidden" name="entry.1043295642" value="If statements" id="group_1043295642_1" role="radio" class="ss-q-radio valid" aria-label="Boolean"&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;textarea name="entry.1571729994" rows="8" cols="0" class="ss-q-long" id="entry_1571729994" dir="auto" aria-label="Example 1  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.332234193" rows="8" cols="0" class="ss-q-long" id="entry_332234193" dir="auto" aria-label="Example 2  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.796117189" rows="8" cols="0" class="ss-q-long" id="entry_796117189" dir="auto" aria-label="Example 3  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.1635444679" rows="8" cols="0" class="ss-q-long" id="entry_1635444679" dir="auto" aria-label="Example 4  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.341236292" rows="8" cols="0" class="ss-q-long" id="entry_341236292" dir="auto" aria-label="Example 5  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;input type="submit" name="submit" value="Submit" id="ss-submit" class="jfk-button jfk-button-action "&gt;
  &lt;/div&gt;
  &lt;div class="thank-you"&gt;
    Thanks for submitting your examples!
  &lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
function hideQuestions() {
  document.getElementsByClassName('example-questions')[0].className+=' inactive';
  document.getElementsByClassName('thank-you')[0].className+=' active';
}
&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>CSS: What is Block Formatting Context (BFC)?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-block-formatting-context/"/>
    <id>http://lucybain.com/blog/2015/css-block-formatting-context/</id>
    <published>2015-07-12T00:00:00Z</published>
    <updated>2015-10-25T18:26:49+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Time for the next CSS interview question from the list of &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#css-questions"&gt;front end interview questions&lt;/a&gt;. My goodness that repo has a LOT of questions to get through!&lt;/p&gt;

&lt;h2&gt;What is Block Formatting Context (BFC)?&lt;/h2&gt;

&lt;p&gt;It seems that BFC is something that I’ve always assumed was part of how floats worked, and hadn’t realised was it’s own concept with a name. So if you’ve been playing with floats for a while (or if you’ve upgraded to &lt;a href="/blog/2015/css-flexbox/"&gt;flexbox&lt;/a&gt;) then this probably won’t be interesting to you. But hey - it’s always good to understand things more deeply!&lt;/p&gt;

&lt;style&gt;
.container {
    background-color: #FF7400;
}
.box-1 {
    background-color: #F55585;
}
.box-2 {
    background-color: #00CFCF;
}
&lt;/style&gt;

&lt;p&gt;From &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context"&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Yawn, what was that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, so a block formatting context is an area where block boxes and floats go. I think of it as a containing element that has flow rules (so the block boxes are, well, block-y) and hard boundaries (so the floats don’t leave the container). Ultimately the page is a block formatting context, but you can have a bunch in a page. Actually, you can have BFCs in BFCs, Inception style. While that sounds cool (I mean, I just talked about Inception in a CSS post - that’s gotta count for something!), that’s what most of HTML and CSS is (&lt;code&gt;div&lt;/code&gt;s within &lt;code&gt;div&lt;/code&gt;s).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so you’re telling me BFCs are totally normal CSS and nothing particularly interesting.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, yes, but they also have some handy features. Let’s talk about them now.&lt;/p&gt;

&lt;p&gt;Block formatting contexts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stop margins from collapsing&lt;/li&gt;
&lt;li&gt;restrain floats&lt;/li&gt;
&lt;li&gt;contain floats&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Block formatting contexts stop margins from collapsing&lt;/h3&gt;

&lt;p&gt;What normally happens?&lt;/p&gt;

&lt;style&gt;
.margin {
    margin: 20px;
}
&lt;/style&gt;

&lt;div class="container"&gt;
    &lt;div class="margin box-1"&gt;
        This div has a 20px margin around it.
    &lt;/div&gt;
    &lt;div class="margin box-2"&gt;
        So does this one.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since both of those &lt;code&gt;div&lt;/code&gt;s have 20px of margin around them you’d expect to see 20px of margin at the top and bottom as well. But actually there’s no margin there, that’s because CSS automatically collapses margins.&lt;/p&gt;

&lt;p&gt;Now let’s check it in a block formatting context:&lt;/p&gt;

&lt;style&gt;
.block-formatting-context {
    overflow: hidden;
}
&lt;/style&gt;

&lt;div class="container block-formatting-context"&gt;
    &lt;div class="margin box-1"&gt;
        This div has a 20px margin around it.
    &lt;/div&gt;
    &lt;div class="margin box-2"&gt;
        So does this one.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Boom! See all that extra margin at the top and bottom? That’s because of the block formatting context! Now, in case you don’t feel like looking at the source, I made the containing &lt;code&gt;div&lt;/code&gt; a BFC by giving it &lt;code&gt;overflow: hidden;&lt;/code&gt;. Simple :)&lt;/p&gt;

&lt;h3&gt;Block formatting contexts restrain floats&lt;/h3&gt;

&lt;p&gt;Here’s what it looks like normally:&lt;/p&gt;

&lt;style&gt;
.float {
    float: left;
}
&lt;/style&gt;

&lt;div class="container"&gt;
    &lt;div class="float box-1"&gt;
        This div is floating left
    &lt;/div&gt;
    &lt;div class="box-2"&gt;
        This one is &lt;b&gt;NOT&lt;/b&gt; floating. It’s got a lot of words in it. This div is probably your main section.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s probably not what you want your two column layout to look like. Don’t worry, we can fix it!&lt;/p&gt;

&lt;p&gt;Here it is with block formatting context properly enabled:&lt;/p&gt;

&lt;style&gt;
.block-formatting-context {
    overflow: hidden;
}
&lt;/style&gt;

&lt;div class="container"&gt;
    &lt;div class="float box-1"&gt;
        This div is floating left
    &lt;/div&gt;
    &lt;div class="box-2 block-formatting-context"&gt;
        This one is &lt;b&gt;NOT&lt;/b&gt; floating, it is a &lt;b&gt;block formatting context&lt;/b&gt;. It’s got a lot of words in it. This div is probably your main section.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you an see, this ability makes BFCs really handy for doing column layouts.&lt;/p&gt;

&lt;h3&gt;Block formatting contexts contain floats&lt;/h3&gt;

&lt;p&gt;Here’s what it looks like normally:&lt;/p&gt;

&lt;style&gt;
.float {
    float: left;
}

.border {
    border: 2px solid black;
}
.clearfix {
    clear: both;
}
&lt;/style&gt;

&lt;div class="container border"&gt;
    &lt;div class="float box-1"&gt;
        This div is floating left
    &lt;/div&gt;
    &lt;div class="float box-2"&gt;
        This one is too.
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="clearfix"&gt;&lt;/div&gt;

&lt;p&gt;This time we’re trying to wrap two floated elements in a border. Obviously it didn’t work as expected. It’s actually worse than that. I had to add an invisible &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;clear: both;&lt;/code&gt; (typically called a “clearfix”) before this paragraph to make sure the line breaks work properly. We shouldn’t need to do that!&lt;/p&gt;

&lt;p&gt;Now we’ll add block formatting context:&lt;/p&gt;

&lt;style&gt;
.block-formatting-context {
    overflow: hidden;
}
&lt;/style&gt;

&lt;div class="container border block-formatting-context"&gt;
    &lt;div class="float box-1"&gt;
        This div is floating left
    &lt;/div&gt;
    &lt;div class="float box-2"&gt;
        This one is too.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Woot! Two boxes floating next to each other with a border around them and without using a clearfix. All by using a block formatting context!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context"&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.vg.no/2013/09/26/css-block-formatting-context/"&gt;VG Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://maxdesign.com.au/jobs/sample-block-formatting-context/index.htm"&gt;Max Design&lt;/a&gt; - this one was particularly useful since it has a bunch of examples&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts/"&gt;YUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
