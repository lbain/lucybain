<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2014-09-25T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS event delegation</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/event-delegation/"/>
    <id>http://lucybain.com/blog/2014/event-delegation/</id>
    <published>2014-09-25T00:00:00Z</published>
    <updated>2014-09-25T21:55:49+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  I'm continuing my JS learning and found a list of &lt;a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions"&gt;front end interview questions&lt;/a&gt;. There's a section devoted to JS on there for me to work through. If they're important enough to know in an interview I should probably know about them too.
&lt;/p&gt;
&lt;h2&gt;Explain event delegation&lt;/h2&gt;
&lt;p&gt;
  Well I'm glad you asked. As it turns out we covered this topic in my &lt;a href="http://codesydney.com"&gt;JS study group&lt;/a&gt; when I wrote my &lt;a href="code-sydney-work/tic-tac-toe/"&gt;Tic Tac Toe game.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  Event delegation is when you bind an event listener to a parent (or ancestor) element rather than the element(s) you are particularly interested in. When the event is triggered you can check the event target to make sure it was actually the triggered on the element of interest. In general this would be inefficient as you're now listening to events on the parent, and have to filter out any that aren't on the particular element of interest. However, event delegation is particularly useful when you have many siblings (or decedents of the ancestor) that you're interested in.
&lt;/p&gt;
&lt;p&gt;
  A simple example is as follows:
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;ul&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; First list element &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; Second list element &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; Third list element &amp;lt;/li&amp;gt;&amp;#x000A;&amp;lt;/ul&amp;gt;&amp;#x000A;&lt;/pre&gt;
&lt;p&gt;
  While it would be possible to bind to the individual &lt;code&gt;li&lt;/code&gt; elements it would require 3 listeners. Using event delegation it is possible to bind one event listener to the &lt;code&gt;ul&lt;/code&gt; element and just check if the event's target is an li element (very likely in this case...).
&lt;/p&gt;
&lt;p&gt;
  For my Tic Tac Toe game I listened to all click events on the board, and then checked the particular cell they clicked on, rather than listening for events on all the cells at once.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sublime Text Macros</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/sublime-macros/"/>
    <id>http://lucybain.com/blog/2014/sublime-macros/</id>
    <published>2014-06-18T00:00:00Z</published>
    <updated>2014-06-18T13:23:40+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  My coworker users vim, and has a snazzy macro to put a &lt;code&gt;binding.pry&lt;/code&gt; wherever he using a keyboad shortcut. I thought it was a neat trick (and he mentioned something about Sublime not being a real editor), so I decided to implement it for Sublime as well.
&lt;/p&gt;
&lt;p&gt;
  I looked up &lt;a href="http://docs.sublimetext.info/en/latest/extensibility/macros.html"&gt;how to make macros&lt;/a&gt; and wrote one for adding &lt;code&gt;binding.pry&lt;/code&gt;. Basically you need to use &lt;code&gt;control + q&lt;/code&gt; to start and stop your macro recording. Then you save the macro by going to &lt;code&gt;Tools/Save Macro...&lt;/code&gt;. You should name it something memerable, like &lt;code&gt;add_binding&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Ok, now we've got our macro, and you can invoke it by going to &lt;code&gt;Tools/Macros/User/add_macro&lt;/code&gt;. (Note: you might need to restart Sublime first.) But going to the menu each time is lame, we're better than that.
&lt;/p&gt;
&lt;p&gt;
  Let's add a key binding!
&lt;/p&gt;
&lt;p&gt;
  I've done &lt;a href="http://docs.sublimetext.info/en/latest/customization/key_bindings.html"&gt;key bindings&lt;/a&gt; in the &lt;a href="/blog/2014/Sublime-Auto-Indent/"&gt;past&lt;/a&gt;, but not &lt;a href="http://superuser.com/questions/609057/how-do-i-assign-a-keyboard-shortcut-to-recorded-macro-in-sublime-text"&gt;with macros&lt;/a&gt;. I chose to use &lt;code&gt;command + b&lt;/code&gt; for mine (you might have that map to build, just a heads up...). So my key binding looked like this:
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;
  Awesome, now &lt;code&gt;command + b&lt;/code&gt; will add a &lt;code&gt;binding.pry&lt;/code&gt; inline. Handy!
&lt;/p&gt;
&lt;p&gt;
  But I wanted more, a &lt;code&gt;- binding.pry&lt;/code&gt; in haml, and a &lt;code&gt;debugger&lt;/code&gt; in javascript. I also wanted to use the same key binding. I didn't want to think about if I'm in haml or JS.
&lt;/p&gt;
&lt;p&gt;
  Creating the macros was the same, but I needed the key bindings to know what kind of file I was in. I looked into how to make &lt;a href="http://www.guiguan.net/how-to-set-a-key-binding-in-sublime-text-based-on-the-file-type-the-command-is-running-on/."&gt;key bindings source aware&lt;/a&gt;. I also needed to know how &lt;a href="https://gist.github.com/iambibhas/4705378"&gt;Sublime names file types&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  Putting it all together, the final key bindings look like this:
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"source.ruby,source.ruby.rails"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&amp;#x000A;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_haml_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text.haml"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&amp;#x000A;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_debugger.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"source.js,source.coffee"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&lt;/span&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Next up: Front end</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/front-end/"/>
    <id>http://lucybain.com/blog/2014/front-end/</id>
    <published>2014-03-13T00:00:00Z</published>
    <updated>2014-03-27T10:32:57+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  For the next 12-14 months I'd like to learn front end dev.
&lt;/p&gt;
&lt;p&gt;
  I've been doing Rails for a little over 2 years now, and almost all of my training and experience has been heavily back end oriented. Pretty much everything I learned at uni was for back end languages and processes. I took all the web courses that were offered, but they didn't focus heavily on JS or CSS - although they did expose me to those concepts. Certainly everything I've done since uni has been back end (just a bit of Python, and then Ruby on Rails). I've learned heaps from this - MVC architecture, better programming design principles, some pretty awesome tricks Ruby can do, and a bunch more.
&lt;/p&gt;
&lt;p&gt;
  But I'd like to try my hand at some front end development. I think there's something satisfying to knowing people are seeing and interacting with what you're building - that happens more for front end. There's also a lot to learn about user interface design, and how to think like a user. It's also something that's definitely missing from my abilities. I always get a bit nervous when I need to do some front end tweaks, and any CSS change takes way longer than it really needs to. I'd like to move a bit closer to being "full stack" and not just boxing myself in to RoR back end.
&lt;/p&gt;
&lt;p&gt;
  So. What to do? I'm going to finish the &lt;a href="https://www.udacity.com/course/cs101"&gt;Python 101&lt;/a&gt; &lt;a href="/resources/udacity-python-study-group/"&gt;study group&lt;/a&gt; I organized. Just keeping up with the lectures for this class is taking a fair bit of time in the evenings. But then after that I'm planning on focusing on JS, CSS, and HTML with the goal of getting a front end job after a year.
&lt;/p&gt;
&lt;p&gt;
  I'm not really sure the best way to do that though. Some possible resources:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;a href="http://www.codecademy.com/"&gt;codecademy.com&lt;/a&gt; JS, jQuery, and HTML tracks
  &lt;/li&gt;
  &lt;li&gt;
    Getting a &lt;a href="https://github.com/sydjs/sydjs/wiki/Available-mentors"&gt;mentor&lt;/a&gt; from the SydJS community
  &lt;/li&gt;
  &lt;li&gt;
    Udacity's &lt;a href="https://www.udacity.com/course/cs256"&gt;Mobile Web Development&lt;/a&gt; to focus on responsive CSS
  &lt;/li&gt;
  &lt;li&gt;
    Udacity's &lt;a href="https://www.udacity.com/course/cs255"&gt;HTML5 Game Development&lt;/a&gt; focusing on... HTML5
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="http://shop.oreilly.com/product/9780596517748.do"&gt;JavaScript: The Good Parts&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="http://shop.oreilly.com/product/9780596805531.do"&gt;JavaScript: The Definitive Guide&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    And of course a series of exercises to practice and build a portfolio of sorts. Not sure exactly what this is going to entail...
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Do you have any suggestions? I'd love to work with a pretty clear plan, a curriculum if you will, and any ideas would be appreciated. Thank you!
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RubyConf - a look back</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/RubyConf-a-look-back/"/>
    <id>http://lucybain.com/blog/2014/RubyConf-a-look-back/</id>
    <published>2014-03-07T00:00:00Z</published>
    <updated>2014-03-27T10:32:57+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  It's been almost 3 weeks since RubyConf. Feels like longer. I wrote a &lt;a href="/blog/2014/RubyConfAU/"&gt;quick review&lt;/a&gt; after the event, but that post didn't do RubyConf justice.
&lt;/p&gt;
&lt;p&gt;
  Really, I'm not sure what made RubyConf so great. The talks? Meeting new people? Chatting with existing friends? Learning? Seeing so many people interested in the same thing? I don't know. Everything there was pretty amazing.
&lt;/p&gt;
&lt;p&gt;
  But for me, the most amazing part was what happened when I left. When I went back to work. When the talks were over, and my friends dispersed. Once I'd caught up on sleep and headed back to the "real world" I found I had more confidence as a programmer. A lot more. Enough to go out and make my &lt;a href="/resources/udacity-python-study-group/"&gt;Python 101 study group&lt;/a&gt; happen. Enough to tell my team why I was unhappy with our process (something they took very seriously and changed quickly - I love &lt;a href="/resources/job/"&gt;my team&lt;/a&gt;). Enough to feel like I have useful opinions.
&lt;/p&gt;
&lt;p&gt;
  Not that I thought of myself as dumb or useless, just that I assumed my experience level excluded me from ... something. As the least experienced member of our team I'm used to not knowing things, asking questions, and trying to keep up with everyone else. Somehow RubyConf reminded me of what I have learned in the past 2 years of Ruby. It reminded me of the great community I'm part of, and help form through &lt;a href="http://railsgirls.com/sydney"&gt;RailsGirls&lt;/a&gt;, &lt;a href="http://www.meetup.com/Ruby-On-Rails-Oceania-Sydney/"&gt;Installfest, and DevHub&lt;/a&gt;. People asked me my opinion about things (ok, sure those things were mostly about being a woman in tech, but still, it made me feel valued), and I actually understood most of the talks I watched (not all, but most, always room to grow!). And people knew me - after living in Sydney for almost a year now, RubyConf made me feel like I belonged.
&lt;/p&gt;
&lt;p&gt;
  I know there were many &lt;a href="http://sampeters.net/blog/meetups-hubs-and-casual-get-togethers-and-the-developer-community/"&gt;different&lt;/a&gt; &lt;a href="http://ruby.org.au/articles"&gt;reactions&lt;/a&gt; to RubyConf. But I'd like to add mine to the mix. It was amazing - both before and after.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sublime Auto Indent</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/Sublime-Auto-Indent/"/>
    <id>http://lucybain.com/blog/2014/Sublime-Auto-Indent/</id>
    <published>2014-02-27T00:00:00Z</published>
    <updated>2014-03-27T10:32:57+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  I recently discovered how to get Sublime to fix indentations for you! Since I spend a certain amount of time each day pushing characters left and right this was pretty exciting. Hope you find it useful!
&lt;/p&gt;
&lt;p&gt;
  In Sublime, under &lt;code&gt;Preference&lt;/code&gt; select &lt;code&gt;Key Bindings - User&lt;/code&gt;. If you've got anything in there already, just add the &lt;code&gt;{ "keys"... }&lt;/code&gt; section below. Otherwise you can replace the &lt;code&gt;[]&lt;/code&gt; with:
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;[&amp;#x000A;  { "keys": ["super+i"],&amp;#x000A;    "command": "reindent"}&amp;#x000A;]&lt;/pre&gt;
&lt;p&gt;
  Now you can use &lt;code&gt;cmd + i&lt;/code&gt; (mac), or &lt;code&gt;ctrl + i&lt;/code&gt; (windows) to auto indent your code. It's not always perfect, but it's helped me with my rails code.
&lt;/p&gt;
&lt;h2&gt;
  What's happening here?
&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;"keys"&lt;/code&gt; labels the next section as the keys that will trigger the action.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;["super+i"]&lt;/code&gt; means "use whatever this computer defaults to" (&lt;code&gt;cmd&lt;/code&gt; for macs, &lt;code&gt;ctrl&lt;/code&gt; for windows) and &lt;code&gt;i&lt;/code&gt; to trigger the action.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;"command"&lt;/code&gt; labels which command the given key binding should trigger.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;"reindent"&lt;/code&gt; is the command that will run on the given key press. You can find a list of commands to use &lt;a href="http://www.sublimetext.com/docs/commands"&gt;in the docs&lt;/a&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Getting Started on Twitter</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/getting-start-on-twitter/"/>
    <id>http://lucybain.com/blog/2014/getting-start-on-twitter/</id>
    <published>2014-02-25T00:00:00Z</published>
    <updated>2014-03-27T10:32:57+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  A friend of mine recently got set up with Twitter and asked for some pointers. Another friend complemented me on my feed. I felt flattered, and wanted to make how I use Twitter public.
&lt;/p&gt;
&lt;p&gt;
  There are &lt;em&gt;many&lt;/em&gt; sites out there to help you use Twitter more effectively. I do not believe what I have to say is better or more relevant, this is just written from one friend to another, I hope you find it helpful.
&lt;/p&gt;
&lt;h2&gt;
  The basics
&lt;/h2&gt;
&lt;p&gt;
  There are a few starting points you should know about Twitter. Once you've had an account for a while it's fairly straight forward, but if you're just starting out here are some tips:
  &lt;ul&gt;
    &lt;li&gt;
      If you tweet at someone (e.g. "@lucykbain how's your day going?") only people who follow both you and the person you're tweeting at can see the tweet. If you'd like to tweet at someone but want everyone to see you need to start with another character, general a period (e.g. ".@lucykbain thanks for the link - I'm sharing it with everyone!")
    &lt;/li&gt;
    &lt;li&gt;
      If you retweet someone your handle (username) is visible, but not as prominent as the person you retweeted. You can get around this by quoting their tweet, but unless you're adding something it's kind of bad manners.
    &lt;/li&gt;
    &lt;li&gt;
      Favouriting tweets lets the person know you saw the tweet, or that you appreciated it. It will be saved in your "favourited" section, but it doesn't go out to your followers. The person who wrote the original tweet would appreciate a retweet over a favourite, but that's up to you.
    &lt;/li&gt;
    &lt;li&gt;
      You can send a direct message (DM) to someone you follow who follows you back (two way follow). A DM is kind of like an email (private between the two of you), but has the same character limit. Also, I've found it can be hard to share links in a DM, sometimes it works, sometimes it doesn't.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;h2&gt;Moving up in the world&lt;/h2&gt;
&lt;p&gt;
  If you're happy with your twitter experience, that's great! Just keep doing what you're doing. I'm not telling you that you should change. But, if you'd like more followers, exposure, or focus, the rest of this post might help.
&lt;/p&gt;
&lt;p&gt;
  Ok, now you've gotten the hang of Twitter, you have a few followers (hey, your mom totally counts!), and you're following a few people yourself (the more the merrier!). What's next?
&lt;/p&gt;
&lt;p&gt;
  For me it's now about optimising your tweets and your time. Sure some people seem to tweet constantly - more power to them. I tend to unfollow people who tweet too much. I don't  want to spend my day sifting through tweets to find good ones to retweet, or reading through someone's blow by blow account of their breakfast. Other people tweet whenever, sometimes going weeks at a time without writing anything. I usually forget I'm following these people, but their tweets don't bother me.
&lt;/p&gt;
&lt;p&gt;
  So let's say you decide to set a goal for two "good" tweets a day. "Good" is what you define it to be - links to your own content, witty comments, helpful tips, links to things you found interesting/useful, whatever you think the internet needs more of. Two tweets a day is a good starting point - enough that you feel a bit of pressure to make good tweets, but few so you have to trash the bad ones. Now, how do you know when to tweet?
&lt;/p&gt;
&lt;p&gt;
  You go checkout &lt;a href="https://followerwonk.com/"&gt;followerwonk&lt;/a&gt; and find out when most of your followers are active. (There are other services that do the same kind of thing. I've only ever used followerwonk, so I don't know about the others, just that they exist.) But don't stop there, scroll down a little more and find when most of your followers retweet. Retweets are pretty much the goal. Whatever your saying, you want it to get to as many people as possible. If they end up following you, that's great, but even if they don't, they saw what you were saying, and that's the important bit. If you're only tweeting once or twice a day you want to make sure what you tweet has the greatest impact.
&lt;/p&gt;
&lt;p&gt;
  Rank the times you tweet based on their potential. Generally that will be the number of retweets your followers make during a given time. Whatever is in your "best" time make sure that's your best content. This isn't rocket science, it isn't particularly interesting or hard. It's just that you should think about it. Sure, you can tweet whenever, but if you know when the "best" time for you is, tweet then.
&lt;/p&gt;
&lt;p&gt;
  Finally, it's pretty annoying to remember when to tweet. You might think of something great to say, but at the "wrong" time. There are a few services out there. I use &lt;a href="http://bufferapp.com/r/63cdc6"&gt;Buffer&lt;/a&gt;, but there are similar services out there. They'll keep track of when to tweet for you so you don't need to. It also means you can put a whole bunch of great tweets together at the same time, but they'll get spaced out so you don't spam your followers.
&lt;/p&gt;
&lt;p&gt;
  Of course there are going to be times when you just &lt;em&gt;have&lt;/em&gt; to tweet. That's fine, it's even encouraged if you're at an event or tweeting about anything time based. Just be aware that if you're tweeting more than usual about something specific, other people are too. The whole stream is diluted, and your great content is more likely to get missed. So maybe pause your Buffer, or put in some of your not-so-great tweets...
&lt;/p&gt;
&lt;p&gt;
  And that's it! As I said, not particularly scientific, and certainly nothing about massive SEO stuff or anything like that. This is just how I deal with sending out tweets, and keeping track of when I say what. Your time is valuable, and so is the time of your followers. Try not to waste it.
&lt;/p&gt;
</content>
  </entry>
</feed>
