<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2016-02-21T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Workshop for conference proposals</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/proposal-ideas-workshop/"/>
    <id>http://lucybain.com/blog/2016/proposal-ideas-workshop/</id>
    <published>2016-02-21T00:00:00Z</published>
    <updated>2016-02-21T13:04:33+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Last Wednesday I ran a workshop to help people come up with and refine conference talk ideas and then start working on a proposal for it. In preparation for the workshop I wrote a &lt;a href="/blog/2016/conference-proposal-ideas/"&gt;worksheet&lt;/a&gt; to help people come up with proposal ideas. This week I’ll write about the workshop and how you can run one as well.&lt;/p&gt;

&lt;p&gt;This workshop is ideal for beginners to run. All of the hard work is in the preparation, so you can take all the time you need.&lt;/p&gt;

&lt;h2&gt;Preparation&lt;/h2&gt;

&lt;p&gt;You don’t need any special knowledge about conferences to run this workshop. If you happen to have conference proposal experience, all the better! But remember that it’s optional, so go for it!&lt;/p&gt;

&lt;p&gt;If possible, find someone to help you with the workshop. They should be someone who has a lot of experience reviewing conference proposals, ideally they were on a selection committee recently. If you are writing your proposals for a specific conference then reach out to the organisers and let them know you’re going to run this workshop. Ask them if they can recommend anyone form the selection committee last year. When I’ve done this the organisers have always had at least one person to reach out to about helping.&lt;/p&gt;

&lt;p&gt;If you were able to find someone with reviewing experience then ask them to prepare a short (5-10 minute) talk for the workshop. Something like “Would you please give an overview of how the [Conference name here] process works, and how it&amp;#39;s similar and different to other conferences?” For my workshop this person was sick and wasn’t able to make it. The workshop still went smoothly, but I wasn’t able to give the attendees more information about how the selection process works.&lt;/p&gt;

&lt;p&gt;Pick a casual space with chairs that move easily. As you’ll see, most of this workshop is moving around and bouncing ideas off people. It’s important to pick a space that facilitates this. Something like a university lecture hall wouldn’t be a good pick. Instead, choose somewhere that feels relaxed and makes moving around easy. Desks are handy, otherwise remind people to bring a notebook to press on.&lt;/p&gt;

&lt;p&gt;Having a projector is optional, but if there’s one handy I recommend it. I’ve included my &lt;a href="https://www.dropbox.com/s/47z32c7gxjs9vws/cfp-workshop-public.key?dl=0"&gt;presentation&lt;/a&gt; for you to use. There’s nothing particularly useful or mind blowing in it - mostly it’s full of timers to help people stay on track. It’s fine for you to keep track of the time on your laptop, but if you can have it up somewhere it makes it a bit easier on the participants to keep track of the time themselves.&lt;/p&gt;

&lt;p&gt;Ask attendees to bring a filled out copy of the ideas &lt;a href="/blog/2016/conference-proposal-ideas/"&gt;worksheet&lt;/a&gt;. This worksheet is their ticket - no worksheet, no workshop. Most of the workshop is bouncing ideas around and it’s not fair to the other attendees if someone doesn’t bring anything to the table.&lt;/p&gt;

&lt;p&gt;Print out copies of the &lt;a href="https://docs.google.com/document/d/13DfiDw6rpasjq33ckGzqlLBrK59M2m6iQgyrv1IV_VM/edit?usp=sharing"&gt;resources&lt;/a&gt;, &lt;a href="https://docs.google.com/document/d/1BEfA3m4hP08o0-MOpeecJ5SuhU0LBjfFmuB-bErdveo/edit?usp=sharing"&gt;proposal worksheet&lt;/a&gt;, and &lt;a href="https://docs.google.com/document/d/1BI7f7i3vI8vm4J47HoqDpB1OCRDfZPo5cUXMP8yHUgM/edit?usp=sharing"&gt;accountability worksheet&lt;/a&gt; for everyone. It’s also a good idea to have some spare paper for people to write on.&lt;/p&gt;

&lt;h2&gt;The workshop (1.5 - 2 hours)&lt;/h2&gt;

&lt;p&gt;Ok, so you’ve got your space, someone with selection experience, and your attendees all have their worksheets filled out - the hard part is done! Seriously, the actual workshop isn’t very much work on your part.&lt;/p&gt;

&lt;p&gt;Things can get loud during this workshop, so be sure you’ve got a whistle, bell, or something that can make a lot of noise. I used bongo drums - it was awesome!&lt;/p&gt;

&lt;p&gt;The workshop is divided into two parts. The first part is on brainstorming and idea clarification. The second part is for coming up with a rough draft of the proposal. If you found them, your proposal selection expert goes in the middle.&lt;/p&gt;

&lt;h3&gt;Part 1 - speed dating (70 minutes)&lt;/h3&gt;

&lt;p&gt;For this section people will pair up and discus their ideas. It’s important that everyone keeps switching pairs. I like to get people to move around a bit and get their blood flowing, so don’t ask them to pair up with the person next to them, instead pick something random (“find someone with the same first letter of your first name”). It’s silly, which is perfect - it gets people laughing, running around, and, most importantly, makes the whole workshop less serious and stressful.&lt;/p&gt;

&lt;p&gt;Each pairing should discuss the ideas and decide which are the best ones. They should suggest ideas that are similar, places that would be good to give the talk, audiences who would be particularly interested, etc.&lt;/p&gt;

&lt;p&gt;If you have your proposal selection expert include them into this mix as well so they can be paired up with anyone.&lt;/p&gt;

&lt;h4&gt;Pair 1 (15 minutes)&lt;/h4&gt;

&lt;p&gt;The first time people pair up ask them to go through each of the questions on the worksheet one by one. So Person A talks about what ideas they came up with for question 1 then Person B goes through their answer, then they discuss.  Ideally they should end up with around &lt;strong&gt;five&lt;/strong&gt; ideas they want to keep pursing.&lt;/p&gt;

&lt;h4&gt;Pair 2 (12 minutes)&lt;/h4&gt;

&lt;p&gt;Discuss the previous ideas and choose &lt;strong&gt;four&lt;/strong&gt; ideas to move forward with.&lt;/p&gt;

&lt;h4&gt;Pair 3 (9 minutes)&lt;/h4&gt;

&lt;p&gt;Discuss the previous ideas and choose &lt;strong&gt;three&lt;/strong&gt; ideas to move forward with.&lt;/p&gt;

&lt;h4&gt;Pair 4 (6 minutes)&lt;/h4&gt;

&lt;p&gt;Discuss the previous ideas and choose &lt;strong&gt;two&lt;/strong&gt; ideas to move forward with.&lt;/p&gt;

&lt;h4&gt;Pair 5 (3 minutes)&lt;/h4&gt;

&lt;p&gt;Discuss the previous ideas and choose &lt;strong&gt;one&lt;/strong&gt; idea to move forward with.&lt;/p&gt;

&lt;h4&gt;Group 1 (10 minutes)&lt;/h4&gt;

&lt;p&gt;Ask people to get into small groups (4-6 people per group). Have them discuss their final ideas and give feedback.&lt;/p&gt;

&lt;h4&gt;Group 2 (15 minutes)&lt;/h4&gt;

&lt;p&gt;Ask people to get into large groups (about twenty people per group). Go around the room and say what each person&amp;#39;s idea is. It’s amazing to hear what people have come up with!&lt;/p&gt;

&lt;h3&gt;Selection expert (5-15 minutes)&lt;/h3&gt;

&lt;p&gt;At this point ask your proposal selection helper to give their spiel. The move on to a (brief) time for questions, but don’t let it go on too long. Any questions like “what do you think of idea X” are banned - this is a time for big picture questions about the selection &lt;em&gt;process&lt;/em&gt; and nothing else.&lt;/p&gt;

&lt;h3&gt;Part 2 - writing for the proposal (25 minutes)&lt;/h3&gt;

&lt;h4&gt;Read the resources (5 minutes)&lt;/h4&gt;

&lt;p&gt;Ask everyone to read through the &lt;a href="https://docs.google.com/document/d/13DfiDw6rpasjq33ckGzqlLBrK59M2m6iQgyrv1IV_VM/edit?usp=sharing"&gt;resources&lt;/a&gt; on writing proposals.&lt;/p&gt;

&lt;h4&gt;Fill out the proposal worksheet (5 minutes)&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://docs.google.com/document/d/1BEfA3m4hP08o0-MOpeecJ5SuhU0LBjfFmuB-bErdveo/edit?usp=sharing"&gt;proposal worksheet&lt;/a&gt; helps make an idea more concrete and focuses people’s thoughts on actually giving the talk.&lt;/p&gt;

&lt;h4&gt;Bullet point rough draft (10 minutes)&lt;/h4&gt;

&lt;p&gt;It’s time to come up with a rough draft! This can be as messy as they want. Bullet points are fine - just take some time to get something on the page.&lt;/p&gt;

&lt;h4&gt;Talk it through (3 minutes)&lt;/h4&gt;

&lt;p&gt;Ask people to pair up one more time. Have them talk through their proposal ideas and get some initial feedback.&lt;/p&gt;

&lt;h4&gt;Accountability (2 minutes)&lt;/h4&gt;

&lt;p&gt;In that same pair ask people to fill out the &lt;a href="https://docs.google.com/document/d/1BI7f7i3vI8vm4J47HoqDpB1OCRDfZPo5cUXMP8yHUgM/edit?usp=sharing"&gt;accountability worksheet&lt;/a&gt;. It’s very easy to come up with an idea and never submit it - this worksheet is to help people commit and follow through.&lt;/p&gt;

&lt;h2&gt;Done!&lt;/h2&gt;

&lt;p&gt;And that’s it! You’ve done a whole workshop to help people come up with ideas, refine those ideas, and get started on a rough draft of a proposal. Fantastic job :)&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Workshop &lt;a href="https://www.dropbox.com/s/47z32c7gxjs9vws/cfp-workshop-public.key?dl=0"&gt;presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to write a proposal &lt;a href="https://docs.google.com/document/d/13DfiDw6rpasjq33ckGzqlLBrK59M2m6iQgyrv1IV_VM/edit?usp=sharing"&gt;resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1BEfA3m4hP08o0-MOpeecJ5SuhU0LBjfFmuB-bErdveo/edit?usp=sharing"&gt;Proposal worksheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1BI7f7i3vI8vm4J47HoqDpB1OCRDfZPo5cUXMP8yHUgM/edit?usp=sharing"&gt;Accountability worksheet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>How to come up with conference proposal ideas</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/conference-proposal-ideas/"/>
    <id>http://lucybain.com/blog/2016/conference-proposal-ideas/</id>
    <published>2016-02-14T00:00:00Z</published>
    <updated>2016-02-28T22:16:40+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="hide-print"&gt;
    &lt;p&gt;There’s a conference coming up that you'd really like to speak at. The location is good, your boss is happy for you to take the time off, you’re excited to go. But you don’t have anything to say.&lt;/p&gt;

    &lt;p&gt;Been there? Me too. So have a lot of people. You’re not alone, promise! It’s an annoying place to be (especially if all your coworkers have lots of ideas...), but there are some things you can do to get your creative juices flowing.&lt;/p&gt;
&lt;/div&gt;

&lt;div class="worksheet-instructions"&gt;
    &lt;h2&gt;Instructions&lt;/h2&gt;

    &lt;ol&gt;
    &lt;li&gt;
        &lt;strong&gt;Dedicate 30 minutes.&lt;/strong&gt; Start with just 30 minutes and decide how you feel. If you like the process, and think you’ve still got more ideas then keep going until you feel like you’re done. All I’m asking is that you commit to 30 minutes. That’s it. You can find half an hour at some point today or tomorrow. Go put it in your calendar now.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Print this page.&lt;/strong&gt; There’s something about writing on paper rather than a computer that helps my train of thought. &lt;span class="hide-print"&gt;Plus there's some sweet CSS on here to make it print well ;)&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Remove distractions.&lt;/strong&gt; Close your computer, set your phone to silent, and grab a pen or pencil. Computers and phones are really distracting. Any one of those notifications can easily break your flow and make you forget about that idea you just started.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Think about the conference.&lt;/strong&gt; If you are applying to a particular conference consider what topics are relevant and who is likely to attend. Some topics you come up with will be relevant and some won’t. That’s ok! As you go through the worksheet keep coming back to the conference to see if you can come up with any more ideas that are on point. Don’t discount the other ideas though!
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Answer the questions in whatever order you feel like.&lt;/strong&gt; If you get inspired at any point, that’s awesome and should be rewarded. If you don’t feel like answering a particular one, skip it. The questions are there as prompts, and shouldn’t feel prescriptive. If you come up with an idea that doesn’t fit into the prompts write it down in the “Other” section. If you come up with another question prompt please tell me so I can update the worksheet!
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Write without censoring.&lt;/strong&gt; This step is the hardest and most important. Remember, you never have to share any of these ideas with anyone. All you need to do is write them down. (But I hope you choose to share them!) It doesn’t matter if you don’t think it’s good, or if everyone already knows about it, or if it’s boring, just put something down.
    &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Please take these steps seriously. I worked hard to put this worksheet together, now it’s your turn to work hard and fill it up :)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="page-break"&gt;&lt;/div&gt;

&lt;div class="worksheet-questions"&gt;
    &lt;h2&gt;Questions&lt;/h2&gt;

    &lt;ol&gt;
        &lt;li&gt;What’s something you work with fairly regularly and understand 80% of, but not 100%?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;What’s a new technology or technique that you’ve heard of recently, but don’t know much about?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;Do you have a particular workflow that you use and really like?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;What’s an accepted practice that “everyone knows” but that you (or others) haven’t looked into for a while?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;What’s your hobby? What lessons are shared between your hobby and your job?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;div class="page-break"&gt;&lt;/div&gt;
        &lt;li&gt;Think back to a year ago. What would you have wanted to know? What advice would you need?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;What’s a book you read or an experience you had recently that you found particularly interesting, relevant, or profound?&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;What’s a talk you’d want to see at this conference? Perhaps it’s on a technology you’re interested in, or a non-technical topic you’ve wondered or struggled with recently.&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;Is there something that irritates you about your work or process? How could it be solved? Perhaps you’ve solved it already and can share your story, or perhaps you need to do some research first.&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;div class="page-break"&gt;&lt;/div&gt;
        &lt;li&gt;Think of a problem you’ve had in the past month or two.
            &lt;ul&gt;
                &lt;li&gt;If you did solve it, how did you solve it? Were there other ways you could have solved it? Why did you pick the way that you did?&lt;/li&gt;
                &lt;hr&gt;
                &lt;hr&gt;
                &lt;li&gt;If you came across the same problem again, what would you have done differently?&lt;/li&gt;
                &lt;hr&gt;
                &lt;hr&gt;
                &lt;li&gt;If you didn’t solve it, what went wrong? How could others avoid it in the future?&lt;/li&gt;
                &lt;hr&gt;
                &lt;hr&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Are there any talks you would enjoy giving? It can be on any topic and aimed at any audience.&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;li&gt;Other&lt;/li&gt;
        &lt;hr&gt;
        &lt;hr&gt;
        &lt;hr&gt;
    &lt;/ol&gt;
&lt;/div&gt;

&lt;div class="follow-up"&gt;
    &lt;h2&gt;Follow up&lt;/h2&gt;

    &lt;p&gt;Great job! You spent 30 minutes brainstorming possible talk ideas, that’s a massive step forward - high five! (But if you didn’t spend 30 minutes and have instead skimmed this page then no high five for you!)&lt;/p&gt;

    &lt;p&gt;Like I said, that’s everything I asked you to commit to. You’re off the hook. If you have &lt;em&gt;nothing&lt;/em&gt; down on your worksheet then I give you permission to say that you “don’t have anything to say.”&lt;/p&gt;

    &lt;p&gt;But. If you’ve got one thing written down, then you’ve got something to say. Then it’s time to move on to the next phase of proposal writing!&lt;/p&gt;
&lt;/div&gt;

&lt;div class="hide-print"&gt;
  &lt;h2&gt;Thanks&lt;/h2&gt;

  &lt;p&gt;This worksheet came about because of the encouraging words of &lt;a href="https://twitter.com/Sthreo"&gt;Esther Asenjo&lt;/a&gt; - “Oh you have a lot of things to say! It's just you forgot they are interesting.”&lt;/p&gt;

  &lt;p&gt;The questions started from a workshop ran by Rosemary and John Allsopp.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Programming theory: Evaluation strategies</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/programming-theory-evaluation-strategies/"/>
    <id>http://lucybain.com/blog/2015/programming-theory-evaluation-strategies/</id>
    <published>2015-11-25T00:00:00Z</published>
    <updated>2016-01-24T16:46:52+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is a topic I learned at university, but didn’t fully understand all the repercussions of until later. This post is to help you understand the differences and to help me remember them :)&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But wait, what’s an “evaluation strategy”? I’ve never heard of that before!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I hadn’t either until I did some research for this post. The title for this group of concepts isn’t widely used, so knowing “evaluation strategy” probably won’t be super useful. However, the question all evaluation strategies are trying to answer is “how do parameters work in this particular language?” And it is &lt;em&gt;very&lt;/em&gt; useful to know the answer to that question for your language.&lt;/p&gt;

&lt;p&gt;For example, this non-language below (which is purposefully a mismatch of ruby, python, and JS so it doesn’t look real):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;a = 1

function passBySomething(param):
    param = 2
end

passBySomething(a)
log(a) // what happens here?
&lt;/pre&gt;
&lt;p&gt;There are a few options that could happen, which is what today’s post is all about.&lt;/p&gt;

&lt;p&gt;Since I love metaphors and because we haven’t talked about how computer memory works yet (although it might show up soon!) we won’t cover “under the hood” details. Instead we will work with a story:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you look around your apartment you decide you would like some new artwork to spruce the place up a bit. As it so happens you have a nice piece of canvas at home, all ready to go. You also have a friend, Fred, who is an artist and who’s agreed to make you something (that you’ll pay for, of course!).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that in mind we’re ready to go! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Because we’re not going into the details, nor are we looking at a particular language, these explanations might not apply 100% to your language. Please look up additional examples for your language.&lt;/p&gt;

&lt;h2&gt;Pass by reference&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is probably the easiest one to get our heads around, since it’s pretty much what happens in real life.&lt;/p&gt;

&lt;p&gt;Here’s what pass by reference would be in our pretend language:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (this is a blank canvas)

function artistFred(item):
    paint(item) // notice the lack of return keyword
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;Seems straight forward enough, but what if Fred decides to do something different?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your canvas to Fred and &lt;strong&gt;he makes a sculpture instead&lt;/strong&gt;. Then he gives you the sculpture back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, this translates to the following “code”:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // V (new sculpture)
&lt;/pre&gt;
&lt;p&gt;Now you don’t have your original canvas (Fred replaced it entirely), you only have the sculpture Fred gave you.&lt;/p&gt;

&lt;p&gt;Pass by reference is incredibly trusting. You like Fred, and he’s a really good artist. If he says a sculpture would be better for your space you’re cool to go with that. If he paints the whole canvas one colour and tells you it’s art, you’ll believe him and put it up with pride. After all, Fred’s a good guy and you trust him.&lt;/p&gt;

&lt;h3&gt;More formal definition&lt;/h3&gt;

&lt;p&gt;In pass by reference the original variable (declared outside the function’s scope) can be changed in any way by the function. It can be altered or reassigned in the function and the new value will persist after the function has returned.&lt;/p&gt;

&lt;h2&gt;Pass by value&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You go to the store and buy a new piece of canvas that is exactly the same as the one you already own. You give the new canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back, and you can choose to replace your blank canvas with the painted one, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our pretend coding language it would look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    return paint(item) // notice the new return keyword
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newCanvas = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newCanvas) // [*&amp;amp;] (painted canvas)

canvas = artistFred(canvas) // replace blank canvas with the painted one
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;Of course, Fred might decide to do something else entirely. Let’s look at another possibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You go to the store and buy a new piece of canvas that is exactly the same as the one you already own. You give the new canvas to Fred, but he throws away the new canvas and &lt;strong&gt;decides to make a sculpture instead.&lt;/strong&gt; Then he gives you the sculpture back, and you can choose to replace your blank canvas with the sculpture, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, in our fake language would be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
    return item
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newSculpture = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newSculpture) // V (sculpture)

canvas = artistFred(canvas) // replace blank canvas with the sculpture
log(canvas) // V (sculpture)
&lt;/pre&gt;
&lt;p&gt;I think of pass by value as slightly paranoid. Because really, you don’t trust Fred very much. You think he might make an ugly painting and you want to keep your piece of canvas safe in case that happens. Or you know he doesn’t follow directions well and you didn’t want that sculpture anyway...&lt;/p&gt;

&lt;h3&gt;More formal definition&lt;/h3&gt;

&lt;p&gt;In pass by value the original variable (declared outside the function’s scope) is not altered in any way by the function. It must be explicitly overwritten by reassigning it with the results of the function call.&lt;/p&gt;

&lt;h2&gt;Pass by sharing&lt;/h2&gt;

&lt;p&gt;This is a bit of a mix between pass by reference and pass by value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your (only) canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far this is exactly the same as pass by reference.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    paint(item)
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;But again, Fred might decide to do something different:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your (only) canvas to Fred. He sets the untouched canvas aside and &lt;strong&gt;makes a sculpture instead&lt;/strong&gt;. Then he gives you the sculpture back, and you can choose to replace your blank canvas with the sculpture, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
    return item
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newSculpture = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newSculpture) // V (sculpture)

canvas = artistFred(canvas) // replace blank canvas with the painted one
log(canvas) // V (sculpture)
&lt;/pre&gt;
&lt;p&gt;This version is exactly the same as pass by value.&lt;/p&gt;

&lt;p&gt;This is probably the most reasonable level of trust. You asked for a painting and a sculpture just won’t do. You trust Fred enough to paint a blank canvas, but you want your canvas to be usable if he decided to go off an make a sculpture instead. After all, you asked for a painting, not a sculpture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What gives? How can you mix and match like that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It all depends on if the canvas is altered or replaced. If Fred simply alters the canvas by painting it, then the original (blank) canvas is changed forever. However, if Fred wants to replace the canvas, he can’t throw it away, but must create a sculpture as an entirely new thing.&lt;/p&gt;

&lt;h3&gt;More formal definition&lt;/h3&gt;

&lt;p&gt;In pass by sharing the original variable (declared outside the function’s scope) can only be altered in so far as it is mutable. It cannot be reassigned inside the function call. Any changes to a mutable type will persist after the function returns. Any attempts to reassign a variable will not persist.&lt;/p&gt;

&lt;h2&gt;And one more thing...&lt;/h2&gt;

&lt;p&gt;People use the wrong name all. the. time. Officially most languages use pass by sharing. Per &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by languages such as Python, Iota, Java (for object references), Ruby, JavaScript, Scheme, OCaml, AppleScript, and many others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, most people don’t say a particular language is “pass by sharing.” Unfortuantely “pass by reference” and “pass by value” are much more famous phrases than “pass by sharing” (probably because it’s what we’re taught at universities), and so people often use one of those terms even when it’s incorrect.&lt;/p&gt;

&lt;p&gt;This semantic mixing caused me a fair amount of confusion because JS shows some pass by reference qualities:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var obj = {a: 1};

function referenceTest(input) {
    input.a = 2;
}

console.log(obj); // logs {a: 1}
referenceTest(obj);
console.log(obj); // logs {a: 2}
&lt;/pre&gt;
&lt;p&gt;and some pass by value qualities:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var num = 1;

function valueTest(input) {
    input = 1;
}

console.log(num); // logs 1
valueTest(num);
console.log(num); // logs 1
&lt;/pre&gt;
&lt;p&gt;It took me a long time to realise that JS was pass by reference &lt;em&gt;sometimes&lt;/em&gt; and pass by value &lt;em&gt;other times&lt;/em&gt;. And I only learned today that this mix of of the two, which many common languages use, is called pass by sharing.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Examples and explanation for &lt;a href="https://www.jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Destructuring assignment with ES6</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-destructuring-assignment-es6/"/>
    <id>http://lucybain.com/blog/2015/js-destructuring-assignment-es6/</id>
    <published>2015-11-13T00:00:00Z</published>
    <updated>2016-01-24T16:29:10+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In my last post we talked about &lt;a href="/blog/2015/enhanced-obj-literals/"&gt;enhanced object literals&lt;/a&gt; with ES6. This time around we’ll cover destructuring assignment, another bit of sugary syntax that’s available in ES6. Again, we’ll build up increasingly complicated examples.&lt;/p&gt;

&lt;h2&gt;Vanilla JS&lt;/h2&gt;

&lt;p&gt;Since this is syntatic sugar, it’s possible to do everything with vanilla JS. We’re not introducing anything new here, just making existing things easier to do.&lt;/p&gt;

&lt;p&gt;In vanilla JS we can assign array values to variables like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a, b, c;
var arr = [1, 2, 3];

a = arr[0];
b = arr[1];
c = arr[2];

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;There’s nothing wrong with this, but it’s cumbersome and not quite as nice as...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3];

[a, b, c] = arr;

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;Here you can see that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; were assigned based on the content of &lt;code&gt;arr&lt;/code&gt;. It’s even easier to read when it’s written like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;[a, b, c] = [1, 2, 3];
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;That’s great, but what’s the &lt;strong&gt;real&lt;/strong&gt; code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You caught me, we can’t run the sugary code above directly in browsers yet. Since we need to put the code through a compiler it’s a good idea to see what actually gets run in the browser.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;amp;&amp;amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;amp;&amp;amp; _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var a = undefined,
    b = undefined,
    c = undefined;
var arr = [1, 2, 3];

var _arr = arr;

var _arr2 = _slicedToArray(_arr, 3);

a = _arr2[0];
b = _arr2[1];
c = _arr2[2];
_arr;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Hmmm, not super readable... what’s with the &lt;code&gt;_slicedToArray&lt;/code&gt; function?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, it turns out you can do more complicated things with destructuring assignment, let’s look at some of those to better understand the compiled code. But keep in mind the line &lt;code&gt;_slicedToArray(_arr, 3);&lt;/code&gt; - the &lt;code&gt;3&lt;/code&gt; in particular will be important!&lt;/p&gt;

&lt;h2&gt;Ignore the ends of an array&lt;/h2&gt;

&lt;p&gt;It’s also possible to ignore the last items of an array:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5];

[a, b, c] = arr;

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;Here we didn’t care what the fourth or fifth items in the array were, only the first three items were of interest. With the longer array the compiled code now looks like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;amp;&amp;amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;amp;&amp;amp; _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var a = undefined,
    b = undefined,
    c = undefined;
var arr = [1, 2, 3, 4, 5];

var _arr = arr;

var _arr2 = _slicedToArray(_arr, 3);

a = _arr2[0];
b = _arr2[1];
c = _arr2[2];
_arr;
&lt;/pre&gt;
&lt;p&gt;Again, the line of interest is &lt;code&gt;_slicedToArray(_arr, 3);&lt;/code&gt; and again the number of interest is &lt;code&gt;3&lt;/code&gt;. Notice that although the array now contains five items the compiled JS knows we&amp;#39;re only interested in the first three for assignment. That’s why the second parameter to &lt;code&gt;_slicedToArray&lt;/code&gt; is still &lt;code&gt;3&lt;/code&gt; rather than five.&lt;/p&gt;

&lt;h2&gt;Ignore particular items&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OK, so far we can assign all the items in an array and just the first &lt;strong&gt;n&lt;/strong&gt;. What else can this do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at assigning only certain items.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5];

[a,,b,,c] = arr;

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs 5
&lt;/pre&gt;
&lt;p&gt;Here we ignored items &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; from the array, but assigned the other elements. Again, nothing we couldn’t do with vanilla JS:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a, b, c;
var arr = [1, 2, 3, 4, 5, 6];

a = arr[0];
b = arr[2];
c = arr[4];

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs 5
&lt;/pre&gt;
&lt;p&gt;But the ES6 way is a little bit shorter (and sweeter!).&lt;/p&gt;

&lt;h2&gt;Assign “the rest”&lt;/h2&gt;

&lt;p&gt;A handy feature of ES6 is &lt;code&gt;...&lt;/code&gt; which says “everything else.” We can use this for destructing assignment as well:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3];

[a,...b] = arr;

console.log(a); // logs 1
console.log(b); // logs [2, 3]
&lt;/pre&gt;
&lt;p&gt;And of course you can use it along with the other features:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5, 6];

[a,,b,...c] = arr;

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs [4, 5, 6]
&lt;/pre&gt;
&lt;h2&gt;With objects&lt;/h2&gt;

&lt;p&gt;I’ve seen this feature used more with arrays than objects, but it is possible to use destructuring assignment with objects as well. Let’s take a look:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {cat, dog, mouse} = obj;
console.log(a); // logs 'meow'
console.log(b); // logs 'woof'
console.log(c); // logs 'squeak'
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Weird, I tried a version in the REPL and it didn’t work...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I found the syntax for objects much less intuitive and picky than expected. Here are a couple of examples that &lt;strong&gt;don’t&lt;/strong&gt; work.&lt;/p&gt;

&lt;h3&gt;Need the key names&lt;/h3&gt;

&lt;p&gt;This doesn&amp;#39;t work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {a, b, c} = obj;
&lt;/pre&gt;
&lt;p&gt;This doesn’t work because object keys aren’t ordered. There’s no way for JS to know that you want &lt;code&gt;cat&lt;/code&gt; to be first because there is no concept of “first” for objects.&lt;/p&gt;

&lt;p&gt;This does work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {cat: a, dog: b, mouse: c} = obj;
&lt;/pre&gt;
&lt;h3&gt;Special syntax for pre-declare variables&lt;/h3&gt;

&lt;p&gt;This doesn’t work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c
let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

{cat: a, dog: b, mouse: c} = obj;
&lt;/pre&gt;
&lt;p&gt;I was particularly confused about this. So I asked a &lt;a href="http://stackoverflow.com/questions/34836126/can-i-pre-declare-variables-for-destructuring-assignment-of-objects"&gt;question&lt;/a&gt; about it and got an answer in no time (thank you Stackoverflow!).&lt;/p&gt;

&lt;p&gt;Since there’s no keyword before the first &lt;code&gt;{&lt;/code&gt; in the line &lt;code&gt;{cat: a, dog: b, mouse: c} = obj;&lt;/code&gt; the &lt;code&gt;{&lt;/code&gt; is interpreted as opening a new block, rather than being part of an assignment operation. To overcome this we need to tell JS to interpret the &lt;code&gt;{&lt;/code&gt; as part of the assignment by giving more syntax. This does work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c
let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

({cat: a, dog: b, mouse: c} = obj);
&lt;/pre&gt;
&lt;h2&gt;Usage: Function returns&lt;/h2&gt;

&lt;p&gt;A really cool use for this feature is to easily process multiple results returned from a function. (Python typically uses tuples for this.)&lt;/p&gt;

&lt;p&gt;For example, a function can return multiple values:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function counting() {
    return [1, 2, 3];
}
&lt;/pre&gt;
&lt;p&gt;And when it get’s called the return values can be quickly assigned:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;[a, b, c] = counting();

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Well that’s pretty handy!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;bunch&lt;/em&gt; of &lt;a href="https://gist.github.com/mikaelbr/9900818"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A more &lt;a href="http://fitzgeraldnick.com/weblog/50/"&gt;in depth&lt;/a&gt; discussion&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Enhanced object literals</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/enhanced-obj-literals/"/>
    <id>http://lucybain.com/blog/2015/enhanced-obj-literals/</id>
    <published>2015-11-01T00:00:00Z</published>
    <updated>2016-01-10T14:13:09+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here’s some nice &lt;a href="/blog/tags/es6/"&gt;ES6&lt;/a&gt; syntactic sugar for creating object literals. I found it hard to read at first and needed a few examples before I could understand what was happening. It’s got a few uses, so we’ll build up more and more complicated examples to see what it can do.&lt;/p&gt;

&lt;h2&gt;Ordinary object literals&lt;/h2&gt;

&lt;p&gt;In vanilla JS we create object literals like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a = 1,
    b = 2,
    c = 3;

var obj = {
    a : a,
    b : b,
    c : c
};

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What’s wrong with this way?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This works, but is quite repetitive and fairly heavy. You have to give the name of the key, even though it’s the same as the name of the variable.&lt;/p&gt;

&lt;p&gt;Let’s rewrite it with ES6 object literals:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a = 1,
    b = 2,
    c = 3;

let obj = { a, b, c };

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Gah! What’s happening here??&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is how I felt when I first read the &lt;code&gt;let obj = { a, b, c };&lt;/code&gt; line as well. Especially because &lt;code&gt;{}&lt;/code&gt; is a pretty common way to create hashes (Ruby) or dictionaries (Python). This syntax just felt wrong. But it is certainly more concise so we’re just gonna need to get past the weirdness.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeah, but what’s the code &lt;strong&gt;really&lt;/strong&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To ease concerns... If you put the above ES6 code into the &lt;a href="https://babeljs.io/repl/"&gt;Babel REPL&lt;/a&gt; it will produce the following vanilla JS code:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var a = 1,
    b = 2,
    c = 3;

var obj = { a: a, b: b, c: c };

console.log(obj);
&lt;/pre&gt;
&lt;p&gt;No funny business here - promise!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;#39;m not convinced - what’s an example of this being useful?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What happens if you change the name of a variable to be something more meaningful, but forget to change the object key? In vanilla JS we have something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var firstPlace = 1,
    secondPlace = 2,
    thirdPlace = 3;

var obj = {
    a : firstPlace,
    b : secondPlace,
    c : thirdPlace
};

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
console.log(obj.thirdPlace); // undefined
&lt;/pre&gt;
&lt;p&gt;We had all the best intentions of using better names, but they didn’t come through after you created the object. (I’m sure you’re a perfect dev who would never do something like this. But I have, and it was super annoying to debug.)&lt;/p&gt;

&lt;p&gt;Here’s the same example with ES6 helping us out:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let firstPlace = 1,
    secondPlace = 2,
    thirdPlace = 3;

let obj = { firstPlace, secondPlace, thirdPlace };

console.log(obj); // logs { "firstPlace" : 1, "secondPlace" : 2, "thirdPlace" : 3 }
console.log(obj.thirdPlace); // logs 3
&lt;/pre&gt;
&lt;p&gt;You can see that it’s a bit easier to keep track of everything with the enhanced object literals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so that was the most basic one. Give me something more interesting!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing!&lt;/p&gt;

&lt;h2&gt;Dynamic keys&lt;/h2&gt;

&lt;p&gt;The new syntax also allows dynamic keys to be created more easily. Here’s an example of the ES6 version:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a = 1,
    b = 2,
    c = 3;

let obj = {



}

console.log(obj); // logs { "2" : 1, "3" : 2, "4" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But you can have dynamic keys in vanilla JS!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;True, we could use [] notation to remove this problem:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var numbers = [1, 2, 3];
var obj = {};

for (var i = 0; i &amp;lt; numbers.length; i++) {
    obj[numbers[i] + 1] = numbers[i];
}

console.log(obj); // logs { "2" : 1, "3" : 2, "4" : 3 }
&lt;/pre&gt;
&lt;p&gt;Now the keys and values can be dynamic, but look at that code! The new way is certainly easier to read and write.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeah, it’s looking pretty nice, let’s do another one!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Methods&lt;/h2&gt;

&lt;p&gt;It’s easy enough to put methods on objects in vanilla JS:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var obj = {
    hello: function(name) {
        console.log('hello ' + name);
    }
}
obj.hello('world'); // logs "hello world"
&lt;/pre&gt;
&lt;p&gt;But with enhanced object literals we can get rid of some of the boiler plate code to tighten things up a bit:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {
  hello(name) {
    console.log('hello ' + name);
  }
};
obj.hello('world'); // logs "hello world"
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;That’s crazy! Where’s the function keyword?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s not needed any more! ES6 knows &lt;code&gt;hello&lt;/code&gt; is a function because of the &lt;code&gt;()&lt;/code&gt; and the method gets created automatically.&lt;/p&gt;

&lt;h2&gt;Review&lt;/h2&gt;

&lt;p&gt;So there you have it! ES6’s enhanced object literals can make object creating easier by adding syntactic sugar. Remember, this doesn’t change how objects work in general. All of these examples can also be written in vanilla JS, so it does’t add new functionality. But it does make writing JS that much easier!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maximilianhoffmann.com/posts/object-based-javascript-in-es6"&gt;Maximilian Hoffmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Overview of all &lt;a href="https://github.com/lukehoban/es6features#enhanced-object-literals"&gt;ES6 features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>CSS: Flexbox in action - Bitbucket Server pull request header</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-flexbox-in-action/"/>
    <id>http://lucybain.com/blog/2015/css-flexbox-in-action/</id>
    <published>2015-10-20T00:00:00Z</published>
    <updated>2016-01-24T16:46:34+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I &lt;a href="/blog/2015/css-flexbox/"&gt;recently wrote&lt;/a&gt; about using the &lt;code&gt;flex-box&lt;/code&gt; rule in CSS. That was a practice round because I knew I needed to use flexbox at work in the future. Well, the time has come!&lt;/p&gt;

&lt;p&gt;As you might know, I work for Atlassian on the &lt;a href="https://www.atlassian.com/software/bitbucket/download"&gt;Bitbucket Server&lt;/a&gt; product. Today I spent some time implementing flexbox on our pull request page, specifically in the header. Let’s take a look at what it’s currently like:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/current.png" /&gt;&lt;/p&gt;

&lt;p&gt;Adding flexbox is part of a much larger chunk of work, so my “finished product” looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/rough-draft.png" /&gt;&lt;/p&gt;

&lt;p&gt;Obviously it’s got a ways to go, but this little bit is done! The main point is that we utilise all of the space available to us. Previously we were’t able to expand a branch name fully even though there was enough space for it.&lt;/p&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;I was fortunate enough to be able to throw away all existing HTML and CSS. Nothing else relies on this piece of code and I had full control of how to implement this part of the feature (with lots of feedback from my fantastic colleagues!). So we don’t need to talk about what &lt;em&gt;was&lt;/em&gt; there, we’re starting from scratch.&lt;/p&gt;

&lt;h3&gt;Desired outcome&lt;/h3&gt;

&lt;p&gt;The pull request header (known as PRH from now on) has X main sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;author (avatar and name)&lt;/li&gt;
&lt;li&gt;branch details (source, destination and an arrow between them)&lt;/li&gt;
&lt;li&gt;PR status&lt;/li&gt;
&lt;li&gt;reviewers (avatars only)&lt;/li&gt;
&lt;li&gt;approve button&lt;/li&gt;
&lt;li&gt;indication of merge issues&lt;/li&gt;
&lt;li&gt;merge button&lt;/li&gt;
&lt;li&gt;menu for other options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately only the author and branches should be “flexible.” Everything else should always be completely visible. After a little thought and discussion we decided that the branches should be more flexible than the author (i.e. branches should shrink faster than the author).&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;Ok, so now we understand the problem, let’s start coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: to keep the CSS easy to read, the demo pages only work in Chrome.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Getting started&lt;/h3&gt;

&lt;p&gt;When I first got into it I figured I’d just work with everything all together. I already had the HTML set up from another bit of work, so I’d &lt;em&gt;just&lt;/em&gt; add the CSS. This wasn’t successful. There were too many moving parts and I didn’t have a good enough understanding of how flexbox worked to hold all the parts in my head.&lt;/p&gt;

&lt;p&gt;I followed the (very good) advice I give to people new to programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s easier to get a small thing right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than think about the whole thing at once I focused on just the branch details section.&lt;/p&gt;

&lt;h3&gt;Branch details&lt;/h3&gt;

&lt;p&gt;The branch details looks like this:&lt;/p&gt;

&lt;p&gt;your-awesome-branch --&amp;gt; the-destination-branch&lt;/p&gt;

&lt;p&gt;So I set up my HTML like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="branch-details"&amp;gt;
    &amp;lt;div class="source"&amp;gt;
        your-awesome-branch
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="arrow"&amp;gt;
        --&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="destination"&amp;gt;
        the-destination-branch
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;(Obviously we use a better arrow really, but we’ll ignore that for this post.)&lt;/p&gt;

&lt;p&gt;Alright, now we’re getting somewhere!&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; ultimately need to be shrinkable. In order to allow them to shrink we need to make their container, &lt;code&gt;branch-details&lt;/code&gt;, flexible.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.branch-details {
    display: flex;
}
&lt;/pre&gt;
&lt;p&gt;At this point everything is flexible. So if you &lt;a href="/blog/2015/pr-header/simple-flexbox"&gt;play with it&lt;/a&gt; you can see everything shrinks equally and the branch names wrap across lines. This wrapping makes sense for “normal” uses of flexbox (i.e. columns of text) but it isn’t what we want for the branch names.&lt;/p&gt;

&lt;p&gt;We can stop words from wrapping with a quick &lt;code&gt;white-space: nowrap&lt;/code&gt; rule. &lt;a href="/blog/2015/pr-header/no-wrap"&gt;This works&lt;/a&gt; in that the words don’t wrap, but it has the unfortunate side effect of stopping things from shrinking. Let‘s put that back by hiding overflowing text: &lt;code&gt;overflow: hidden;&lt;/code&gt;. While we’re at it, we can style the ending with an ellipsis using &lt;code&gt;text-overflow: ellipsis;&lt;/code&gt;. Ok, we’re &lt;a href="/blog/2015/pr-header/ellipsis"&gt;back in business&lt;/a&gt; now!&lt;/p&gt;

&lt;p&gt;And that’s it for the branch details! The source and destination branches shrink equally while the arrow remains full width.&lt;/p&gt;

&lt;h3&gt;Add the author&lt;/h3&gt;

&lt;p&gt;The other element that can shrink is the author. From the designs the author, branch details and PR status are all to the left, so I’ll group these all together in my HTML. We’ll add this next layer of wrapping to make sure the author can shrink, the PR status cannot shrink, and the branches continue to shrink as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/2015/pr-header/author-branches-status"&gt;New HTML:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-info"&amp;gt;
    &amp;lt;div class="author"&amp;gt;
        Author name
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="branch-details"&amp;gt;
        &amp;lt;div class="source"&amp;gt;
            your-awesome-branch
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="arrow"&amp;gt;
            --&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="destination"&amp;gt;
            the-destination-branch
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="status"&amp;gt;
        PR status
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Again, the author name needs to be flexible, so we’ll apply most of the same styles we did for the branch details to the &lt;code&gt;pr-info&lt;/code&gt; section.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}
&lt;/pre&gt;
&lt;p&gt;So we’re left with quite a good &lt;a href="http://localhost:4567/blog/2015/pr-header/author-branches-status-basic-flexible"&gt;base&lt;/a&gt; of what we want. However, you’ll notice that if you start to shrink the screen too much the author gets complete hidden. We need a better way to keep the author at least somewhat visible, and actually we want to shrink the author slower than the branches (something like: for every 5px the branches shrink the author only shrinks 1px).&lt;/p&gt;

&lt;p&gt;Well, keeping the author always somewhat visible is easy enough: we can just chuck a &lt;code&gt;min-width: 5em&lt;/code&gt; on there so we don&amp;#39;t accidentally hide the author completely. But now the branch details section doesn’t flex at all. WHY NOT??? Since the branches can flex down to nothing we’ll give the branch details a &lt;code&gt;min-width: 0&lt;/code&gt;. (In real life the PRH has the same min-width as the page and won’t be able to shrink down to completely hide the branch details. For this post I’m not going to worry about the page shrinking too small.)&lt;/p&gt;

&lt;p&gt;Ok, now we have both the author and the branch details shrinking, time to make that happen at different rates. Flexbox items have a &lt;code&gt;flex-grow&lt;/code&gt; property which says how fast the items should grow; there’s also a &lt;code&gt;flex-shrink&lt;/code&gt; property that, surprise, surprise, deals with how fast items should shrink. So we’ll make the branches shrink faster than the author by adding:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.author {
    flex-shrink: 1;
}

.branch-details {
    flex-shrink: 5;
}
&lt;/pre&gt;
&lt;p&gt;The rates are fairly arbitrary, but easily changed if needed.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href="/blog/2015/pr-header/author-branches-status-flexible"&gt;working version&lt;/a&gt; for you to play with.&lt;/p&gt;

&lt;h3&gt;Put it in context&lt;/h3&gt;

&lt;p&gt;Finally we can add the rest of the PRH code in. As a reminder, that’s the: 
reviewers, approve button, indication of merge issues, merge button, and menu for other options. Thankfully all of these will be full width (no shrinking) and most will be a consistent size.&lt;/p&gt;

&lt;p&gt;New HTML:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-header"&amp;gt;
    &amp;lt;div class="pr-info"&amp;gt;
        &amp;lt;div class="author"&amp;gt;
            Author name that’s really long, like super duper long
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="branch-details"&amp;gt;
            &amp;lt;div class="source"&amp;gt;
                your-awesome-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="arrow"&amp;gt;
                --&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="destination"&amp;gt;
                the-destination-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="status"&amp;gt;
            PR status
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="pr-actions"&amp;gt;
        &amp;lt;div&amp;gt;reviewers&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;approve button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge issues&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;menu&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Since we know we want the header to be flexible I’ll go ahead and add the basics in. Right now the &lt;code&gt;div&lt;/code&gt;s in the &lt;code&gt;.pr-actions&lt;/code&gt; are all displayed as block elements, so let’s line them up nicely. Here are the changes:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-header, .pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.pr-info, .author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}

.pr-actions div {
    display: inline-block;
}
&lt;/pre&gt;
&lt;p&gt;And &lt;a href="/blog/2015/pr-header/in-context"&gt;that’s it!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Safari&lt;/h3&gt;

&lt;p&gt;Except for Safari. Once I had the proper vendor prefixing in, everything worked as expected in all browsers (even IE!) but not Safari. This &lt;a href="LINK%20HERE"&gt;bug&lt;/a&gt; might be the culprit, but I’m really not sure. If you have any knowledge about what’s causing this, I’m interested! Anyways, for whatever reason you need to add &lt;code&gt;flex-shrink: 0&lt;/code&gt; to the things you don’t want to shrink. So for this we’ll add:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.arrow, .status, .pr-actions {
    flex-shrink: 0;
}
&lt;/pre&gt;
&lt;p&gt;And with that it’s &lt;a href="/blog/2015/pr-header/in-context-safari"&gt;Safari compliant!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Done&lt;/h2&gt;
</content>
  </entry>
</feed>
