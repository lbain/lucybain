<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-09-28T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Bower link</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-bower-link/"/>
    <id>http://lucybain.com/blog/2015/js-bower-link/</id>
    <published>2015-09-28T00:00:00Z</published>
    <updated>2015-10-01T20:58:30+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;At work today I used &lt;code&gt;bower link&lt;/code&gt; and wanted to know more about how it works. I&amp;#39;m not going to talk about why you should use Bower, how to use it generally, or really anything useful for most people. I&amp;#39;m only going to talk about the &lt;code&gt;bower link&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;Linking with Bower creates symlinks. It makes a connection between two places on your computer so you can keep a clean file structure but still have all the code where you need it. It also means if you need the code in more than one place you only need one “master” copy and it can appear elsewhere as well.&lt;/p&gt;

&lt;h2&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;First, let’s lay out an example. You’re working on a project and need to write some new functionality. Typically you’d just make a new directory and include your feature’s code in there, but for this example you want the code to be stand alone (perhaps you’ll use it in another project, or perhaps you’ll publish it for others to use). So you decide to write a package for Bower to manage.&lt;/p&gt;

&lt;p&gt;Here’s the setup so far:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
&lt;/pre&gt;
&lt;h3&gt;Make your package a Bower package&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower init
&lt;/pre&gt;
&lt;p&gt;I just went ahead and accepted all the defaults, but if it was a real package you’d probably want to think about them. Again, this isn’t a post about all of Bower, so I’ll skip over any details on the &lt;code&gt;bower init&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now your package looks like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;new_package/
  node_modules/ &amp;lt;-- New!
  bower.json &amp;lt;-- New!
&lt;/pre&gt;
&lt;h3&gt;Tell Bower about your package&lt;/h3&gt;

&lt;p&gt;Next we need to tell Bower about the &lt;code&gt;new_package&lt;/code&gt; directory. This command won’t change the &lt;code&gt;new_package&lt;/code&gt; directory at all.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower link
&lt;/pre&gt;
&lt;p&gt;For Mac computers, the output of that will be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;bower link /Users/lbain/.local/share/bower/links/new_package &amp;gt; /Users/lbain/code/new_package
&lt;/pre&gt;
&lt;p&gt;(Obviously the &lt;code&gt;lbain&lt;/code&gt; will be different in your case.)&lt;/p&gt;

&lt;p&gt;Ok, let’s take a quick peak under the hood and look into &lt;code&gt;/Users/lbain/.local/share/bower/links&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd /Users/lbain/.local/share/bower/links
&lt;/pre&gt;
&lt;p&gt;From here you can see all the links you’ve created (probably just the one &lt;code&gt;new_package&lt;/code&gt; link).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd new_package
&lt;/pre&gt;
&lt;p&gt;And now you should see the &lt;code&gt;node_modules&lt;/code&gt; directory and the &lt;code&gt;bower.json&lt;/code&gt; right there. So you can see using &lt;code&gt;bower link&lt;/code&gt; creates a connection (some might even go so far as to say “link”) between the original and the bower-controlled code.&lt;/p&gt;

&lt;p&gt;Ok, we’re halfway there! &lt;/p&gt;

&lt;h3&gt;Tell your project about your package&lt;/h3&gt;

&lt;p&gt;Now we can go back to your project and get to include your package.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/my_awesome_project
&lt;/pre&gt;
&lt;p&gt;From here we run the &lt;code&gt;bower link&lt;/code&gt; command, but with a parameter of the package name.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link new_package
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The fact that you’re just giving the name of the directory you want to link is pretty much the only really clear advantage of using &lt;code&gt;bower link&lt;/code&gt; over a traditional symlink. Yes, you get all of the associated Bower-goodness, but for this example (where we’re not looking at the Bower-goodness) the name is about the only interesting thing.&lt;/p&gt;

&lt;p&gt;The output of that is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link /Users/lbain/code/my_awesome_project/bower_components/new_package &amp;gt; /Users/lbain/.local/share/bower/links/new_package
&lt;/pre&gt;
&lt;p&gt;The content of &lt;code&gt;/Users/lbain/.local/share/bower/links/&lt;/code&gt; hasn’t changed. Rather, that directory keeps a list of all linkable packages, not the packages that have been linked.&lt;/p&gt;

&lt;p&gt;Now your directories should look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    bower_components/ &amp;lt;-- New!
      new_package/ &amp;lt;-- New!
        node_modules/ &amp;lt;-- New!
        bower.json &amp;lt;-- New!
    node_modules/ &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
&lt;/pre&gt;
&lt;p&gt;So, as you can see, you&amp;#39;ve got all of &lt;code&gt;new_package&lt;/code&gt;’s content in &lt;code&gt;my_awesome_project/bower_components&lt;/code&gt;. Any other Bower packages you link would also go to the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;Prove it!&lt;/h3&gt;

&lt;p&gt;Alright, let’s give it a quick test. Make a new file in &lt;code&gt;new_package&lt;/code&gt; and save it. It should also be in &lt;code&gt;my_awesome_project&lt;/code&gt;!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    new_package/
      node_modules/
      bower.json
      test.txt &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
    test.txt &amp;lt;-- New!
&lt;/pre&gt;
&lt;p&gt;You can also add files the other way. Make a new file in &lt;code&gt;my_awesome_project&lt;/code&gt; and save it. It should also be in &lt;code&gt;new_package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can develop as though your code was inline, but actually keep it as a stand alone package.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Again, this is a 100% normal symlink. The code used to make the link can be found on &lt;a href="https://github.com/bower/bower/blob/master/lib/util/createLink.js"&gt;Bower’s GitHub&lt;/a&gt; and doesn’t do anything fancy. If you go around moving &lt;code&gt;new_package&lt;/code&gt; the symlinks will break!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.tutsplus.com/tutorials/meet-bower-a-package-manager-for-the-web--net-27774"&gt;Intro to Bower&lt;/a&gt; - I really liked the style of this one, it’s quite chatty, just like me!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bower/bower/"&gt;Bower’s code&lt;/a&gt; if you want to look under the hood&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Intro to Programming: Booleans</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/intro-to-programming-booleans/"/>
    <id>http://lucybain.com/blog/2015/intro-to-programming-booleans/</id>
    <published>2015-06-01T00:00:00Z</published>
    <updated>2015-10-07T21:25:19+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explaination&lt;/h2&gt;

&lt;p&gt;As you’ve probably heard, computers think in 1s and 0s. There is no middle ground, there’s no 0.5, no 1.1, no 1 and 0 at the same time. 1 or 0, that’s all they’ve got. It turns out, 1s and 0s are pretty powerful.&lt;/p&gt;

&lt;p&gt;Humans have the same concepts as 1s and 0s, we just call them different things - &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. For the sake of this post (and all the computers in the world) we will assume something is either entirely &lt;code&gt;True&lt;/code&gt;, or entirely &lt;code&gt;False&lt;/code&gt;. There is no middle ground, no maybe, no white lies. Something is either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Something which is either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; is known as a Boolean, after George Boole.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The sky is blue” is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For me, “I am female” is also &lt;code&gt;True&lt;/code&gt;, while “I am very tall” is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In general, computers have no notion of time. There is only the now, no past, no future. A computer doesn’t know what it will be doing in a few minutes (that depends on what you tell it to do, and on what it’s doing now), and it isn’t interested in what it was doing an hour ago. So when computers decide if something is &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, they have to decide &lt;em&gt;at that moment&lt;/em&gt; is the thing &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;“I am very tall” is &lt;code&gt;False&lt;/code&gt; right now. It’s possible (though unlikely) I’ll have a giant growth spurt and be very tall in the future. That doesn’t matter, we are not interested in what &lt;em&gt;will&lt;/em&gt; happen, only that I am not very tall &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;“Caramel is my favorite ice cream flavor” is presently &lt;code&gt;True&lt;/code&gt;. But it might change tomorrow when I try the best chocolate ice cream in the world. Certainly it has changed from my childhood favorite (Rainbow Sherbet). Again, we only focus on my current favorite flavor.&lt;/p&gt;

&lt;h2&gt;Exercises&lt;/h2&gt;

&lt;p&gt;Ok, now it’s your turn. Decide if each of these statements is &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; for you at the current moment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is sunny outside.&lt;/li&gt;
&lt;li&gt;I am over 5ft tall.&lt;/li&gt;
&lt;li&gt;I am female.&lt;/li&gt;
&lt;li&gt;Chocolate is my favorite ice cream flavor.&lt;/li&gt;
&lt;li&gt;There are five continents.&lt;/li&gt;
&lt;li&gt;The Egyptians built the pyramids.&lt;/li&gt;
&lt;li&gt;I have eaten dinner.&lt;/li&gt;
&lt;li&gt;The light is on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think about your every day life, and come up with at least five more examples of when things are &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;iframe id="hidden_iframe" name="hidden_iframe" style="display:none;"&gt;
&lt;/iframe&gt;

&lt;form action="https://docs.google.com/forms/d/1u4xIbGktEd3RzHQHfJcSRwuqUklokVcmeNBTrVbH6oI/formResponse" method="POST" id="ss-form" onsubmit="hideQuestions();" target="hidden_iframe" class="programming-examples"&gt;
  &lt;div class="example-questions"&gt;
    &lt;input type="hidden" name="entry.1043295642" value="Boolean" id="group_1043295642_1" role="radio" class="ss-q-radio valid" aria-label="Boolean"&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;textarea name="entry.1571729994" rows="8" cols="0" class="ss-q-long" id="entry_1571729994" dir="auto" aria-label="Example 1  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.332234193" rows="8" cols="0" class="ss-q-long" id="entry_332234193" dir="auto" aria-label="Example 2  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.796117189" rows="8" cols="0" class="ss-q-long" id="entry_796117189" dir="auto" aria-label="Example 3  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.1635444679" rows="8" cols="0" class="ss-q-long" id="entry_1635444679" dir="auto" aria-label="Example 4  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;textarea name="entry.341236292" rows="8" cols="0" class="ss-q-long" id="entry_341236292" dir="auto" aria-label="Example 5  "&gt;&lt;/textarea&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;input type="submit" name="submit" value="Submit" id="ss-submit" class="jfk-button jfk-button-action "&gt;
  &lt;/div&gt;
  &lt;div class="thank-you"&gt;
    Thanks for submitting your examples!
  &lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
function hideQuestions() {
  document.getElementsByClassName('example-questions')[0].className+=' inactive';
  document.getElementsByClassName('thank-you')[0].className+=' active';
}
&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>CSS: Flexbox</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-flexbox/"/>
    <id>http://lucybain.com/blog/2015/css-flexbox/</id>
    <published>2015-05-18T00:00:00Z</published>
    <updated>2015-10-07T20:10:55+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I recently learned about flex-box and have been doing some research into it. Hopefully I&amp;#39;ll write up a “All about flexbox” post, but for now I want to go through a hands on example of using flexbox in the wild.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are we working on?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I want to convert the menu of this site to use flexbox.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does it look like now?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Right now I support three cases:&lt;/p&gt;

&lt;p&gt;Large (desktop)&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image menu on desktop" src="/images/blog/css-flexbox/current-menu-large.png" /&gt;&lt;/p&gt;

&lt;p&gt;Medium (tablet) - this looks almost the same but the fonts are slightly smaller.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image menu on tablet" src="/images/blog/css-flexbox/current-menu-medium.png" /&gt;&lt;/p&gt;

&lt;p&gt;Small (phone)&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image menu on phone" src="/images/blog/css-flexbox/current-menu-small.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Ok, let’s make it &lt;em&gt;flexible&lt;/em&gt;.&lt;/h2&gt;

&lt;h3&gt;Step 1: remove most of the styling&lt;/h3&gt;

&lt;p&gt;I went through and removed most of the styling. I kept some things I knew I wanted, but most of it went.&lt;/p&gt;

&lt;p&gt;&lt;img alt="remove styling" src="/images/blog/css-flexbox/remove-styling.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Step 2: add flexbox&lt;/h3&gt;

&lt;p&gt;I added &lt;code&gt;display: flex&lt;/code&gt; to the containing element. It kinda worked, but looked funny becuase I’d removed the rest of the styling.&lt;/p&gt;

&lt;p&gt;&lt;img alt="inital flexbox" src="/images/blog/css-flexbox/inital-flexbox.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Step 3: layout within the flexbox&lt;/h3&gt;

&lt;p&gt;Next I added how I wanted the content to flex within the flexbox by adding &lt;code&gt;justify-content: flex-end&lt;/code&gt;. This meant all the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s got squished to the right.&lt;/p&gt;

&lt;p&gt;&lt;img alt="now with flex-end" src="/images/blog/css-flexbox/flex-end.png" /&gt;&lt;/p&gt;

&lt;p&gt;I played around with a few options for &lt;code&gt;justify-content&lt;/code&gt;, particularly &lt;code&gt;space-between&lt;/code&gt;. While that would better show off flexbox’s capabilities, I decided I didn’t actually want my nav bar all that flexible. Having too much space between the items looks quite strange - especially true on larger monitors. I probably should have thought of this before I started converting my nav bar to use flexbox, but oh well. For learning!&lt;/p&gt;

&lt;h3&gt;Step 4: add styling back in&lt;/h3&gt;

&lt;p&gt;Most of my previous styles were still required. I&amp;#39;d hoped I could remove some lines, but it doesn’t seem to be the case.&lt;/p&gt;

&lt;p&gt;&lt;img alt="add styling back" src="/images/blog/css-flexbox/add-styling-back.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Step 5: mobile - vertical display&lt;/h3&gt;

&lt;p&gt;Yes, yes, mobile first and all that. I just wanted to get things working, ok?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;display: flex&lt;/code&gt; I added previously was applied to the mobile, so I didn&amp;#39;t need to add that again.&lt;/p&gt;

&lt;p&gt;But I want the mobile navigation to go vertically, so I changed the &lt;code&gt;flex-direction&lt;/code&gt; from &lt;code&gt;row&lt;/code&gt; (the default) to &lt;code&gt;flex-direction: column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="vertical display mobile" src="/images/blog/css-flexbox/vertical-display-mobile.png" /&gt;&lt;/p&gt;

&lt;p&gt;Woot! Getting pretty close!&lt;/p&gt;

&lt;h3&gt;Step 6: mobile - center align&lt;/h3&gt;

&lt;p&gt;Next up was to center the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s across the screen. So I used &lt;code&gt;align-items: center&lt;/code&gt; to get all my ducks in a row.&lt;/p&gt;

&lt;p&gt;&lt;img alt="align center mobile" src="/images/blog/css-flexbox/align-center-mobile.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Step 7: mobile - spacing&lt;/h3&gt;

&lt;p&gt;Finally the spacing around the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s was a bit weird so I used &lt;code&gt;justify-content: space-around&lt;/code&gt; to display them evening within the nav dropdown&amp;#39;s space.&lt;/p&gt;

&lt;p&gt;&lt;img alt="mobile correct spacing" src="/images/blog/css-flexbox/mobile-correct-spacing.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Done!&lt;/h2&gt;

&lt;p&gt;After all that it was quite a small change with no change to the user experience. But I did learn more about flexbox, so I’ve got that going for me!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CSS: the box model</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-box-model/"/>
    <id>http://lucybain.com/blog/2015/css-box-model/</id>
    <published>2015-05-02T00:00:00Z</published>
    <updated>2015-09-19T18:09:18+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The blog topic (like most of my interview question posts) comes from the &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#css-questions"&gt;Front-end Job Interview Questions&lt;/a&gt;. Today I’m moving away from JS to talk about CSS’s box model.&lt;/p&gt;

&lt;h2&gt;Explain your understanding of the box model.&lt;/h2&gt;

&lt;p&gt;Well, first off &lt;em&gt;what’s this “box” you&amp;#39;re talking about?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In CSS, at least in reference to the box model, the “box” is the content area as defined by the &lt;code&gt;width&lt;/code&gt;. So it looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image of box" src="/images/blog/box-model.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully that’s straight forward enough. However, browsers differ on what should and should not get included in the “content” area. Up for debate is the content itself (words), the padding, the borders, and the margin. As far as I know, everyone agrees that the words should count towards the width, and that the margin should not. But when it comes to the padding and border things are uncertain.&lt;/p&gt;

&lt;p&gt;Some browsers (such as Firefox) think the width should only include the the content itself, not the padding, boarder, nor margin. Other browsers (such as IE) think the width should include the content, padding, and boarder, but not the margin. (So far I haven’t found anyone who thinks the padding should be in and the boarder out - they seem to always go as a pair.)&lt;/p&gt;

&lt;p&gt;So for these two ways of looking at things, there are two ways to define the box. Let’s look at them one by one.&lt;/p&gt;

&lt;h3&gt;Content box&lt;/h3&gt;

&lt;style&gt;
  .border-box {
    box-sizing: border-box;
  }
  .content-box {
    box-sizing: content-box;
  }
  .width {
    border: 5px solid black;
    width: 150px;
  }
  .example {
    text-align: center;
    width: 150px;
    border: 10px solid #FF7400;
    padding: 20px;
    background-image: linear-gradient(to bottom, #F55585 0%, #F55585 100%),
                      linear-gradient(to bottom, #00CFCF 0%, #00CFCF 100%);
    background-clip: content-box, padding-box;
    margin-bottom: 10px;
  }
&lt;/style&gt;

&lt;div class="border-box width"&gt;
&lt;/div&gt;

&lt;div class="content-box example"&gt;
  Content box
&lt;/div&gt;

&lt;p&gt;Go ahead and check out the CSS and HTML used to make the above. It’s all inline right there so you can see I’m not doing anything tricky.&lt;/p&gt;

&lt;p&gt;Ok, to start with, we have a thick black line that’s exactly 150px wide. That’s your ruler. Next we have a div with an orange border (10px), blue padding (20px), and pink for the content itself. The div’s width is set to 150px using &lt;code&gt;box-sizing: content-box&lt;/code&gt;, but, as you can see, the whole div is much larger than the 150px ruler just above it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How much bigger?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, since the border (10px) and padding (20px) don’t count towards the total width, the entire div is 10px (border left) + 20px (padding left) + 20px (padding right) + 10px (border right) larger. Or 60px larger all up, giving it an “actual” width of 210px. Here it is again with a ruler set to 210px (just in case you don’t believe me):&lt;/p&gt;

&lt;div class="border-box width" style="width: 210px;"&gt;
&lt;/div&gt;

&lt;div class="content-box example"&gt;
  Content box
&lt;/div&gt;

&lt;h3&gt;Border box&lt;/h3&gt;

&lt;p&gt;The other way to measure it is to include the padding and the border, which is exactly what border box does. Here’s your example again:&lt;/p&gt;

&lt;div class="border-box width"&gt;
&lt;/div&gt;

&lt;div class="border-box example"&gt;
  Border box
&lt;/div&gt;

&lt;p&gt;Same as above there’s a thick black line set to 150px wide as a ruler. Then a div with the same measurements (an orange border (10px), blue padding (20px), and pink for the content itself). The div’s width is set to 150px using &lt;code&gt;box-sizing: border-box&lt;/code&gt;, and the whole div is exactly the same width as the 150px ruler. This means the area for the content is smaller.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How much smaller?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, the same as above - 60px smaller. So the area for the content is only 90px wide.&lt;/p&gt;

&lt;h2&gt;How you would tell the browser in CSS to render your layout in different box models?&lt;/h2&gt;

&lt;p&gt;Well, exactly as above, using &lt;code&gt;box-sizing: border-box&lt;/code&gt; or &lt;code&gt;box-sizing: content-box&lt;/code&gt; depending on your need.&lt;/p&gt;

&lt;p&gt;While it’s possible to set &lt;code&gt;box-sizing&lt;/code&gt; per element (as I did in my examples) this is usually very confusing. If each element could be one way or another you wouldn’t know what widths to set on things until you checked which box model they used. Therefore it’s recommended to set &lt;code&gt;box-sizing&lt;/code&gt; on all your elements with &lt;code&gt;* { box-sizing: YOUR_DECISION_HERE; }&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Which one should I use?&lt;/h2&gt;

&lt;p&gt;This isn’t from the interview questions, but I think it’s interesting. Recently there’s been a big push to using &lt;code&gt;border-box&lt;/code&gt; on everything. The idea is, when you set the width of a thing, you expect that to be the actual width, and not to have padding and borders hanging outside the area. This can be particularly confusing when trying to get things to line up next to each other (such as columns). So to keep up with common trends, border box is the way to go.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As always, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model"&gt;Mozilla&lt;/a&gt; is great for documentation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://quirksmode.org/css/user-interface/boxsizing.html"&gt;Quirks Mode&lt;/a&gt; has some good visuals&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/"&gt;Paul Irish&lt;/a&gt; talks about why border box is the winner&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/the-css-box-model/"&gt;CSS Tricks&lt;/a&gt; goes into more details and covers far more edge cases than I got to here&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: AMD and CommonJS</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-amd-commonjs/"/>
    <id>http://lucybain.com/blog/2015/js-amd-commonjs/</id>
    <published>2015-04-23T00:00:00Z</published>
    <updated>2015-09-19T18:09:20+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What’s the difference between AMD and CommonJS?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m only going to talk about how this impacts the browser. I will not talk about Node.js, although I know it’s relevant to this discussion. I don’t know enough about Node.js to cover it properly. Ok, let’s get to it!&lt;/p&gt;

&lt;p&gt;To start off, let’s talk about their similarities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What problem are they trying to solve?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Typcially JS relies on having &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the right order in the HTML. This can often lead to confusion and ordering mistakes. Beyond that, some people prefer to have all their JS compiled into one massive file. This is convenient since they have complete control on ordering and don’t need to rely on &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. However it means all JS gets loaded on each page, which isn’t very performant.&lt;/p&gt;

&lt;p&gt;Both AMD and CommonJS are a way of linking JS bits of code, called modules, together. They are a way of defining which modules rely on which other modules so a computer can decide the best way to link everything together, rather than relying on error-prone coders.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do they solve that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both AMD and CommonJS provide standards for other libraries to implement. There are quite a few libraries that have done just that (&lt;a href="http://requirejs.org/"&gt;RequireJS&lt;/a&gt; and &lt;a href="https://github.com/jrburke/almond"&gt;Almond&lt;/a&gt; are two that implement AMD). But you “use” AMD or CommonJS code any more than you can “use” object oriented code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so that’s how they&amp;#39;re similar. How are they different?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at each one individually. We&amp;#39;ll start with AMD:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does “AMD” stand for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AMD stands for &lt;strong&gt;A&lt;/strong&gt;synchronous &lt;strong&gt;M&lt;/strong&gt;odule &lt;strong&gt;D&lt;/strong&gt;efinition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And what makes it special?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The “module” part should be clear enough since both CommonJS and AMD focus on linking modules together. And the “definition” part is about how it’s a standard, rather than a library. However a key difference for AMD is the “asynchronous” bit. AMD loads each distinct module asynchronously for web performance. Instead of having one &lt;em&gt;giant&lt;/em&gt; file with everything in it which causes a slow load time, you can load only the files you need, only when you need them, all asynchronously. Slick, huh?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So then what’s special about CommonJS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CommonJS loads modules synchronously. My understanding is that this is better for server-side (Node.js) development. Again, CommonJS is a standard but it focuses more on JS out of the browser than AMD.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s it? Async vs. Sync?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sort of. Of course the syntax for both is different too. Let’s look at how to use each.&lt;/p&gt;

&lt;h2&gt;Syntax&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CommonJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll start with CommonJS since it’s a bit easier to read.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 1: math module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// math.js
var module = {
  add: function(x, y) {
    return x + y;
  },
  subtract: function(x, y) {
    return x - y;
  },
  multiply: function(x, y) {
    return x * y;
  },
  divide: function(x, y) {
    return x / y;
  }
};
export.math = module; // export is a commonJS specific method
                      // export returns what’s publicly available
                      // the "math" gives the name of the module
&lt;/pre&gt;
&lt;p&gt;This code doesn’t output anything, but when we require the &lt;code&gt;math&lt;/code&gt; module we&amp;#39;ll have access to everything in the returned &lt;code&gt;module&lt;/code&gt; object (namely &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;multiply&lt;/code&gt;, and &lt;code&gt;divide&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 2: stats module&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alright, now we&amp;#39;ve created a module, we can require it in another module.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// stats.js
var math = require('math');

var module = {
  average: function(x, y) {
    var sum = math.add(x, y);
    return math.divide(sum, 2);
  }
};
export.stats = module; // export is a commonJS specific method
                       // export returns what’s publicly available
                       // the "stats" gives the name of the module
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Part 3: get output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ve got two modules, we can use them to get output.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var math = require('math');
var stats = require(’stats');
console.log(math.add(1, 2)) // logs "3"
console.log(stats.average(0, 4)) // logs "2"
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;AMD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll go through exactly the same example, but this time implement it with AMD.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 1: math module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;define( // AMD specific method used to define a module
  'math', // name of the module (this is optional)
  // Note: no dependencies (they're optional)
  function() {
    var module = {
      add: function(x, y) {
        return x + y;
      },
      subtract: function(x, y) {
        return x - y;
      },
      multiply: function(x, y) {
        return x * y;
      },
      divide: function(x, y) {
        return x / y;
      }
    };
    return module; // returns what’s publicly available
});
&lt;/pre&gt;
&lt;p&gt;As with CommonJS, this code doesn’t output anything.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 2: stats module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;define( // AMD specific method used to define a module
  ’stats', // name of the module (this is optional)
  ['math'], // dependency, same name as module above
            // it’s an array since there can be more than one
  function() {
    var module = {
      average: function(x, y) {
        var sum = math.add(x, y);
        return math.divide(sum, 2);
      }
    };
    return module; // returns what’s publicly available
});
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Part 3: get output&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;require( // AMD specific method to run code
  // Note: no name, require doesn't support names
  ['math', ’stats'], // dependencies
  function(math, stats) {
    console.log(math.add(1, 2)) // logs "3"
    console.log(stats.average(0, 4)) // logs "2"
});
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs"&gt;Relation between CommonJS, AMD and RequireJS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RequireJS on &lt;a href="http://requirejs.org/docs/whyamd.html"&gt;AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0fps.net/2013/01/22/commonjs-why-and-how/"&gt;About CommonJS&lt;/a&gt; and using it on the browser&lt;/li&gt;
&lt;li&gt;&lt;a href="http://addyosmani.com/writing-modular-js/"&gt;About AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A bit about &lt;a href="http://blog.millermedeiros.com/amd-is-better-for-the-web-than-commonjs-modules/"&gt;CommonJS vs. AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A little history about the &lt;a href="http://www.cubrid.org/blog/dev-platform/toward-javascript-standards-commonjs-and-amd/"&gt;development of both&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Rails Girls event manager</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/rails-girls-event-manager/"/>
    <id>http://lucybain.com/blog/2015/rails-girls-event-manager/</id>
    <published>2015-04-09T00:00:00Z</published>
    <updated>2015-09-19T18:09:27+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I’m looking for something that Rails Girls could use to manage our events, particularly user sign ups. In the past we&amp;#39;ve cobbled together something from various sites. Those sites are good on their own, but the whole system is pretty flimsy and I’m afraid someone might fall through the cracks. So I’m asking you for suggestions, but we&amp;#39;ve got some fairly specific requests... Here’s what we&amp;#39;re looking for:&lt;/p&gt;

&lt;p&gt;Required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When people “sign up” it’s really an application to attend - they are not issued a ticket&lt;/li&gt;
&lt;li&gt;We can send custom emails to people when they are accepted, as well as before the event&lt;/li&gt;
&lt;li&gt;Free, or maybe willing to be free for a non-profit (we&amp;#39;re happy to list them as sponsors)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perfered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up form allows for custom fields&lt;/li&gt;
&lt;li&gt;There is a “notes” (or similar) section for each applicant/attendee, or we can easily create one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track attendance at the event&lt;/li&gt;
&lt;li&gt;Support for multiple (or at least two) tracks (Rails Girls and Rails Girls Next, ideally mentors as well)&lt;/li&gt;
&lt;li&gt;Keep history on people between events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything else that’s used for event management - tracking caterers, receipts, sponsors, to do lists, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that’s a fairly long list. I&amp;#39;ve looked around at a few, but haven’t found anything that meets our needs yet, so I’m reaching out to ask if you know of any such product.&lt;/p&gt;

&lt;p&gt;Yes, I know we &lt;em&gt;could&lt;/em&gt; build it ourselves. I’m sure that&amp;#39;ll have a fair bit of upkeep and I’m keen to keep our involvement to a minimum. (But hey, if you want to build it, you know you&amp;#39;ll have at least one (non-paying) customer!)&lt;/p&gt;

&lt;p&gt;Please let us know if you have any suggestions.&lt;/p&gt;

&lt;p&gt;Thanks!
Lucy and the Rails Girls Sydney team&lt;/p&gt;
</content>
  </entry>
</feed>
