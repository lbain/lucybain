<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-03-12T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS: Split vs. Splice</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-split-vs-splice/"/>
    <id>http://lucybain.com/blog/2015/js-split-vs-splice/</id>
    <published>2015-03-12T00:00:00Z</published>
    <updated>2015-03-25T22:57:07+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What&amp;#39;s the difference between &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Well, what does &lt;code&gt;split&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Much like the name implies &lt;code&gt;split&lt;/code&gt; breaks something into pieces. The &lt;code&gt;split&lt;/code&gt; method is used for strings in JS. It has a few optional parameters, so let&amp;#39;s see what the simplest call does:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split()); // ['My test string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Hmmm, that&amp;#39;s not super useful - &lt;code&gt;split&lt;/code&gt; called without a parameter simply creates an array with one element, the string. But note that calling &lt;code&gt;split&lt;/code&gt; on &lt;code&gt;myString&lt;/code&gt; doesn&amp;#39;t change &lt;code&gt;myString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let&amp;#39;s try something a little more interesting. I want to break &lt;code&gt;myString&lt;/code&gt; up into whole words. We can split &lt;code&gt;myString&lt;/code&gt; on spaces like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ')); // ['My', 'test', 'string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Much more useful! When you call &lt;code&gt;split&lt;/code&gt; with a parameter the string is &lt;em&gt;split&lt;/em&gt; on every occurrence of that parameter. Note that the parameter itself is removed from the array (there are no spaces in &lt;code&gt;[&amp;#39;My&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;string&amp;#39;]&lt;/code&gt;). Now we can know how many words are in a sentence, or find people&amp;#39;s first and last names (sometimes, names can get tricky...). Again, note that &lt;code&gt;myString&lt;/code&gt; wasn&amp;#39;t changed.&lt;/p&gt;

&lt;p&gt;But what if &lt;code&gt;myString&lt;/code&gt; was really long? Maybe you don&amp;#39;t want an array with hundreds of items in it. Or perhaps you only want to find the first nonoccurence of something. Let&amp;#39;s look for the first two word in &lt;code&gt;myString&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ', 2)); // ['My', 'test']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Again, we split on spaces because we were looking for full words. The second parameter we sent to &lt;code&gt;split&lt;/code&gt; was the number of elements to go in the array. We wanted the first two words, so we sent through 2.&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;split&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrap a string up in an array &lt;code&gt;string.split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;break up a string whenever a particular string is found &lt;code&gt;string.split(breakString)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;return only a certain number of elements from all the break points &lt;code&gt;string.split(breakString, 3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweet, we&amp;#39;re halfway there!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what does &lt;code&gt;splice&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The name isn&amp;#39;t great, but it&amp;#39;s related to &lt;strong&gt;splicing&lt;/strong&gt; things together. Like you can take the end of one rope and splice it together with another. It&amp;#39;s a &lt;a href="https://www.google.com.au/search?q=splice+rope"&gt;real thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways... in JS &lt;code&gt;splice&lt;/code&gt; is an array method. Let&amp;#39;s look at a few sample calls:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(0, 2); // ['this', 'is']
console.log(myArray); // ['an', 'array']
&lt;/pre&gt;
&lt;p&gt;Ok, a really important thing to note is that &lt;code&gt;myArray&lt;/code&gt; was changed during the call to &lt;code&gt;splice&lt;/code&gt;. So if you ever want to use the original array you&amp;#39;ll need to keep a backup somewhere. Another thing to note is that &lt;code&gt;splice&lt;/code&gt; returns a value (in fact, it returns the elements that are missing from the array).&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;splice&lt;/code&gt; requires at least two parameters. The first parameter is an index in the array. I think of it as where the cursor is. The second parameter is how many elements to delete. So what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;0&lt;/strong&gt; please remove &lt;strong&gt;2&lt;/strong&gt; elements and return them to me.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at a similar example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var countingArray = [5, 6, 7, 8];
countingArray.splice(1, 1); // [6]
console.log(countingArray); // [5, 7, 8]
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;1&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me.&amp;quot;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: JS doesn&amp;#39;t have a &lt;code&gt;.delete(index)&lt;/code&gt; for arrays. The best you can do is &lt;code&gt;delete array[index]&lt;/code&gt;, but that actually just replaces the value at &lt;code&gt;array[index]&lt;/code&gt; with &lt;code&gt;undefined&lt;/code&gt;. Using &lt;code&gt;splice&lt;/code&gt; in the above example is how you can actually delete elements from an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, on to the optional parameter(s)!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;Hopefully you&amp;#39;ve got a good idea of what happened here. The first parameter is still an index. The second parameter is still how many elements to remove. And finally the third element is what to add &lt;strong&gt;after&lt;/strong&gt; the index given in the first parameter. Again, what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'amazingly', 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'amazingly', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;amazing&amp;#39;&lt;/strong&gt; and &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot; The third parameter can keep on going. If you wanted to add 100 elements to &lt;code&gt;myArray&lt;/code&gt; you could do it with &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you can also switch words in place:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(2, 1, 'the'); // ['an']
console.log(myArray); // ['this', 'is', 'the', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;2&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;2&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;the&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;splice&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove elements by index&lt;/li&gt;
&lt;li&gt;add elements after an index&lt;/li&gt;
&lt;li&gt;add and remove in one step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew! Thanks for sticking with me - this was a long one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"&gt;Mozilla (split)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Mozilla (splice)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ariya.ofilabs.com/2014/02/javascript-array-slice-vs-splice.html"&gt;split vs. splice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Rails Girls - March 2015</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/rails-girls/"/>
    <id>http://lucybain.com/blog/2015/rails-girls/</id>
    <published>2015-03-08T00:00:00Z</published>
    <updated>2015-03-22T09:38:41+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Phew! Rails Girls Sydney, March 2015 was on Friday and Saturday, I wanted to update you&lt;/p&gt;

&lt;p&gt;Usually the Sydney Rails community runs a Rails Girls event every four-ish months. I&amp;#39;ve always enjoyed mentoring at them, but I&amp;#39;ve never organised one before . It&amp;#39;s a great way to give back to the community and encourage new programmers. It&amp;#39;s also aimed at women, which is something I&amp;#39;m also passionate about.&lt;/p&gt;

&lt;p&gt;The woman who organised the events in the past has moved to NYC (good for her, but sad for us). What with her leaving, and us not knowing what to do we took longer to run this event than usual. It ended up being about eight months between workshops.&lt;/p&gt;

&lt;p&gt;I had a surprise bonus two weeks off between jobs while waiting for my visa to get transfered properly. It turns out we absolutely needed at least one of those weeks off to prepare for the workshop full time. I hadn&amp;#39;t realised how much work was involved in one of these. I&amp;#39;m very grateful to the previous organiser, who did such a wonderful job.&lt;/p&gt;

&lt;p&gt;In the end we had about 45 attendees come and learn Rails with us. Not all of them were there for both days, some had to leave early, or weren&amp;#39;t able to come for Friday night. I had hopped for a few more attendees (50-55 was my goal), but everyone who was there was learning enthusiastically.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rails Girls Friday Hug" src="/images/blog/rails-girls.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to meet with another organiser to talk about what we did well, and what could have been better. There were a lot of things I didn&amp;#39;t know since it was the first time I organised it. Hopefully we can get most of those written down for next time!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: How does JSONP work?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/how-does-jsonp-work/"/>
    <id>http://lucybain.com/blog/2015/how-does-jsonp-work/</id>
    <published>2015-03-01T00:00:00Z</published>
    <updated>2015-03-23T21:51:39+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;How does JSONP work?&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start smaller: &lt;em&gt;What does JSONP stand for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation with &lt;strong&gt;P&lt;/strong&gt;adding&lt;/p&gt;

&lt;p&gt;Hopefully you already know about the JSON part, if not check out this &lt;a href="http://stackoverflow.com/a/383699/863846"&gt;Stackoverflow&lt;/a&gt; answer. Go ahead, I&amp;#39;ll wait :)&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll talk about the padding part in a minute.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What problem does it solve?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Browsers try to be security conscious. They don&amp;#39;t let your JS talk to just any old server (see &lt;a href="https://www.google.com.au/webhp?sourceid=chrome-instant&amp;amp;amp;ion=1&amp;amp;amp;espv=2&amp;amp;amp;ie=UTF-8#q=cross%20site%20scripting"&gt;Cross Site Scripting&lt;/a&gt;). When you make AJAX requests, you can only query your server, not anyone else&amp;#39;s. This is a problem if you want to get data from another server (perhaps see a stream of Tweets). The browsers will not let you make an AJAX call to another server, so you&amp;#39;re stuck.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, tell me a bit about JSONP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, browsers have a caveat. You aren&amp;#39;t allowed to call other servers from your JS, but you &lt;em&gt;are&lt;/em&gt; allowed to include a script from another server. You probably already do this with jQuery. Most people include a script tag to get jQuery hosted from Google rather than hosting it themselves. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the domain is &lt;code&gt;ajax.googleapis.com&lt;/code&gt; not &lt;code&gt;your-awesome-site.com&lt;/code&gt;. Browsers allow this kind of code sharing, but direct calls to an API from JS.&lt;/p&gt;

&lt;p&gt;So way back in &lt;a href="http://en.wikipedia.org/wiki/JSONP#History"&gt;2005&lt;/a&gt; someone had the clever idea to take advantage of this caveat. Instead of calling an API directly (which browsers don&amp;#39;t allow) you can call it via a script tag (which is totally legit).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So how does it work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a function in the global space to handle the JSON returned from the API. It doesn&amp;#39;t have to do much, just enough so you can see what you&amp;#39;re getting:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function myCallbackFunction(data) {
  console.log(data);
}
&lt;/pre&gt;
&lt;p&gt;Next, add a script tag to your page which calls the API and passes it an additional parameter. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="http://cool-stuff.com/api.json?callback=myCallbackFunction"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Notice the additional parameter? It&amp;#39;s typically called &lt;code&gt;callback&lt;/code&gt;, but not always, check the docs for your particular API. Also note the &lt;code&gt;callback&lt;/code&gt; parameter&amp;#39;s value. It&amp;#39;s the same as the function we defined earlier. &lt;em&gt;This is crucial!&lt;/em&gt; If those names don&amp;#39;t match up you won&amp;#39;t get your data.&lt;/p&gt;

&lt;p&gt;An API that&amp;#39;s set up to handle JSONP knows to look for that special parameter. If it&amp;#39;s there, the response isn&amp;#39;t just JSON, but the JSON wrapped (&lt;strong&gt;P&lt;/strong&gt;added) with the name of the callback. So for us, the API would return:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;myCallbackFunction({'awesome': 'data'});
&lt;/pre&gt;
&lt;p&gt;Since the API returns to a script tag the JS is immediately executed. So &lt;code&gt;myCallbackFunction&lt;/code&gt; gets called. We defined this function earlier, so we&amp;#39;ll have &lt;code&gt;{&amp;#39;awesome&amp;#39;: &amp;#39;data&amp;#39;}&lt;/code&gt; logged to the console!&lt;/p&gt;

&lt;p&gt;Phew! Way to get around some security issues!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few things to note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally you &lt;strong&gt;don&amp;#39;t write the script tag yourself.&lt;/strong&gt; You can get jQuery to do that for you :) To make the same call as we did previously you can just use:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$.ajax({
  url: 'http://cool-stuff.com/api.json',
  dataType: 'jsonp',
  success: function(data) {
    console.log(data);
  }
});
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Safety First!&lt;/strong&gt; There&amp;#39;s a reason browsers don&amp;#39;t like you talking to other servers - you never know what those servers will send back! Use good data validation, even if the data is &amp;quot;safe.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can only use JSONP for &lt;code&gt;get&lt;/code&gt; requests.&lt;/strong&gt; You can use normal AJAX to do &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; and all data manipulations, but you cannot do this with JSONP. The practical reason for this is that HTML tags only ever get information, they can&amp;#39;t do anything else (think image tags, links for style sheets, and script tags). The handy reason is that if you owned the API you almost certainly would not want randoms from the internet updating your data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://schock.net/articles/2013/02/05/how-jsonp-really-works-examples/"&gt;Jason Schock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/"&gt;Jhonny Wey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/JSONP"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Algorithms study group</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/algorithms-study-group/"/>
    <id>http://lucybain.com/blog/2015/algorithms-study-group/</id>
    <published>2015-01-28T00:00:00Z</published>
    <updated>2015-03-19T21:09:40+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Last year I ran two study groups, one for &lt;a href="http://codesydney.com/2014-js"&gt;JS&lt;/a&gt; and one for &lt;a href="/python"&gt;intro to programming&lt;/a&gt;. I also gave a talk about &lt;a href="https://docs.google.com/presentation/d/18lYj02Tc0dBbAAngrYBGPRSbADnswkjnyAdoeD--WQ4/edit?usp=sharing"&gt;starting a study group&lt;/a&gt; at Girl Geek Dinner. I was thrilled when my friend &lt;a href="http://daphnechong.com/"&gt;Daphne&lt;/a&gt; decided to organise a &lt;a href="http://codesydney.com/2015-algorithms/"&gt;group&lt;/a&gt; on her own to study algorithms.&lt;/p&gt;

&lt;p&gt;The course we&amp;#39;re going through is Princeton&amp;#39;s intro to algorithms, and it is &lt;em&gt;hard!&lt;/em&gt; It started a few days ago, and just getting through the lectures took quite some time. But it&amp;#39;s really interesting. I&amp;#39;m keeping my &lt;a href="http://1drv.ms/1tdZuA6"&gt;notes online&lt;/a&gt; so I can share them with anyone interested. This blog post doesn&amp;#39;t have a lot of content, but I promise the link to my notes does. The course has been keeping me pretty busy, so I figured I should get at least one blog post up about it!&lt;/p&gt;

&lt;p&gt;Many thanks to Daphne, and here&amp;#39;s to more learning in 2015!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I have a new job!</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/new-job/"/>
    <id>http://lucybain.com/blog/2015/new-job/</id>
    <published>2015-01-22T00:00:00Z</published>
    <updated>2015-03-19T21:09:40+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Well apparently all this studying has paid off! I’ve been interviewing with a few companies since before Christmas, and I’m pleased to announce that today I accepted an offer from Atlassian. I’ll be working as a junior front end developer on Stash, starting on Feb 23 (visa pending).&lt;/p&gt;

&lt;p&gt;Last March I wrote a &lt;a href="/blog/2014/front-end/"&gt;post&lt;/a&gt; about wanting to become a front end developer and I’m really proud of myself that I made it :)&lt;/p&gt;

&lt;p&gt;I hope I can level up a bit faster this time around - I certainly feel that I have a better understanding of my programming knowledge with JS than I did with Ruby. My goal is to continue learning JS, but with more intention than I learned Ruby. I fell into Ruby when my company decided to switch languages, and I didn’t do a good job pushing myself to learn more. This time I want to do better - hopefully this blog will hold me to it.&lt;/p&gt;

&lt;h1&gt;How I got here&lt;/h1&gt;

&lt;p&gt;In case anyone is interested what I did to make myself more employable for a language I have very little experience with:&lt;/p&gt;

&lt;h2&gt;Started a study group&lt;/h2&gt;

&lt;p&gt;This was probably the most important thing - it showed that I was committed to learning JS. It also forced me to interact with the members of the JS community since they were mentors in the group. I met some people I would interview with at this study group.&lt;/p&gt;

&lt;h2&gt;Demo projects&lt;/h2&gt;

&lt;p&gt;As part of the study group I built a series of &lt;a href="/code-sydney-work/"&gt;demo projects&lt;/a&gt; and put their code on &lt;a href="https://github.com/lbain/code-sydney-work"&gt;github&lt;/a&gt;. This meant that people could see my level when they reviewed my resume. It also meant I had time to practice what I was studying.&lt;/p&gt;

&lt;h2&gt;Practice interview questions&lt;/h2&gt;

&lt;p&gt;This was actually far more valuable than I expected. I thought the questions would be more varied than what I found on some github repo, but those questions (and there are a lot of them) are a good representation of what I actually got. Most of the time I couldn’t remember the actual syntax to do something and the interviewer would help me through, but I usually knew the concept they were referring to.&lt;/p&gt;

&lt;p&gt;There were a number of interview questions I hadn’t reviewed and didn’t know the answer to. When these came up I asked the interviewer to explain them to me and tried to then explain it back to them to make sure I’d understood (and to show them what I great learner I am, because I’ll be doing a bunch of that on the job!). I also wrote these questions down so I could review them (and write blog posts) in the future.&lt;/p&gt;

&lt;h2&gt;JavaScript: the good parts&lt;/h2&gt;

&lt;p&gt;This wasn’t as useful as I’d hoped. I think I should have read it before my study group, and tried to put the theory into practice as I wrote my demo projects. In the end the book was a useful review of a lot of the concepts we’d talked about in study group or that had come up in my review of interview questions, but it wasn’t a great way for me to learn new concepts at this point.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: How does ajax work?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-how-does-ajax-work/"/>
    <id>http://lucybain.com/blog/2015/js-how-does-ajax-work/</id>
    <published>2015-01-10T00:00:00Z</published>
    <updated>2015-03-19T21:09:40+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;How does AJAX work?&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start smaller: &lt;strong&gt;What does AJAX stand for?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;synchronous &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;a&lt;/strong&gt;nd &lt;strong&gt;X&lt;/strong&gt;ML (I think using the &amp;quot;a&amp;quot; in &amp;quot;and&amp;quot; is a little bit of a cheat, but there you go.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So how does it work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After loading, the client uses &lt;strong&gt;J&lt;/strong&gt;avaScript to fire off a request to the server and listens to the response &lt;strong&gt;a&lt;/strong&gt;synchronously. The response that comes back can be &lt;strong&gt;X&lt;/strong&gt;ML, but is often other formats, most often JSON (officially this is known as AJAJ, but everyone still calls it AJAX).&lt;/p&gt;

&lt;p&gt;The bit that makes AJAX so powerful is that it can update the page &lt;em&gt;after&lt;/em&gt; it has finished loading. Before AJAX any new content required an entire page refresh, even if it was only a small change. This meant that users had to redownload a page for very little updated content (especially annoying in the 90s since home internet wasn&amp;#39;t as fast then). Using AJAX meant that the front end could change without a full page refresh, thus giving a much faster response time.&lt;/p&gt;

&lt;p&gt;Origially AJAX mostly returned HTML/XML snipits and the DOM would get updated with this new code when the AJAX returned. Now, however, it&amp;#39;s more common for AJAX to get data and update the DOM as needed rather than doing a swap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1510011/how-does-ajax-work"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/Learn/What_is_AJAX_and_how_does_it_work"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
