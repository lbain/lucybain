<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-05-02T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>CSS: the box model</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-box-model/"/>
    <id>http://lucybain.com/blog/2015/css-box-model/</id>
    <published>2015-05-02T00:00:00Z</published>
    <updated>2015-09-19T18:09:18+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The blog topic (like most of my interview question posts) comes from the &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#css-questions"&gt;Front-end Job Interview Questions&lt;/a&gt;. Today I’m moving away from JS to talk about CSS’s box model.&lt;/p&gt;

&lt;h2&gt;Explain your understanding of the box model.&lt;/h2&gt;

&lt;p&gt;Well, first off &lt;em&gt;what’s this “box” you&amp;#39;re talking about?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In CSS, at least in reference to the box model, the “box” is the content area as defined by the &lt;code&gt;width&lt;/code&gt;. So it looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Image of box" src="/images/blog/box-model.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully that’s straight forward enough. However, browsers differ on what should and should not get included in the “content” area. Up for debate is the content itself (words), the padding, the borders, and the margin. As far as I know, everyone agrees that the words should count towards the width, and that the margin should not. But when it comes to the padding and border things are uncertain.&lt;/p&gt;

&lt;p&gt;Some browsers (such as Firefox) think the width should only include the the content itself, not the padding, boarder, nor margin. Other browsers (such as IE) think the width should include the content, padding, and boarder, but not the margin. (So far I haven’t found anyone who thinks the padding should be in and the boarder out - they seem to always go as a pair.)&lt;/p&gt;

&lt;p&gt;So for these two ways of looking at things, there are two ways to define the box. Let’s look at them one by one.&lt;/p&gt;

&lt;h3&gt;Content box&lt;/h3&gt;

&lt;style&gt;
  .border-box {
    box-sizing: border-box;
  }
  .content-box {
    box-sizing: content-box;
  }
  .width {
    border: 5px solid black;
    width: 150px;
  }
  .example {
    text-align: center;
    width: 150px;
    border: 10px solid #FF7400;
    padding: 20px;
    background-image: linear-gradient(to bottom, #F55585 0%, #F55585 100%),
                      linear-gradient(to bottom, #00CFCF 0%, #00CFCF 100%);
    background-clip: content-box, padding-box;
    margin-bottom: 10px;
  }
&lt;/style&gt;

&lt;div class="border-box width"&gt;
&lt;/div&gt;

&lt;div class="content-box example"&gt;
  Content box
&lt;/div&gt;

&lt;p&gt;Go ahead and check out the CSS and HTML used to make the above. It’s all inline right there so you can see I’m not doing anything tricky.&lt;/p&gt;

&lt;p&gt;Ok, to start with, we have a thick black line that’s exactly 150px wide. That’s your ruler. Next we have a div with an orange border (10px), blue padding (20px), and pink for the content itself. The div’s width is set to 150px using &lt;code&gt;box-sizing: content-box&lt;/code&gt;, but, as you can see, the whole div is much larger than the 150px ruler just above it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How much bigger?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, since the border (10px) and padding (20px) don’t count towards the total width, the entire div is 10px (border left) + 20px (padding left) + 20px (padding right) + 10px (border right) larger. Or 60px larger all up, giving it an “actual” width of 210px. Here it is again with a ruler set to 210px (just in case you don’t believe me):&lt;/p&gt;

&lt;div class="border-box width" style="width: 210px;"&gt;
&lt;/div&gt;

&lt;div class="content-box example"&gt;
  Content box
&lt;/div&gt;

&lt;h3&gt;Border box&lt;/h3&gt;

&lt;p&gt;The other way to measure it is to include the padding and the border, which is exactly what border box does. Here’s your example again:&lt;/p&gt;

&lt;div class="border-box width"&gt;
&lt;/div&gt;

&lt;div class="border-box example"&gt;
  Border box
&lt;/div&gt;

&lt;p&gt;Same as above there’s a thick black line set to 150px wide as a ruler. Then a div with the same measurements (an orange border (10px), blue padding (20px), and pink for the content itself). The div’s width is set to 150px using &lt;code&gt;box-sizing: border-box&lt;/code&gt;, and the whole div is exactly the same width as the 150px ruler. This means the area for the content is smaller.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How much smaller?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, the same as above - 60px smaller. So the area for the content is only 90px wide.&lt;/p&gt;

&lt;h2&gt;How you would tell the browser in CSS to render your layout in different box models?&lt;/h2&gt;

&lt;p&gt;Well, exactly as above, using &lt;code&gt;box-sizing: border-box&lt;/code&gt; or &lt;code&gt;box-sizing: content-box&lt;/code&gt; depending on your need.&lt;/p&gt;

&lt;p&gt;While it’s possible to set &lt;code&gt;box-sizing&lt;/code&gt; per element (as I did in my examples) this is usually very confusing. If each element could be one way or another you wouldn’t know what widths to set on things until you checked which box model they used. Therefore it’s recommended to set &lt;code&gt;box-sizing&lt;/code&gt; on all your elements with &lt;code&gt;* { box-sizing: YOUR_DECISION_HERE; }&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Which one should I use?&lt;/h2&gt;

&lt;p&gt;This isn’t from the interview questions, but I think it’s interesting. Recently there’s been a big push to using &lt;code&gt;border-box&lt;/code&gt; on everything. The idea is, when you set the width of a thing, you expect that to be the actual width, and not to have padding and borders hanging outside the area. This can be particularly confusing when trying to get things to line up next to each other (such as columns). So to keep up with common trends, border box is the way to go.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As always, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model"&gt;Mozilla&lt;/a&gt; is great for documentation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://quirksmode.org/css/user-interface/boxsizing.html"&gt;Quirks Mode&lt;/a&gt; has some good visuals&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/"&gt;Paul Irish&lt;/a&gt; talks about why border box is the winner&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/the-css-box-model/"&gt;CSS Tricks&lt;/a&gt; goes into more details and covers far more edge cases than I got to here&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: AMD and CommonJS</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-amd-commonjs/"/>
    <id>http://lucybain.com/blog/2015/js-amd-commonjs/</id>
    <published>2015-04-23T00:00:00Z</published>
    <updated>2015-09-19T18:09:20+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What’s the difference between AMD and CommonJS?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m only going to talk about how this impacts the browser. I will not talk about Node.js, although I know it’s relevant to this discussion. I don’t know enough about Node.js to cover it properly. Ok, let’s get to it!&lt;/p&gt;

&lt;p&gt;To start off, let’s talk about their similarities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What problem are they trying to solve?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Typcially JS relies on having &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the right order in the HTML. This can often lead to confusion and ordering mistakes. Beyond that, some people prefer to have all their JS compiled into one massive file. This is convenient since they have complete control on ordering and don’t need to rely on &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. However it means all JS gets loaded on each page, which isn’t very performant.&lt;/p&gt;

&lt;p&gt;Both AMD and CommonJS are a way of linking JS bits of code, called modules, together. They are a way of defining which modules rely on which other modules so a computer can decide the best way to link everything together, rather than relying on error-prone coders.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do they solve that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both AMD and CommonJS provide standards for other libraries to implement. There are quite a few libraries that have done just that (&lt;a href="http://requirejs.org/"&gt;RequireJS&lt;/a&gt; and &lt;a href="https://github.com/jrburke/almond"&gt;Almond&lt;/a&gt; are two that implement AMD). But you “use” AMD or CommonJS code any more than you can “use” object oriented code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so that’s how they&amp;#39;re similar. How are they different?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at each one individually. We&amp;#39;ll start with AMD:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does “AMD” stand for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AMD stands for &lt;strong&gt;A&lt;/strong&gt;synchronous &lt;strong&gt;M&lt;/strong&gt;odule &lt;strong&gt;D&lt;/strong&gt;efinition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And what makes it special?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The “module” part should be clear enough since both CommonJS and AMD focus on linking modules together. And the “definition” part is about how it’s a standard, rather than a library. However a key difference for AMD is the “asynchronous” bit. AMD loads each distinct module asynchronously for web performance. Instead of having one &lt;em&gt;giant&lt;/em&gt; file with everything in it which causes a slow load time, you can load only the files you need, only when you need them, all asynchronously. Slick, huh?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So then what’s special about CommonJS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CommonJS loads modules synchronously. My understanding is that this is better for server-side (Node.js) development. Again, CommonJS is a standard but it focuses more on JS out of the browser than AMD.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s it? Async vs. Sync?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sort of. Of course the syntax for both is different too. Let’s look at how to use each.&lt;/p&gt;

&lt;h2&gt;Syntax&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CommonJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll start with CommonJS since it’s a bit easier to read.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 1: math module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// math.js
var module = {
  add: function(x, y) {
    return x + y;
  },
  subtract: function(x, y) {
    return x - y;
  },
  multiply: function(x, y) {
    return x * y;
  },
  divide: function(x, y) {
    return x / y;
  }
};
export.math = module; // export is a commonJS specific method
                      // export returns what’s publicly available
                      // the "math" gives the name of the module
&lt;/pre&gt;
&lt;p&gt;This code doesn’t output anything, but when we require the &lt;code&gt;math&lt;/code&gt; module we&amp;#39;ll have access to everything in the returned &lt;code&gt;module&lt;/code&gt; object (namely &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;multiply&lt;/code&gt;, and &lt;code&gt;divide&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 2: stats module&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alright, now we&amp;#39;ve created a module, we can require it in another module.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// stats.js
var math = require('math');

var module = {
  average: function(x, y) {
    var sum = math.add(x, y);
    return math.divide(sum, 2);
  }
};
export.stats = module; // export is a commonJS specific method
                       // export returns what’s publicly available
                       // the "stats" gives the name of the module
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Part 3: get output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ve got two modules, we can use them to get output.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var math = require('math');
var stats = require(’stats');
console.log(math.add(1, 2)) // logs "3"
console.log(stats.average(0, 4)) // logs "2"
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;AMD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll go through exactly the same example, but this time implement it with AMD.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 1: math module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;define( // AMD specific method used to define a module
  'math', // name of the module (this is optional)
  // Note: no dependencies (they're optional)
  function() {
    var module = {
      add: function(x, y) {
        return x + y;
      },
      subtract: function(x, y) {
        return x - y;
      },
      multiply: function(x, y) {
        return x * y;
      },
      divide: function(x, y) {
        return x / y;
      }
    };
    return module; // returns what’s publicly available
});
&lt;/pre&gt;
&lt;p&gt;As with CommonJS, this code doesn’t output anything.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 2: stats module&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;define( // AMD specific method used to define a module
  ’stats', // name of the module (this is optional)
  ['math'], // dependency, same name as module above
            // it’s an array since there can be more than one
  function() {
    var module = {
      average: function(x, y) {
        var sum = math.add(x, y);
        return math.divide(sum, 2);
      }
    };
    return module; // returns what’s publicly available
});
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Part 3: get output&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;require( // AMD specific method to run code
  // Note: no name, require doesn't support names
  ['math', ’stats'], // dependencies
  function(math, stats) {
    console.log(math.add(1, 2)) // logs "3"
    console.log(stats.average(0, 4)) // logs "2"
});
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs"&gt;Relation between CommonJS, AMD and RequireJS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RequireJS on &lt;a href="http://requirejs.org/docs/whyamd.html"&gt;AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0fps.net/2013/01/22/commonjs-why-and-how/"&gt;About CommonJS&lt;/a&gt; and using it on the browser&lt;/li&gt;
&lt;li&gt;&lt;a href="http://addyosmani.com/writing-modular-js/"&gt;About AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A bit about &lt;a href="http://blog.millermedeiros.com/amd-is-better-for-the-web-than-commonjs-modules/"&gt;CommonJS vs. AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A little history about the &lt;a href="http://www.cubrid.org/blog/dev-platform/toward-javascript-standards-commonjs-and-amd/"&gt;development of both&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Rails Girls event manager</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/rails-girls-event-manager/"/>
    <id>http://lucybain.com/blog/2015/rails-girls-event-manager/</id>
    <published>2015-04-09T00:00:00Z</published>
    <updated>2015-09-19T18:09:27+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;I’m looking for something that Rails Girls could use to manage our events, particularly user sign ups. In the past we&amp;#39;ve cobbled together something from various sites. Those sites are good on their own, but the whole system is pretty flimsy and I’m afraid someone might fall through the cracks. So I’m asking you for suggestions, but we&amp;#39;ve got some fairly specific requests... Here’s what we&amp;#39;re looking for:&lt;/p&gt;

&lt;p&gt;Required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When people “sign up” it’s really an application to attend - they are not issued a ticket&lt;/li&gt;
&lt;li&gt;We can send custom emails to people when they are accepted, as well as before the event&lt;/li&gt;
&lt;li&gt;Free, or maybe willing to be free for a non-profit (we&amp;#39;re happy to list them as sponsors)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perfered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up form allows for custom fields&lt;/li&gt;
&lt;li&gt;There is a “notes” (or similar) section for each applicant/attendee, or we can easily create one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track attendance at the event&lt;/li&gt;
&lt;li&gt;Support for multiple (or at least two) tracks (Rails Girls and Rails Girls Next, ideally mentors as well)&lt;/li&gt;
&lt;li&gt;Keep history on people between events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything else that’s used for event management - tracking caterers, receipts, sponsors, to do lists, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that’s a fairly long list. I&amp;#39;ve looked around at a few, but haven’t found anything that meets our needs yet, so I’m reaching out to ask if you know of any such product.&lt;/p&gt;

&lt;p&gt;Yes, I know we &lt;em&gt;could&lt;/em&gt; build it ourselves. I’m sure that&amp;#39;ll have a fair bit of upkeep and I’m keen to keep our involvement to a minimum. (But hey, if you want to build it, you know you&amp;#39;ll have at least one (non-paying) customer!)&lt;/p&gt;

&lt;p&gt;Please let us know if you have any suggestions.&lt;/p&gt;

&lt;p&gt;Thanks!
Lucy and the Rails Girls Sydney team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: How can you accept optional parameters?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-optional-parameters/"/>
    <id>http://lucybain.com/blog/2015/js-optional-parameters/</id>
    <published>2015-04-03T00:00:00Z</published>
    <updated>2015-09-19T18:03:47+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There’s more than one way to skin a cat, and there’s more than one way to accept optional parameters. (Editors note: I do not condone skinning cats!)&lt;/p&gt;

&lt;h2&gt;Object&lt;/h2&gt;

&lt;p&gt;Coming from a Ruby background, I find this option the most intuitive. You can create an object of your optional parameters, it&amp;#39;d look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var params = {
    size: ’small',
    color: 'red'
};

function carSentence(optionalParams) {
    var size = optionalParams.size;
    var color = optionalParams.color;
    var speed = optionalParams.speed;
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence(params);
// logs "My favourite car is a small sized red one that goes "
&lt;/pre&gt;
&lt;p&gt;As you can see I didn’t supply the &lt;code&gt;speed&lt;/code&gt; parameter in my &lt;code&gt;params&lt;/code&gt; object, but the &lt;code&gt;carSentence&lt;/code&gt; function still worked. So &lt;code&gt;speed&lt;/code&gt; was an optional parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But &lt;code&gt;optionalParams&lt;/code&gt; was still required&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yep, you caught me! This isn’t really what people usually mean by “optional” parameters. But I did want to throw it out there as a possibility. I think it’s an underrated option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if I wanted a default speed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;optionalParams&lt;/code&gt; didn’t define a value for &lt;code&gt;speed&lt;/code&gt;, but the sentence expected &lt;code&gt;speed&lt;/code&gt; to be defined. In this case you can give a default value for the variable (such as &lt;code&gt;&amp;quot;fast&amp;quot;&lt;/code&gt;). It’s tempting to do this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var speed = optionalParams.speed || "fast";
&lt;/pre&gt;
&lt;p&gt;but this won’t work when &lt;code&gt;optionalParams.speed&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The better way to handle it is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var speed;
if (typeof optionalParams.speed !== 'undefined') {
    speed = optionalParams.speed;
} else {
    speed = "fast";
}
&lt;/pre&gt;
&lt;p&gt;however that’s quite wordy. You can cut it down with a &lt;a href="/blog/2014/js-ternary/"&gt;ternary&lt;/a&gt;, or make a &lt;code&gt;givenOrDefault&lt;/code&gt; method (hopefully with a better name!).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function givenOrDefault(given, default) {
    if (typeof given !== 'undefined') {
        return given;
    } else {
        return default;
    }
}
&lt;/pre&gt;
&lt;p&gt;Thus our example becomes:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var params = {
    size: ’small',
    color: 'red'
};

function carSentence(optionalParams) {
    var size = givenOrDefault(optionalParams.size, "medium");
    var color = givenOrDefault(optionalParams.color, "blue");
    var speed = givenOrDefault(optionalParams.speed, "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence(params);
// logs "My favourite car is a small sized red one that goes fast"
&lt;/pre&gt;
&lt;h2&gt;Missing parameters&lt;/h2&gt;

&lt;p&gt;Another method of dealing with optional parameters is to simply allow them to be missing.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function carSentence(size, color, speed) {
    size = givenOrDefault(size, "medium");
    color = givenOrDefault(color, "blue");
    speed = givenOrDefault(speed, "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence("medium", "blue");
// logs "My favourite car is a medium sized blue one that goes fast"
&lt;/pre&gt;
&lt;p&gt;This way of dealing with optional parameters works well if people won’t bother trying to extend it past the limit. However, not all functions meet this requirement, consider the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function add(a, b, c) {
    a = a || 0;
    b = b || 0;
    c = c || 0;
    return a + b + c;
}

add(1, 2); // returns 3
add(1, 2, 3); // returns 6
add(1, undefined, 3); // returns 4
&lt;/pre&gt;
&lt;p&gt;It kinda works. It&amp;#39;ll fall over if you try &lt;code&gt;add(1, 2, 3, 4)&lt;/code&gt; which returns 6 rather than 10.&lt;/p&gt;

&lt;h2&gt;arguments&lt;/h2&gt;

&lt;p&gt;Finally we come to the &lt;code&gt;arguments&lt;/code&gt; keyword. it looks like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function carSentence() {
    size = givenOrDefault(arguments[0], "medium");
    color = givenOrDefault(arguments[1], "blue");
    speed = givenOrDefault(arguments[2], "fast");
    console.log("My favourite car is a " + size +
                " sized " + color + " one that goes " + speed);
}
carSentence("medium", "blue");
// logs "My favourite car is a medium sized blue one that goes fast"
&lt;/pre&gt;
&lt;p&gt;or like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function add() {
    var sum = 0;
    var index = 0;

    while(index &amp;lt; arguments.length) {
        if(typeof arguments[index] !== 'undefined') {
            sum = sum + arguments[index];
        }
        index++;
    }
    return sum;
}

add(1, 2); // returns 3
add(1, 2, 3); // returns 6
add(1, undefined, 3); // returns 4
add(1, 2, 3, 4); // returns 10
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What is this black magic?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well it turns out &lt;code&gt;arguments&lt;/code&gt; is a secret variable available in all functions that gives a list of the parameters passed to that function. It’s a little bonus JS throws in free of charge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So it’s an array of all the params&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Almost. It’s not quite an array. It’s like a kiddy array - hasn’t got all the functionality just yet. If you want to use it for access only (as in the example above), then you&amp;#39;re all good. But if you want to do interesting manipulations, &lt;code&gt;pop&lt;/code&gt; things off, or reorder items, then you need to convert &lt;code&gt;arguments&lt;/code&gt; to a full array:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var temp = Array.slice(arguments);
&lt;/pre&gt;
&lt;p&gt;I assume the reason for this is to make &lt;code&gt;arguments&lt;/code&gt; read only, although I haven’t researched that.&lt;/p&gt;

&lt;p&gt;And there you have it - three ways to handle optional parameters in JavaScript.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/148901/is-there-a-better-way-to-do-optional-function-parameters-in-javascript"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.markhansen.co.nz/javascript-optional-parameters/"&gt;Mark Hansen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"&gt;Arguments&lt;/a&gt; official&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascriptweblog.wordpress.com/2011/01/18/javascripts-arguments-object-and-beyond/"&gt;Arguments&lt;/a&gt; this one is more entertaining&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>In programming, what is an object?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/in-programming-what-is-an-object/"/>
    <id>http://lucybain.com/blog/2015/in-programming-what-is-an-object/</id>
    <published>2015-03-26T00:00:00Z</published>
    <updated>2015-09-19T17:57:32+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As promissed in my last blog post: intro to objects.&lt;/p&gt;

&lt;h2&gt;Objects&lt;/h2&gt;

&lt;p&gt;Many languages have the concept of an “object.” It’s a way of organising code based around objects (things) with similar characteristics. As in, most dogs have four legs, most cars can drive forward, most houses have doors. Templates (often called Classes) are used to create objects. These templates come with empty fields (like a form), and sometimes with default values as well (such as four legs). So it could look something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;As you can see some fields (name and gender) are left blank, and some (arms and legs) have a default value associated. Again, this is a template, these values are assigned for each object (often called “instance of the class”). Mine would look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: _Lucy_
Gender: _Female_
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;But objects hold more than just fields of information; they can also hold actions! Let’s build on our Human class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
Laugh: say "hahaha!"
Run: move your legs quickly
&lt;/pre&gt;
&lt;p&gt;So you can see the Human template now has two actions associated with it (laugh and run). Here’s the great part about objects: those actions are shared! I only have to write the method &lt;em&gt;once&lt;/em&gt; and all humans can now laugh and run. Pretty slick, huh?&lt;/p&gt;

&lt;p&gt;So a &lt;strong&gt;class&lt;/strong&gt; is a template of fields (variables) and actions (methods). Each &lt;strong&gt;object&lt;/strong&gt; fills out the template with it’s particular information. This is how you can write code like &lt;code&gt;me.name&lt;/code&gt; - the &lt;code&gt;me&lt;/code&gt; object has a &lt;code&gt;name&lt;/code&gt; field that keeps track of &lt;code&gt;me&lt;/code&gt;’s name. It’s also how you can write:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;fido.bark();
buddy.bark();
buster.bark();
princess.bark();
&lt;/pre&gt;
&lt;p&gt;but only need to implement the &lt;code&gt;bark&lt;/code&gt; action on the &lt;code&gt;Dog&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object Oriented Programming&lt;/strong&gt; is a way of organising your code into these objects for ease of use, readability, and understanding. It’s not the only &lt;a href="http://upload.wikimedia.org/wikipedia/commons/f/f7/Programming_paradigms.svg"&gt;programming paradigm&lt;/a&gt;, but it’s been popular over the years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/lii0o/eli5_what_do_it_programmer_developer_people_mean/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/j4dmq/eli5_what_is_objectoriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Still more &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/syjy3/can_someone_explain_object_oriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: What datatypes are supported in Javascript?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-data-types/"/>
    <id>http://lucybain.com/blog/2015/js-data-types/</id>
    <published>2015-03-22T00:00:00Z</published>
    <updated>2015-09-19T18:03:51+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;According to the latest &lt;a href="http://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; release, these are the data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let’s run over those one by one:&lt;/p&gt;

&lt;h3&gt;Boolean&lt;/h3&gt;

&lt;p&gt;Pretty standard across all languages, booleans are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. They&amp;#39;re often used for conditional statements.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var raining = false;
if(raining) {
  bringUmbrella();
}
&lt;/pre&gt;
&lt;h3&gt;Null and Undefined&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve &lt;a href="/blog/2014/null-undefined-undeclared/"&gt;written&lt;/a&gt; about these before, so give that a read :)&lt;/p&gt;

&lt;h3&gt;Number&lt;/h3&gt;

&lt;p&gt;Things start to get more interesting here. The number data type covers integers and floats. That is, the &lt;code&gt;number&lt;/code&gt; type can handle normal numbers (1, 2, 3, 4), but also negative numbers and decimal places. This is different from many languages that have multiple data types to support different numbers.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var num = 1;
typeof num; // number

var num = -2;
typeof num; // number

var num = 0.3;
typeof num; // number
&lt;/pre&gt;
&lt;h3&gt;String&lt;/h3&gt;

&lt;p&gt;As in most languages, JS strings are groupings of characters.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"hello world";
"I like cats";
'Testing "quotes';
&lt;/pre&gt;
&lt;p&gt;I don’t think they&amp;#39;re particularly interesting, but they are remarkably powerful. The main way we communicate with our users is the written word and &lt;code&gt;string&lt;/code&gt; makes this possible.&lt;/p&gt;

&lt;h3&gt;Symbol&lt;/h3&gt;

&lt;p&gt;This is new in ECMAScript 6; check the &lt;a href="https://kangax.github.io/compat-table/es6/#Symbol"&gt;browser support&lt;/a&gt; before you use it.&lt;/p&gt;

&lt;p&gt;Symbols allow for private(ish) properties on objects. Before ECMAScript 6 all properties for an object could be accessed through &lt;code&gt;for in&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var dog = { bark: true }

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark"
  }
}
&lt;/pre&gt;
&lt;p&gt;Since symbols are not enumerable they cannot be accessed in this way. However, the symbolised properties are not truly private since they can be accessed directly.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var breed = Symbol("breed");
var dog = { bark: true };
dog[breed] = "Corgi";

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark", but not "breed"
  }
}
console.log(dog[breed]); // logs "Corgi"
&lt;/pre&gt;
&lt;h3&gt;Object&lt;/h3&gt;

&lt;p&gt;Everything in JS that we didn’t discuss above is an Object. So objects are the most complex data type; I&amp;#39;ll dedicate a future post to them since it’s a lot to cover here. But you&amp;#39;ve probably worked with objects in the past. They typically look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var cat = { sound: "meow" };

var fluffy = new Cat();

var whiskers = new function() {
    this.sound = "meow";
}
&lt;/pre&gt;
&lt;p&gt;But notice that we haven’t mentioned &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, or even &lt;code&gt;function&lt;/code&gt; that’s because, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#.22Normal.22_objects.2C_and_functions"&gt;officially&lt;/a&gt;, they&amp;#39;re all of type &lt;code&gt;object&lt;/code&gt;. Pretty crazy, huh?&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/understandinges6/read/#leanpub-auto-symbols"&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
