<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2017-02-21T11:00:00+11:00</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Goal setting and tracking</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/goals/"/>
    <id>http://lucybain.com/blog/2017/goals/</id>
    <published>2017-02-21T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We’re almost two months down in 2017. How are those New Year’s resolutions going? I’ll fully admit that I’m terrible about keeping up with things like that. But I’m working at getting better. This framework has helped me stay on target for a few things at work and in my personal life, I hope it helps you too!&lt;/p&gt;

&lt;h2&gt;What’s a medium- to long-term aspiration?&lt;/h2&gt;

&lt;p&gt;To start with, you need something big to work towards. Maybe you want to get promoted. Or you’d like to start a new business. Perhaps you’re looking to become a great public speaker. Or something else altogether.&lt;/p&gt;

&lt;p&gt;Whatever it is this aspiration is something you’ve been thinking about for a while and you’re ready to make some serious strides in that direction.&lt;/p&gt;

&lt;p&gt;For the purposes of this exercise I’m going to assume your aspiration is something along the lines of “become a better developer.” But the general steps will hold for even quite unrelated topics (like become a yoga instructor - one of my aspirations).&lt;/p&gt;

&lt;h2&gt;How do you stack up?&lt;/h2&gt;

&lt;p&gt;Where are you now vs. where you do you want to be? You should know which areas you need to improve in before you can start intentionally improving. Take some time to realistically assess where you think your weaknesses are. How do you honestly think you stack up?&lt;/p&gt;

&lt;p&gt;After you’ve done that, get some outside opinions by talking to people:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask your boss. Hopefully your boss has some ideas around where you need to improve, and possibly has specific ideas about &lt;em&gt;how&lt;/em&gt; to improve in that area. A few days before your next one-on-one tell you boss you’re thinking about goals and would like some input about areas and techniques you can use. Asking in advance means your boss isn’t put on the spot, but has some time to think through a good answer. Then make sure to actually bring it up in your one-on-one!&lt;/li&gt;
&lt;li&gt;Ask team members who review your pull requests. These people are reading your code all the time. Perhaps they’ve seen you make the same mistake a few times. Or maybe they can see your code always has one style to it, so maybe you should explore other ways of doing things.&lt;/li&gt;
&lt;li&gt;Ask anonymously. Some companies (such as Atlassian) have a system for you to ask for anonymous feedback. This feedback tends not to be as useful since you usually want to follow up, but can help guide your thoughts and questions you ask other people. This can be a better solution if you’re more senior as your less experienced co-workers might feel weird giving you feedback directly.&lt;/li&gt;
&lt;li&gt;Ask for “soft” skills as well. When one programmer asks another programmer how they can get better at programming, the answers tend to be about... programming. That’s often a good thing, and asking people knowledgeable in your field gives you specific things to work on. However, as a programmer, you’re not actually programming all the time. You use soft skills in your work, so be aware about how you can get better at those as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How can you level up?&lt;/h2&gt;

&lt;p&gt;There are a bunch of ways to get better at programming. There’s a long discussion about it on StackExchagne: &lt;a href="http://softwareengineering.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skil"&gt;What is the single most effective thing you did to improve your programming skills?&lt;/a&gt;. This is the highest voted question under “self-improvement” so it’s clearly a topic people have put a lot of thought into. Here are a few of my suggestions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read X, Y, Z books (possibly generic programming books like &lt;a href="https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670"&gt;Code Complete&lt;/a&gt;, or maybe something more specific to do with your language and situation). The important part here is that the list is predefined and you put thought into each of the titles.&lt;/li&gt;
&lt;li&gt;Read blog posts about new tech (hopefully others in your company can recommend particular authors)&lt;/li&gt;
&lt;li&gt;Pair with more senior developers&lt;/li&gt;
&lt;li&gt;Work on side project (if possible have some specific learning goals, but even if you don’t you’ll certainly find some road blocks to get through!)&lt;/li&gt;
&lt;li&gt;Do programming exercises to learn about X&lt;/li&gt;
&lt;li&gt;Go to meetup groups to see case studies of problems&lt;/li&gt;
&lt;li&gt;Have coffee with someone you respect and ask them how they improve&lt;/li&gt;
&lt;li&gt;Ask the people you meet with from “How do you stack up” if they have ideas how to get better&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully that’s enough to get you started, but you should come up with a few ideas on your own as well.&lt;/p&gt;

&lt;p&gt;Once you’ve got a good list to choose from pick the top four or five most impactful actions to improve. Don’t try to do everything, instead focus your time where you’ll get the most value.&lt;/p&gt;

&lt;h2&gt;Set some goals&lt;/h2&gt;

&lt;p&gt;Goals should be SMART:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S - specific and stretching&lt;/li&gt;
&lt;li&gt;M - measurable&lt;/li&gt;
&lt;li&gt;A - attainable&lt;/li&gt;
&lt;li&gt;R - relevant&lt;/li&gt;
&lt;li&gt;T - time-based&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s break these down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;specific&lt;/em&gt; - you should be able to explain your goal clearly to someone else and they should know what you’re going to do: “be a better developer” vs. “read X book”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;stretching&lt;/em&gt; - the goal should push you out of your comfort zone a little: “write Hello World” vs. “implement bubble sort”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;measurable&lt;/em&gt; - it should be clear if you succeeded or failed: “learn more about Y” vs. “give a talk on Y”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;attainable&lt;/em&gt; - it’s actually feasible for you to complete this goal: “have coffee with 100 people this month” vs. “have coffee with five people this month”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;relevant&lt;/em&gt; - completing this goal should excite you since it’s moving you towards your aspiration: “learning underwater basket weaving” vs. “completing the Ruby Koans”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;time-based&lt;/em&gt; - there’s a clear cut off date when you can evaluate success or failure: “read X book” vs. “read X book by March 23”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So “be a better developer” is a badly worded goal, but “Read book about X by Y date, and publish a blog post about it with a summary and personal insights and examples a week after” is a SMART goal.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look over the “top four or five most impactful actions to improve” from you came up with from the previous section. Convert each of these actions into a SMART goal.&lt;/li&gt;
&lt;li&gt;It’s probably not &lt;em&gt;attainable&lt;/em&gt; for you to do all five of those goals. Instead pick 1-3 of your SMART goals to work on over the next month. The time frame is flexible, but give yourself a hard deadline, ideally shorter rather than longer.&lt;/li&gt;
&lt;li&gt;During the month check to see how you’re doing with each of your goals. At the end of the month review, repeat, and adjust as needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Stay accountable&lt;/h2&gt;

&lt;p&gt;There are a few ways to do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use an app to see when you did (or didn’t) do your assigned task. I use &lt;a href="https://play.google.com/store/apps/details?id=org.isoron.uhabits&amp;amp;hl=en"&gt;Loop - Habit Tracker&lt;/a&gt;, but it’s only on Android.&lt;/li&gt;
&lt;li&gt;Pay money when you’ve fallen off the wagon. I use &lt;a href="https://www.beeminder.com/"&gt;Beeminder&lt;/a&gt; to give that extra “sting” for not sticking with your goals.&lt;/li&gt;
&lt;li&gt;Have an accountability buddy - meet with someone (ideally who’s got the same goal) to see how you’re both tracking.&lt;/li&gt;
&lt;li&gt;Track yourself. Certainly the easiest one, but only works if you’re honest with yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important thing is to notice when you’re not meeting your goals and ask why: Was the goal too big? (not attainable) Do you feel the goal won’t ultimately help you reach your long term goal? (not meaningful) etc.&lt;/p&gt;

&lt;p&gt;Ask yourself what needs to change for you to continue towards your aspiration. Keep coming back to these questions as you work on your goals. Remember, you’re using goals as stepping stones towards your aspiration. It doesn’t matter if the goals change, so long as you’re making progress.&lt;/p&gt;

&lt;h2&gt;General tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I find it easier to work on things little and often (read a blog post each day, watch a tutorial on youtube once a week, etc).&lt;/li&gt;
&lt;li&gt;Tell your boss about your goals. This gives you some accountability (they can ask you about your goal in your next one-on-one) as well as letting them know you’re working on improving. Remember, your boss can’t give you points for something they don&amp;#39;t know you’re doing!&lt;/li&gt;
&lt;li&gt;Talk to other people about their goals. I get a lot of ideas from how other people are working towards their long term goals. Chances are there are a lot of people in your workplace who want to “become a better developer”, so use that resource.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>How does React decide to re-render a component?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/react-js-when-to-rerender/"/>
    <id>http://lucybain.com/blog/2017/react-js-when-to-rerender/</id>
    <published>2017-02-08T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;React is known for it’s performance. Because it has a virtual DOM and only updates the real DOM when required it can be much faster than updating the DOM all the time, even to display the same information. However, React’s “smarts” only go so far (at the moment!), and it’s our job to know it’s expectations and limitations so we don’t accidentally hurt performance.&lt;/p&gt;

&lt;p&gt;One of the aspects we need to be aware of is how React decides when to re-render a component. Not as in “update the DOM render,” but just to call the &lt;code&gt;render&lt;/code&gt; method to change the virtual DOM. We can help React out by telling it when it should and shouldn’t render. Let’s look at both of those in turn...&lt;/p&gt;

&lt;h2&gt;1. The component’s state changes&lt;/h2&gt;

&lt;p&gt;A re-render can only be triggered if a component’s state has changed. The state can change from a &lt;code&gt;props&lt;/code&gt; change, or from a direct &lt;code&gt;setState&lt;/code&gt; change. The component gets the updated state and React decides if it should re-render the component. Unfortunately, by default React is incredibly simplistic and basically re-renders everything all the time.&lt;/p&gt;

&lt;p&gt;Component changed? Re-render. Parent changed? Re-render. Section of props that doesn&amp;#39;t actually impact the view changed? Re-render.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;class Todo extends React.Component {

    componentDidMount() {
        setInterval(() =&amp;gt; {
            this.setState(() =&amp;gt; {
                console.log('setting state');
                return { unseen: "does not display" }
            });
        }, 1000);
    }

    render() {
        console.log('render called');
        return (&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this (massively contrived) example the &lt;code&gt;Todo&lt;/code&gt; will re-render every second, even though the &lt;code&gt;render&lt;/code&gt; method doesn’t use &lt;code&gt;unseen&lt;/code&gt; at all. In fact, &lt;code&gt;unseen&lt;/code&gt; doesn’t even change it’s value! You can check out a working version of this on &lt;a href="https://codepen.io/lbain/pen/MJNpwL"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, but re-rendering all the time isn’t helpful...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I mean, I appreciate that React is being super careful. It would be worse if the state changed and the component &lt;em&gt;didn’t&lt;/em&gt; render when it was supposed to. How would I know about that new message my friend sent me?! I’d miss it, so she’d probably assume it was intentional, then she’d stop talking to me, and the whole friendship would be ruined. All for the want of a little green dot not re-rendering. High stakes. Re-rendering is definitely the safe option.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But re-rendering seems expensive (and your example is melodramatic)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, re-rendering unnecessarily does waste cycles and is generally not a good idea. However, React can’t “just know” when it’s safe to ignore parts of the state. So it plays it safe and re-renders whenever there’s a change to the state, important or not.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can we tell React to skip re-rendering?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well that brings us nicely to point two...&lt;/p&gt;

&lt;h2&gt;2. &lt;code&gt;shouldComponentUpdate&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;By default, &lt;code&gt;shouldComponentUpdate&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. That’s what causes the “update everything all the time” we saw above. However, you can overwrite &lt;code&gt;shouldComponentUpdate&lt;/code&gt; to give it more “smarts” if you need the performance boost. Instead of letting React re-render all the time, you can tell React when you &lt;em&gt;don’t&lt;/em&gt; want to trigger a re-render.&lt;/p&gt;

&lt;p&gt;When React comes to render the component it will run &lt;code&gt;shouldComponentUpdate&lt;/code&gt; and see if it returns &lt;code&gt;true&lt;/code&gt; (the component should update, a.k.a. re-render) or &lt;code&gt;false&lt;/code&gt; (React can skip the re-render this time). So you’ll need to overwrite &lt;code&gt;shouldComponentUpdate&lt;/code&gt; to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as needed to tell React when to re-render and when to skip.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;shouldComponentUpdate&lt;/code&gt; you’ll need to decide which bits of data actually matter for the re-render. Let’s go back to our example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;class Todo extends React.Component {

    componentDidMount() {
        setInterval(() =&amp;gt; {
            this.setState(() =&amp;gt; {
                console.log('setting state');
                return { unseen: "does not display" }
            });
        }, 1000);
    }

    shouldComponentUpdate(nextProps) {
        const differentTitle = this.props.title !== nextProps.title;
        const differentDone = this.props.done !== nextProps.done
        return differentTitle || differentDone;
    }

    render() {
        console.log('render called');
        return (&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;);
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we only want to re-render the Todo if the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;done&lt;/code&gt; attributes have changed. We don’t care if &lt;code&gt;unseen&lt;/code&gt; has changed, so we don’t include it in &lt;code&gt;shouldComponentUpdate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When React comes to render a Todo component (as triggered by the &lt;code&gt;setState&lt;/code&gt;) it will first check if the state has changed (via the &lt;code&gt;props&lt;/code&gt; or &lt;code&gt;state&lt;/code&gt;). Assuming the state is different (which it will be because we made an explicit &lt;code&gt;setState&lt;/code&gt; call) React will check the &lt;code&gt;shouldComponentUpdate&lt;/code&gt; on the Todo component. React will evaluate if &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is true or false, and decide to render from there.&lt;/p&gt;

&lt;p&gt;With this updated code the &lt;code&gt;setState&lt;/code&gt; will still be called every second, but the &lt;code&gt;render&lt;/code&gt; will only happen on the initial load (or when the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;done&lt;/code&gt; properties change). You can see this happening &lt;a href="https://codepen.io/lbain/pen/qReraZ"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Seems like a lot of work to define all that...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It can be. This example is especially verbose because there are two properties we care about (&lt;code&gt;title&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;) and only one we are happy to ignore (&lt;code&gt;unseen&lt;/code&gt;). Depending on your data it might make more sense to check for just one or two properties and ignore a whole bunch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Returning false does not prevent child components from re-rendering when &lt;em&gt;their&lt;/em&gt; state changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Facebook&amp;#39;s &lt;a href="https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate"&gt;React docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This applies to the children’s &lt;code&gt;state&lt;/code&gt; but not their &lt;code&gt;props&lt;/code&gt;. So if a child component is internally managing some aspect of it’s state (with a &lt;code&gt;setState&lt;/code&gt; of it’s own), that will still be updated. But if the parent component returns &lt;code&gt;false&lt;/code&gt; from &lt;code&gt;shouldComponentUpdate&lt;/code&gt; it will not pass the updated &lt;code&gt;props&lt;/code&gt; along to it’s children, and so the children will not re-render, even if their &lt;code&gt;props&lt;/code&gt; had updated.&lt;/p&gt;

&lt;h2&gt;Bonus: simple performance testing&lt;/h2&gt;

&lt;p&gt;Writing and running computations in &lt;code&gt;shouldComponentUpdate&lt;/code&gt; can be expensive so you should to make sure they’re worth the time. Before writing any &lt;code&gt;shouldComponentUpdate&lt;/code&gt;s you can check how many wasted cycles React does by default. With this information to guide you, you can make informed decisions about which components are re-rendering too often and causing performance problems.&lt;/p&gt;

&lt;p&gt;Use React’s &lt;a href="https://facebook.github.io/react/docs/perf.html"&gt;Performance Tools&lt;/a&gt; to find wasted cycles:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;Perf.start()
// Do the render
Perf.stop()
Perf.printWasted()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which components wasted a lot of render cycles? How can you make them smarter with &lt;code&gt;shouldComponentUpdate&lt;/code&gt;? Try some ways and be sure to check them against each other with the performance tools!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;Many thanks to my co-worker &lt;a href="https://twitter.com/MarcinS"&gt;Marcin&lt;/a&gt; for explaining how React makes these decisions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React’s docs on &lt;a href="https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate"&gt;shouldComponentUpdate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React’s &lt;a href="https://facebook.github.io/react/docs/perf.html"&gt;Performance Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Article on &lt;a href="http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html"&gt;object equality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Promises/A+, jQuery Deferreds, and errors</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/js-promises-errors-a-plus-vs-deferreds/"/>
    <id>http://lucybain.com/blog/2017/js-promises-errors-a-plus-vs-deferreds/</id>
    <published>2017-01-29T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As I said, I’m having difficulty understanding all the jargon associated with promises. This post is a continuation from &lt;a href="/blog/2016/js-promises-vs-deferred/"&gt;JS: promise and deferred&lt;/a&gt; and we’ll take a deeper look into how Promises and Deferreds handle errors. You can read about the &lt;a href="/blog/2017/js-promises-a-plus-jquery-history/"&gt;history&lt;/a&gt; of why these two exist, but we’re going to focus on the practical differences today.&lt;/p&gt;

&lt;p&gt;As a quick reminder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises/A+ is a &lt;a href="https://promisesaplus.com/"&gt;specification&lt;/a&gt; for how promises should work. Many &lt;a href="https://github.com/promises-aplus/promises-spec/blob/master/implementations.md"&gt;libraries&lt;/a&gt; implement this specification, but not all. You can test a library with the &lt;a href="https://github.com/promises-aplus/promises-tests"&gt;test suite&lt;/a&gt; to find if it is compliant.&lt;/li&gt;
&lt;li&gt;Deferred is jQuery’s implementation of the concept of promises. Deferreds are not Promises/A+ compliant (the specification came after Deferreds).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The differences are fairly subtle (I didn’t notice them until a co-worker told me about them), but important to note and interesting to play with for a blog post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m not using asynchronous code in my because it make the examples more complicated and the logic harder to see. The examples below wouldn’t work the same way with async code (for example, &lt;code&gt;console.log&lt;/code&gt;), but they clarify the intent.&lt;/p&gt;

&lt;h2&gt;Promise’s state after an error&lt;/h2&gt;

&lt;h3&gt;Promises/A+&lt;/h3&gt;

&lt;p&gt;The specific rule from the specification we’ll look into is &lt;a href="https://promisesaplus.com/#point-55"&gt;2.3.3.2&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If retrieving the property x.then results in a thrown exception e, reject promise with e as the reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Yawn, in human please...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The bit we’re interested in reads like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If code from a promise results in an error, the promise &lt;em&gt;must&lt;/em&gt; be rejected. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Seems simple enough&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, nothing complicated (so far). Let’s look at a simple example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [[PromiseStatus]] : "resolved"&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [[PromiseStatus]] : "rejected"&lt;/span&gt;

&lt;span class="nx"&gt;errorPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this never runs because the promise was rejected&lt;/span&gt;
  &lt;span class="c1"&gt;// before getting to this code&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Never run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, &lt;code&gt;resolvedPromise&lt;/code&gt; settled to a “resolved” state and never threw an error. However &lt;code&gt;errorPromise&lt;/code&gt; did throw an error so it settled to a “rejected” state. Because of rules like this one, it is not possible for a Promises/A+ promise to settle in a “pending” state. &lt;strong&gt;If the promise has settled, the Promises/A+ spec guarantees that it has been resolved or rejected.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmmm, that last sentence is in bold, seems like it’s important.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, that’s the main thing we’re going to look into today.&lt;/p&gt;

&lt;h3&gt;jQuery’s Deferred&lt;/h3&gt;

&lt;p&gt;jQuery’s Deferred (their implementation of promises) is quite relaxed. It was written before the rules settled down, so it isn’t as picky.&lt;/p&gt;

&lt;p&gt;Again, let’s look at an example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "resolved"&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What’s the difference?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;errorDeferred&lt;/code&gt; threw an error, it has not settled, instead it’s state is still “pending”. There’s no way to know if &lt;code&gt;errorDeferred&lt;/code&gt; is pending because of an error, or because the promise is taking a long time to settle (e.g. an ajax request).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If the promise has settled, a Deferred can be pending, resolved, or rejected.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So the difference is that a Deferred will stay pending and a Promises/A+ compliant promise won’t?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, that’s what we’re looking at right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That doesn’t seem like a big difference...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like I said, I didn’t notice the difference until someone pointed it out to me. But the way the errors are handled is different as well. We’ll look at that next.&lt;/p&gt;

&lt;h2&gt;Handling errors from promises&lt;/h2&gt;

&lt;p&gt;Ok, so now we know what happens to these two types of promises when they encounter an error. But how do we handle the errors themselves?&lt;/p&gt;

&lt;h3&gt;Promises/A+&lt;/h3&gt;

&lt;p&gt;Errors thrown in a Promise need to be explicitly handled by the promise chain. They do not bubble up to the window. In fact, not all browsers will show you the error.&lt;/p&gt;

&lt;p&gt;Google Chrome (version 55.0.2883.95) does:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/chrome-with-error.png" alt="Google Chrome displays an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;But Firefox (version 47.0) does not:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/firefox-no-error.png" alt="Firefox (version 47.0) does not display an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;Although it seems browsers are moving towards supporting showing the error. Firefox (version 51.0.1) does show the error:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/firefox-with-error.png" alt="Firefox (version 51.0.1) displays an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, and should they display the error?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically not showing the error message is correct as the Promise doesn’t bubble the error out to the browser. (That said, being able to see the errors is very helpful for debugging.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so, practically speaking, how should I handle errors?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What all this means is that you cannot use a normal try/catch for errors thrown by Promises. Let’s try it anyways to see what happens:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This catch never gets triggered because the "Promise error"&lt;/span&gt;
  &lt;span class="c1"&gt;// isn't bubbled up this far&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Does not run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Alright, now we know what doesn’t work...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To actually handle the error we need to use a &lt;code&gt;catch&lt;/code&gt; on &lt;code&gt;errorPromise&lt;/code&gt;, so we’re explicitly handling the error directly on the promise.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the previous example to correctly catch the &lt;code&gt;Promise error&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Promise error]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Well that was easy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, I like the syntax too. It makes it really clear what error we’re catching, and looking back over the chain you can check where it might have come from.&lt;/p&gt;

&lt;p&gt;However, since errors thrown in a Promise don’t bubble up to the window you have to &lt;code&gt;catch&lt;/code&gt; errors everywhere. You aren’t guaranteed that an error like &lt;code&gt;undefined is not a function&lt;/code&gt;. As my co-worker put it, with Promises you “have to expect the unexpected everywhere.” All these &lt;code&gt;catch&lt;/code&gt;es can also get messy and complicated.&lt;/p&gt;

&lt;h3&gt;jQuery’s Deferred&lt;/h3&gt;

&lt;p&gt;On the other hand, an error thrown in a Deferred &lt;em&gt;will&lt;/em&gt; bubble up to the window and can be caught along the way. Which means we can rewrite our previous example to catch the error:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Deferred error]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll write it another way to reinforce the previous topic. Now we can see the settled state of each promise:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// triggers both promises to settle&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Deferred error]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "resolved"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you can see that &lt;code&gt;errorDeferred&lt;/code&gt; still has the “pending” state, even though the error has been caught and handled.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so using a normal try/catch works for Deferreds&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not really.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What?! You tricked me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m afraid I did. Remember at the beginning when I said my examples would use synchronous code to make things clearer? That’s what is making this example work. Since the &lt;code&gt;Deferred error&lt;/code&gt; is thrown right away (without waiting for any aysnc code to execute) the &lt;code&gt;catch&lt;/code&gt; happens right away too. It’s useful to prove the point that the &lt;code&gt;Deferred error&lt;/code&gt; bubbled up, but not so good for showing how to handle Deferred errors. Let’s write another example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "throw error"&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this never runs because the catch won’t be triggered&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Does not run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, now that we’re using async code the try/catch doesn’t work any more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great, another way not to do it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, yes. The thing is, jQuery doesn’t give us a way to catch errors thrown from Deferreds. It’s just not possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not possible! But this is programming, there must be a way!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, there is, upgrade to jQuery 3. While most of jQuery Deferred’s methods were defined by 1.12, one method, &lt;code&gt;catch&lt;/code&gt;, was recently added when jQuery 3.0 came out (which happened on June 9, 2016). This new &lt;code&gt;catch&lt;/code&gt; method means you can do the same kind of &lt;code&gt;catch&lt;/code&gt; as we did with the Promise earlier. Unfortunately &lt;a href="https://w3techs.com/technologies/details/js-jquery/all/all"&gt;very few&lt;/a&gt; websites are using jQuery 3 at the moment. Hopefully your site is one of them!&lt;/p&gt;

&lt;p&gt;Ok, let’s look at the example for using jQuery’s catch:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "throw error"&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [object Error] {}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we were able to &lt;code&gt;catch&lt;/code&gt; the error from the Deferred in the same way we caught the error from the Promise. However, after throwing the error &lt;code&gt;errorDeferred&lt;/code&gt; is left in a permanent “pending” state and will never settle to “rejected”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can we move &lt;code&gt;errorDeferred&lt;/code&gt; to be resolved?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we can’t; &lt;code&gt;errorDeferred&lt;/code&gt; is doomed to be “pending” forever. If you try to call &lt;code&gt;errorDeferred.resolve()&lt;/code&gt; you’ll get an error that &lt;code&gt;errorDeferred.resolve is not a function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This all sounds like bad news. Are there any upsides?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Remember earlier when we talked about Promises needing to explicitly &lt;code&gt;catch&lt;/code&gt; all their errors, and how that can be annoying? Well, since Deferreds do bubble up errors to the window we can handle any error with one function: &lt;code&gt;window.onerror&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s rewrite it one more time to see how this would work:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Logs out:&lt;/span&gt;
&lt;span class="c1"&gt;// "throw error" (from line 8)&lt;/span&gt;
&lt;span class="c1"&gt;// "Uncaught Error: Deferred error" (from line 2)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now any uncaught error will bubble up until it reaches the &lt;code&gt;onerror&lt;/code&gt; directly on the &lt;code&gt;window&lt;/code&gt;. From there our new function will log out the error. With one very small method we can see all the uncaught errors from every Deferred, rather than needing a &lt;code&gt;catch&lt;/code&gt; on each one of them. &lt;strong&gt;Warning:&lt;/strong&gt; the &lt;code&gt;onerror&lt;/code&gt; works for every uncaught error anywhere in your code, not only for errors in Deferreds; you might find more than you bargained for!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;And there you have it! Fairly small differences, but important ones. It might impact which promise implementation you decide on, and it will probably come up as you work with various libraries. It’s important to know if what you’re getting back is a Promise or a Deferred.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;Many thanks to my co-worker &lt;a href="https://twitter.com/typesthings"&gt;Adam&lt;/a&gt; for initially pointing out the differences and then also reviewing my post and correcting my mistakes!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://abdulapopoola.com/2014/12/12/the-differences-between-jquery-deferreds-and-the-promisesa-spec/"&gt;The Differences between jQuery Deferreds and the Promises/A+ spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;Deferred object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt2-practical-use"&gt;Promise &amp;amp; Deferred Objects in JavaScript Pt.2: in Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Presentation notes</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/public-speaking-notes/"/>
    <id>http://lucybain.com/blog/2017/public-speaking-notes/</id>
    <published>2017-01-12T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Way back in 2015 &lt;a href="http://yowconference.com.au/"&gt;YOW!&lt;/a&gt; granted me a ticket to a one day public speaking workshop. The workshop &lt;a href="https://www.eventbrite.com.au/e/yow-depthfirst-workshop-technical-presentation-with-damian-conway-tickets-15990610346"&gt;description&lt;/a&gt; had me a little uncertain (after all, I had never done any conference speaking before), but I signed up and took a leap of faith that &lt;a href="http://damian.conway.org/"&gt;Damian Conway&lt;/a&gt; would facilitate a workshop for people with a diverse range of skills so we would all benefit.&lt;/p&gt;

&lt;p&gt;Looking back, I am so glad I took the that leap. I’m incredibly grateful to YOW! for the ticket to attend such an impactful workshop. I’m also grateful to my (then new) boss who let me take the day off work with a day’s notice. It’s so much easier to succeed when you have such a great community behind you!&lt;/p&gt;

&lt;p&gt;Right after the workshop I wrote up my notes and shared them around with my fellow attendees. I always meant to publish those notes for others to reference (and to tidy them up for myself!) and now I’ve done it two years later. You can find the six page version of my notes &lt;a href="https://docs.google.com/document/d/1JKuTiGqGKXTi6urFySVc7WqplWRzpbXTWVz7aUyZm8o/edit?usp=sharing"&gt;here&lt;/a&gt;. Otherwise, here’s the condensed version:&lt;/p&gt;

&lt;h2&gt;Content&lt;/h2&gt;

&lt;p&gt;Give the audience the best talk you can give. Don’t waste their time (or money) with a talk that’s not going to help them in some way.&lt;/p&gt;

&lt;h3&gt;Topic&lt;/h3&gt;

&lt;p&gt;As you start choosing a topic, remember that the talk is for the &lt;em&gt;audience&lt;/em&gt; and no one else. Your talk should to inform, entertain, or make their life better in some way. Think about each of the topics on your &lt;a href="/blog/2016/conference-proposal-ideas/"&gt;list&lt;/a&gt;. How will this talk help your audience? How will it make their life better? (This doesn’t have to be “change the world” level, but it should be more than “I did this cool thing and people should know.”)&lt;/p&gt;

&lt;p&gt;When possible, give talks on things you’re passionate about. You’ll be a more engaging speaker for your enthusiasm, and you’ll have lots of experience to pull from. It might take more work to find a place to give such a talk, but your audience will appreciate your interest in the topic.&lt;/p&gt;

&lt;h3&gt;Message&lt;/h3&gt;

&lt;p&gt;Once you’ve picked your topic work on getting a “slogan” for your talk. This should be the key take away in five or six words. Spend some time thinking about those words (you’ve only got a few, use them well!). Think about this slogan as the thesis statement for writing; you don’t need to say it explicitly, but helps to know exactly the message you want to get across. (I really struggle with this; if you have tips or tricks I’d love to hear them!)&lt;/p&gt;

&lt;p&gt;If you don’t have enough time to talk about something, don’t talk about it. It’s better to scratch the surface than to rush through the depths. Also included in this is don’t show a slide and skip it “because it’s not important.” (This is a pet peeve of mine - it makes me feel like the speaker doesn’t think I’m smart enough to get the topic.)&lt;/p&gt;

&lt;p&gt;Break things down so they’re easy to understand. Put yourself in the audience mindset, remember your topic is new to them! If you’re not sure ask a potential audience member or err on the side of explaining more.&lt;/p&gt;

&lt;h2&gt;Style&lt;/h2&gt;

&lt;p&gt;The most basic version is “remove &lt;em&gt;anything&lt;/em&gt; that takes focus away from you and your message.” This can be expanded to a wide variety of rules (some of which are listed below). As you develop your slides and practice your talk constantly ask if there’s anything you can do to make it easier for your audience to understand and remember your main point.&lt;/p&gt;

&lt;h3&gt;Don’t make [them] think&lt;/h3&gt;

&lt;p&gt;Your audience should only need to think about the message of your talk. Nothing should get in the way of them concentrating on that message.&lt;/p&gt;

&lt;p&gt;Make things easy for them by keeping your slides consistent. Slides talking about the same things should look the same; similarly, different things should look different. It helps if you use few (bold) colours; it means they don’t have to guess if colours are the same or not. Remember, the colours will probably be washed out on the projector.&lt;/p&gt;

&lt;p&gt;If you have a complicated slide (perhaps a code sample), build it up slowly. Dropping the whole thing on your audience is likely to overwhelm them. Some will struggle through and try to process it, others will simply zone out. Take them on a journey through the slide so everything is explained.&lt;/p&gt;

&lt;p&gt;On that note, don’t make the audience guess what to &lt;em&gt;do&lt;/em&gt; either. If you want a response from the audience make it clear by modelling the response. When you say “raise your hand if...” also raise your own hand. This helps break the ice and let’s the audience know you’re serious about wanting them to mimic the behaviour.&lt;/p&gt;

&lt;h3&gt;Connection&lt;/h3&gt;

&lt;p&gt;Make it easy for the audience to connect with you.&lt;/p&gt;

&lt;p&gt;Have as little between you and the audience as possible. As much as possible, don’t have any of the following in your way: desk, podium, computer, arms, writing on shirt, hair in face, etc. Look open and let them see the whole you!&lt;/p&gt;

&lt;p&gt;Try to make eye contact with everyone in the room. This is hard to get right: if you do it too fast you can look shifty; if you do it too slowly it feels like you’re staring at people. Practice connecting with one person briefly and then moving on to the next member in the audience.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;As speakers, our job is to make it as easy as possible for the audience to understand our message. They’re giving us their attention, we need to give them thoughtful preparation and use their time wisely. Hopefully these notes help you better communicate your ideas at your next presentation!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: Promises/A+ and. jQuery history</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/js-promises-a-plus-jquery-history/"/>
    <id>http://lucybain.com/blog/2017/js-promises-a-plus-jquery-history/</id>
    <published>2017-01-01T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href="/blog/2016/js-promises-vs-deferred/"&gt;last post&lt;/a&gt; I listed a bunch of confusing things about promises. That time I clarified “deferred” and “promise” and this time I’ll start writing about Promises/A+ and jQuery’s promises.&lt;/p&gt;

&lt;h2&gt;Promise or promise?&lt;/h2&gt;

&lt;p&gt;The concept of a promise has been around for a long time (&lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises"&gt;1976&lt;/a&gt; in fact). Promises/A+ and jQuery’s promises are both implementations of the promise concept. They both represent future values and both simplify programming with async operations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So how’d we get two of the same thing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, they’re not actually the same thing, but we’ll briefly talk about the history first.&lt;/p&gt;

&lt;h2&gt;Why do we have two?&lt;/h2&gt;

&lt;p&gt;JS got &lt;a href="http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects"&gt;promises&lt;/a&gt; with ECMAScript 6, which is slowly making it’s way into &lt;a href="http://caniuse.com/#feat=promises"&gt;browsers&lt;/a&gt;. But before the spec was settled (see what I did there?) jQuery got to work on an implementation. jQuery knew browsers weren’t going to support promises right away, and, as with other shiny new JS, developers would have to rely on a library or polyfill to use the new features. (Other libraries knew this as well and did similar things to jQuery, but jQuery is the most common, so we’re talking about it.)&lt;/p&gt;

&lt;p&gt;I like to think it went something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt; We’d like to use promises in JS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; Hmmm, interesting idea... yeah, let’s do that&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; &lt;em&gt;typing, developing, debugging&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; But &lt;em&gt;how?&lt;/em&gt; Let’s really think about what should happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; &lt;em&gt;typing, developing, debugging&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; &lt;em&gt;Debating, email threads, thinking&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; Here you go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; &lt;em&gt;Debating, email threads, thinking&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt; Thanks jQuery, we’ll get right on it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; Here’s the theoretical description of what should happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery, developers, and JS spec:&lt;/strong&gt; Well this is awkward.&lt;/p&gt;

&lt;p&gt;So before the official JS specification for promises (eventually called Promises/A+) had landed we had an implementation for promises in jQuery. This was super handy for developers then since it meant they could have all the advantages of promises as soon as jQuery allowed it. The problem is that jQuery’s implementation and Promises/A+ differ. And it’s not likely that either will change any time soon.&lt;/p&gt;

&lt;p&gt;With a bit of effort jQuery’s promises and Promises/A+ can play nicely together, but that effort wasn’t made in the past since the Promises/A+ weren’t even available at the time. There’s also the mental effort involved in knowing both ways of working with the promises and knowing what type of promise you’re working with at any given time.&lt;/p&gt;

&lt;p&gt;It’s not ideal, but it’s the world we live in.&lt;/p&gt;

&lt;p&gt;Next time we’ll talk about the differences between the Promises/A+ spec and jQuery’s implementation of promises so you know what to watch out for.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: promise and deferred</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/js-promises-vs-deferred/"/>
    <id>http://lucybain.com/blog/2016/js-promises-vs-deferred/</id>
    <published>2016-12-22T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m struggling with promises. A lot.&lt;/p&gt;

&lt;p&gt;One of the things that’s super confusing about promises is the jargon associated. We’ve got all kinds of things: promise, deferred, Promises/A+, jQuery promise, fulfil, settle, reject, resolve, fail, catch, then, done, and probably others I don’t know yet. It was only &lt;em&gt;today&lt;/em&gt; that I realised promises and deferreds aren’t the same thing. And that &lt;strong&gt;p&lt;/strong&gt;romise and &lt;strong&gt;P&lt;/strong&gt;romise aren’t the same thing. Programming is hard.&lt;/p&gt;

&lt;h3&gt;promise vs. deferred&lt;/h3&gt;

&lt;p&gt;Anywhoo, I found this really great article &lt;a href="http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt1-theory-and-semantics"&gt;Promise &amp;amp; Deferred objects in JavaScript&lt;/a&gt;. Chris’s approach of taking some time out to think about promises and deferreds &lt;em&gt;without&lt;/em&gt; code samples helped clarify things. He was also was very careful about which words he used when, so the post is far more consistent than others I’ve read (and I’ve been reading a lot recently...).&lt;/p&gt;

&lt;p&gt;In that article is one paragraph in particular that helped me&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value. Every deferred has a promise which functions as a proxy for the future result. While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver. The promise itself can be given to any number of consumers and each will observe the resolution independently meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it. From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll be honest, I’ve read that paragraph 15-20 times by now, trying to tease out meaning from each line. So I rewrote it in my own words, and threw in some examples for good measure.&lt;/p&gt;

&lt;p&gt;Here’s my breakdown:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises represent a future value. At the moment of its creation, a promise doesn’t know what its ultimate value will be. Kind of like how the judges didn’t know what the artist’s final picture will be &lt;a href="https://www.youtube.com/watch?v=OetrSxmFZSI"&gt;when she started painting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A deferred is the work that must take place in order for a promise to “settle” (that is, for the promise’s ultimate value to be available). Like the action of painting that the artist needs to do before the judges could see the final product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every deferred has a promise which functions as a proxy for the future result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the deferred’s work kicks off it immediately returns a promise which represents the final value of the deferred’s work. This is similar to accepting a job (initialising a deferred) agreeing on a wage (the unsettled promise that is immediately returned by the deferred), doing the work (resolving the deferred), and then getting paid (resolving the promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deferreds must be explicitly “fulfilled” by other parts of the code (that is, the deferreds’ work must be completed), or they will remain in an “unfulfilled” state forever (incomplete). If this happens, the deferred’s associated promise will never settle. A deferred can fulfil in a section of the code that is unrelated to how and when its promise is referenced and used.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The promise itself can be given to any number of consumers and each will observe the resolution independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A promise can have many listeners that are all updated with the final value of the promise when the promise settles. (Ready for this example? It’s my favourite!) Hermione’s &lt;a href="http://harrypotter.wikia.com/wiki/Dumbledore's_Army_coin"&gt;coins&lt;/a&gt; for Dumbledore’s Army: Harry set his one coin (settled the promise) and all the other coins updated accordingly (many listeners for the same promise). Boom.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same deferred can be passed to multiple functions (producers). Since it’s all the same deferred any one of these producers can fulfil the deferred. Once this happens the deferred is fulfilled for all the producers (and the single associated promise is settled as well).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises can be returned and treated like a value, even though the value is not yet know.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;That’s all for now, but I’m planning to write more posts about the rest of those words from the beginning. At least promises are giving me plenty of content!&lt;/p&gt;
</content>
  </entry>
</feed>
