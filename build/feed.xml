<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2017-01-29T11:00:00+11:00</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS: Promises/A+, jQuery Deferreds, and errors</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/js-promises-errors-a-plus-vs-deferreds/"/>
    <id>http://lucybain.com/blog/2017/js-promises-errors-a-plus-vs-deferreds/</id>
    <published>2017-01-29T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As I said, I’m having difficulty understanding all the jargon associated with promises. This post is a continuation from &lt;a href="/blog/2016/js-promises-vs-deferred/"&gt;JS: promise and deferred&lt;/a&gt; and we’ll take a deeper look into how Promises and Deferreds handle errors. You can read about the &lt;a href="/blog/2017/js-promises-a-plus-jquery-history/"&gt;history&lt;/a&gt; of why these two exist, but we’re going to focus on the practical differences today.&lt;/p&gt;

&lt;p&gt;As a quick reminder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises/A+ is a &lt;a href="https://promisesaplus.com/"&gt;specification&lt;/a&gt; for how promises should work. Many &lt;a href="https://github.com/promises-aplus/promises-spec/blob/master/implementations.md"&gt;libraries&lt;/a&gt; implement this specification, but not all. You can test a library with the &lt;a href="https://github.com/promises-aplus/promises-tests"&gt;test suite&lt;/a&gt; to find if it is compliant.&lt;/li&gt;
&lt;li&gt;Deferred is jQuery’s implementation of the concept of promises. Deferreds are not Promises/A+ compliant (the specification came after Deferreds).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The differences are fairly subtle (I didn’t notice them until a co-worker told me about them), but important to note and interesting to play with for a blog post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m not using asynchronous code in my because it make the examples more complicated and the logic harder to see. The examples below wouldn’t work the same way with async code (for example, &lt;code&gt;console.log&lt;/code&gt;), but they clarify the intent.&lt;/p&gt;

&lt;h2&gt;Promise’s state after an error&lt;/h2&gt;

&lt;h3&gt;Promises/A+&lt;/h3&gt;

&lt;p&gt;The specific rule from the specification we’ll look into is &lt;a href="https://promisesaplus.com/#point-55"&gt;2.3.3.2&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If retrieving the property x.then results in a thrown exception e, reject promise with e as the reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Yawn, in human please...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The bit we’re interested in reads like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If code from a promise results in an error, the promise &lt;em&gt;must&lt;/em&gt; be rejected. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Seems simple enough&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, nothing complicated (so far). Let’s look at a simple example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [[PromiseStatus]] : "resolved"&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [[PromiseStatus]] : "rejected"&lt;/span&gt;

&lt;span class="nx"&gt;errorPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this never runs because the promise was rejected&lt;/span&gt;
  &lt;span class="c1"&gt;// before getting to this code&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Never run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, &lt;code&gt;resolvedPromise&lt;/code&gt; settled to a “resolved” state and never threw an error. However &lt;code&gt;errorPromise&lt;/code&gt; did throw an error so it settled to a “rejected” state. Because of rules like this one, it is not possible for a Promises/A+ promise to settle in a “pending” state. &lt;strong&gt;If the promise has settled, the Promises/A+ spec guarantees that it has been resolved or rejected.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmmm, that last sentence is in bold, seems like it’s important.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, that’s the main thing we’re going to look into today.&lt;/p&gt;

&lt;h3&gt;jQuery’s Deferred&lt;/h3&gt;

&lt;p&gt;jQuery’s Deferred (their implementation of promises) is quite relaxed. It was written before the rules settled down, so it isn’t as picky.&lt;/p&gt;

&lt;p&gt;Again, let’s look at an example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "resolved"&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What’s the difference?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;errorDeferred&lt;/code&gt; threw an error, it has not settled, instead it’s state is still “pending”. There’s no way to know if &lt;code&gt;errorDeferred&lt;/code&gt; is pending because of an error, or because the promise is taking a long time to settle (e.g. an ajax request).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If the promise has settled, a Deferred can be pending, resolved, or rejected.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So the difference is that a Deferred will stay pending and a Promises/A+ compliant promise won’t?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, that’s what we’re looking at right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That doesn’t seem like a big difference...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like I said, I didn’t notice the difference until someone pointed it out to me. But the way the errors are handled is different as well. We’ll look at that next.&lt;/p&gt;

&lt;h2&gt;Handling errors from promises&lt;/h2&gt;

&lt;p&gt;Ok, so now we know what happens to these two types of promises when they encounter an error. But how do we handle the errors themselves?&lt;/p&gt;

&lt;h3&gt;Promises/A+&lt;/h3&gt;

&lt;p&gt;Errors thrown in a Promise need to be explicitly handled by the promise chain. They do not bubble up to the window. In fact, not all browsers will show you the error.&lt;/p&gt;

&lt;p&gt;Google Chrome (version 55.0.2883.95) does:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/chrome-with-error.png" alt="Google Chrome displays an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;But Firefox (version 47.0) does not:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/firefox-no-error.png" alt="Firefox (version 47.0) does not display an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;Although it seems browsers are moving towards supporting showing the error. Firefox (version 51.0.1) does show the error:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/promises-vs-deferreds/firefox-with-error.png" alt="Firefox (version 51.0.1) displays an error for exceptions thrown in promises" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, and should they display the error?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically not showing the error message is correct as the Promise doesn’t bubble the error out to the browser. (That said, being able to see the errors is very helpful for debugging.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so, practically speaking, how should I handle errors?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What all this means is that you cannot use a normal try/catch for errors thrown by Promises. Let’s try it anyways to see what happens:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This catch never gets triggered because the "Promise error"&lt;/span&gt;
  &lt;span class="c1"&gt;// isn't bubbled up this far&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Does not run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Alright, now we know what doesn’t work...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To actually handle the error we need to use a &lt;code&gt;catch&lt;/code&gt; on &lt;code&gt;errorPromise&lt;/code&gt;, so we’re explicitly handling the error directly on the promise.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the previous example to correctly catch the &lt;code&gt;Promise error&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Promise error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Promise error]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Well that was easy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, I like the syntax too. It makes it really clear what error we’re catching, and looking back over the chain you can check where it might have come from.&lt;/p&gt;

&lt;p&gt;However, since errors thrown in a Promise don’t bubble up to the window you have to &lt;code&gt;catch&lt;/code&gt; errors everywhere. You aren’t guaranteed that an error like &lt;code&gt;undefined is not a function&lt;/code&gt;. As my co-worker put it, with Promises you “have to expect the unexpected everywhere.” All these &lt;code&gt;catch&lt;/code&gt;es can also get messy and complicated.&lt;/p&gt;

&lt;h3&gt;jQuery’s Deferred&lt;/h3&gt;

&lt;p&gt;On the other hand, an error thrown in a Deferred &lt;em&gt;will&lt;/em&gt; bubble up to the window and can be caught along the way. Which means we can rewrite our previous example to catch the error:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Deferred error]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll write it another way to reinforce the previous topic. Now we can see the settled state of each promise:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// triggers both promises to settle&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [Error: Deferred error]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "resolved"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you can see that &lt;code&gt;errorDeferred&lt;/code&gt; still has the “pending” state, even though the error has been caught and handled.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so using a normal try/catch works for Deferreds&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not really.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What?! You tricked me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m afraid I did. Remember at the beginning when I said my examples would use synchronous code to make things clearer? That’s what is making this example work. Since the &lt;code&gt;Deferred error&lt;/code&gt; is thrown right away (without waiting for any aysnc code to execute) the &lt;code&gt;catch&lt;/code&gt; happens right away too. It’s useful to prove the point that the &lt;code&gt;Deferred error&lt;/code&gt; bubbled up, but not so good for showing how to handle Deferred errors. Let’s write another example:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "throw error"&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this never runs because the catch won’t be triggered&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Does not run'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, now that we’re using async code the try/catch doesn’t work any more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great, another way not to do it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, yes. The thing is, jQuery doesn’t give us a way to catch errors thrown from Deferreds. It’s just not possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not possible! But this is programming, there must be a way!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, there is, upgrade to jQuery 3. While most of jQuery Deferred’s methods were defined by 1.12, one method, &lt;code&gt;catch&lt;/code&gt;, was recently added when jQuery 3.0 came out (which happened on June 9, 2016). This new &lt;code&gt;catch&lt;/code&gt; method means you can do the same kind of &lt;code&gt;catch&lt;/code&gt; as we did with the Promise earlier. Unfortunately &lt;a href="https://w3techs.com/technologies/details/js-jquery/all/all"&gt;very few&lt;/a&gt; websites are using jQuery 3 at the moment. Hopefully your site is one of them!&lt;/p&gt;

&lt;p&gt;Ok, let’s look at the example for using jQuery’s catch:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "throw error"&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [object Error] {}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// "pending"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we were able to &lt;code&gt;catch&lt;/code&gt; the error from the Deferred in the same way we caught the error from the Promise. However, after throwing the error &lt;code&gt;errorDeferred&lt;/code&gt; is left in a permanent “pending” state and will never settle to “rejected”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can we move &lt;code&gt;errorDeferred&lt;/code&gt; to be resolved?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we can’t; &lt;code&gt;errorDeferred&lt;/code&gt; is doomed to be “pending” forever. If you try to call &lt;code&gt;errorDeferred.resolve()&lt;/code&gt; you’ll get an error that &lt;code&gt;errorDeferred.resolve is not a function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This all sounds like bad news. Are there any upsides?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Remember earlier when we talked about Promises needing to explicitly &lt;code&gt;catch&lt;/code&gt; all their errors, and how that can be annoying? Well, since Deferreds do bubble up errors to the window we can handle any error with one function: &lt;code&gt;window.onerror&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s rewrite it one more time to see how this would work:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDeferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolvedDeferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'throw error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Deferred error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Logs out:&lt;/span&gt;
&lt;span class="c1"&gt;// "throw error" (from line 8)&lt;/span&gt;
&lt;span class="c1"&gt;// "Uncaught Error: Deferred error" (from line 2)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now any uncaught error will bubble up until it reaches the &lt;code&gt;onerror&lt;/code&gt; directly on the &lt;code&gt;window&lt;/code&gt;. From there our new function will log out the error. With one very small method we can see all the uncaught errors from every Deferred, rather than needing a &lt;code&gt;catch&lt;/code&gt; on each one of them. &lt;strong&gt;Warning:&lt;/strong&gt; the &lt;code&gt;onerror&lt;/code&gt; works for every uncaught error anywhere in your code, not only for errors in Deferreds; you might find more than you bargained for!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;And there you have it! Fairly small differences, but important ones. It might impact which promise implementation you decide on, and it will probably come up as you work with various libraries. It’s important to know if what you’re getting back is a Promise or a Deferred.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;Many thanks to my co-worker &lt;a href="https://twitter.com/typesthings"&gt;Adam&lt;/a&gt; for initially pointing out the differences and then also reviewing my post and correcting my mistakes!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://abdulapopoola.com/2014/12/12/the-differences-between-jquery-deferreds-and-the-promisesa-spec/"&gt;The Differences between jQuery Deferreds and the Promises/A+ spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;Deferred object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt2-practical-use"&gt;Promise &amp;amp; Deferred Objects in JavaScript Pt.2: in Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Presentation notes</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/public-speaking-notes/"/>
    <id>http://lucybain.com/blog/2017/public-speaking-notes/</id>
    <published>2017-01-12T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Way back in 2015 &lt;a href="http://yowconference.com.au/"&gt;YOW!&lt;/a&gt; granted me a ticket to a one day public speaking workshop. The workshop &lt;a href="https://www.eventbrite.com.au/e/yow-depthfirst-workshop-technical-presentation-with-damian-conway-tickets-15990610346"&gt;description&lt;/a&gt; had me a little uncertain (after all, I had never done any conference speaking before), but I signed up and took a leap of faith that &lt;a href="http://damian.conway.org/"&gt;Damian Conway&lt;/a&gt; would facilitate a workshop for people with a diverse range of skills so we would all benefit.&lt;/p&gt;

&lt;p&gt;Looking back, I am so glad I took the that leap. I’m incredibly grateful to YOW! for the ticket to attend such an impactful workshop. I’m also grateful to my (then new) boss who let me take the day off work with a day’s notice. It’s so much easier to succeed when you have such a great community behind you!&lt;/p&gt;

&lt;p&gt;Right after the workshop I wrote up my notes and shared them around with my fellow attendees. I always meant to publish those notes for others to reference (and to tidy them up for myself!) and now I’ve done it two years later. You can find the six page version of my notes &lt;a href="https://docs.google.com/document/d/1JKuTiGqGKXTi6urFySVc7WqplWRzpbXTWVz7aUyZm8o/edit?usp=sharing"&gt;here&lt;/a&gt;. Otherwise, here’s the condensed version:&lt;/p&gt;

&lt;h2&gt;Content&lt;/h2&gt;

&lt;p&gt;Give the audience the best talk you can give. Don’t waste their time (or money) with a talk that’s not going to help them in some way.&lt;/p&gt;

&lt;h3&gt;Topic&lt;/h3&gt;

&lt;p&gt;As you start choosing a topic, remember that the talk is for the &lt;em&gt;audience&lt;/em&gt; and no one else. Your talk should to inform, entertain, or make their life better in some way. Think about each of the topics on your &lt;a href="/blog/2016/conference-proposal-ideas/"&gt;list&lt;/a&gt;. How will this talk help your audience? How will it make their life better? (This doesn’t have to be “change the world” level, but it should be more than “I did this cool thing and people should know.”)&lt;/p&gt;

&lt;p&gt;When possible, give talks on things you’re passionate about. You’ll be a more engaging speaker for your enthusiasm, and you’ll have lots of experience to pull from. It might take more work to find a place to give such a talk, but your audience will appreciate your interest in the topic.&lt;/p&gt;

&lt;h3&gt;Message&lt;/h3&gt;

&lt;p&gt;Once you’ve picked your topic work on getting a “slogan” for your talk. This should be the key take away in five or six words. Spend some time thinking about those words (you’ve only got a few, use them well!). Think about this slogan as the thesis statement for writing; you don’t need to say it explicitly, but helps to know exactly the message you want to get across. (I really struggle with this; if you have tips or tricks I’d love to hear them!)&lt;/p&gt;

&lt;p&gt;If you don’t have enough time to talk about something, don’t talk about it. It’s better to scratch the surface than to rush through the depths. Also included in this is don’t show a slide and skip it “because it’s not important.” (This is a pet peeve of mine - it makes me feel like the speaker doesn’t think I’m smart enough to get the topic.)&lt;/p&gt;

&lt;p&gt;Break things down so they’re easy to understand. Put yourself in the audience mindset, remember your topic is new to them! If you’re not sure ask a potential audience member or err on the side of explaining more.&lt;/p&gt;

&lt;h2&gt;Style&lt;/h2&gt;

&lt;p&gt;The most basic version is “remove &lt;em&gt;anything&lt;/em&gt; that takes focus away from you and your message.” This can be expanded to a wide variety of rules (some of which are listed below). As you develop your slides and practice your talk constantly ask if there’s anything you can do to make it easier for your audience to understand and remember your main point.&lt;/p&gt;

&lt;h3&gt;Don’t make [them] think&lt;/h3&gt;

&lt;p&gt;Your audience should only need to think about the message of your talk. Nothing should get in the way of them concentrating on that message.&lt;/p&gt;

&lt;p&gt;Make things easy for them by keeping your slides consistent. Slides talking about the same things should look the same; similarly, different things should look different. It helps if you use few (bold) colours; it means they don’t have to guess if colours are the same or not. Remember, the colours will probably be washed out on the projector.&lt;/p&gt;

&lt;p&gt;If you have a complicated slide (perhaps a code sample), build it up slowly. Dropping the whole thing on your audience is likely to overwhelm them. Some will struggle through and try to process it, others will simply zone out. Take them on a journey through the slide so everything is explained.&lt;/p&gt;

&lt;p&gt;On that note, don’t make the audience guess what to &lt;em&gt;do&lt;/em&gt; either. If you want a response from the audience make it clear by modelling the response. When you say “raise your hand if...” also raise your own hand. This helps break the ice and let’s the audience know you’re serious about wanting them to mimic the behaviour.&lt;/p&gt;

&lt;h3&gt;Connection&lt;/h3&gt;

&lt;p&gt;Make it easy for the audience to connect with you.&lt;/p&gt;

&lt;p&gt;Have as little between you and the audience as possible. As much as possible, don’t have any of the following in your way: desk, podium, computer, arms, writing on shirt, hair in face, etc. Look open and let them see the whole you!&lt;/p&gt;

&lt;p&gt;Try to make eye contact with everyone in the room. This is hard to get right: if you do it too fast you can look shifty; if you do it too slowly it feels like you’re staring at people. Practice connecting with one person briefly and then moving on to the next member in the audience.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;As speakers, our job is to make it as easy as possible for the audience to understand our message. They’re giving us their attention, we need to give them thoughtful preparation and use their time wisely. Hopefully these notes help you better communicate your ideas at your next presentation!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: Promises/A+ and. jQuery history</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/js-promises-a-plus-jquery-history/"/>
    <id>http://lucybain.com/blog/2017/js-promises-a-plus-jquery-history/</id>
    <published>2017-01-01T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href="/blog/2016/js-promises-vs-deferred/"&gt;last post&lt;/a&gt; I listed a bunch of confusing things about promises. That time I clarified “deferred” and “promise” and this time I’ll start writing about Promises/A+ and jQuery’s promises.&lt;/p&gt;

&lt;h2&gt;Promise or promise?&lt;/h2&gt;

&lt;p&gt;The concept of a promise has been around for a long time (&lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises"&gt;1976&lt;/a&gt; in fact). Promises/A+ and jQuery’s promises are both implementations of the promise concept. They both represent future values and both simplify programming with async operations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So how’d we get two of the same thing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, they’re not actually the same thing, but we’ll briefly talk about the history first.&lt;/p&gt;

&lt;h2&gt;Why do we have two?&lt;/h2&gt;

&lt;p&gt;JS got &lt;a href="http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects"&gt;promises&lt;/a&gt; with ECMAScript 6, which is slowly making it’s way into &lt;a href="http://caniuse.com/#feat=promises"&gt;browsers&lt;/a&gt;. But before the spec was settled (see what I did there?) jQuery got to work on an implementation. jQuery knew browsers weren’t going to support promises right away, and, as with other shiny new JS, developers would have to rely on a library or polyfill to use the new features. (Other libraries knew this as well and did similar things to jQuery, but jQuery is the most common, so we’re talking about it.)&lt;/p&gt;

&lt;p&gt;I like to think it went something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt; We’d like to use promises in JS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; Hmmm, interesting idea... yeah, let’s do that&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; &lt;em&gt;typing, developing, debugging&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; But &lt;em&gt;how?&lt;/em&gt; Let’s really think about what should happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; &lt;em&gt;typing, developing, debugging&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; &lt;em&gt;Debating, email threads, thinking&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery:&lt;/strong&gt; Here you go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; &lt;em&gt;Debating, email threads, thinking&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt; Thanks jQuery, we’ll get right on it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS spec:&lt;/strong&gt; Here’s the theoretical description of what should happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery, developers, and JS spec:&lt;/strong&gt; Well this is awkward.&lt;/p&gt;

&lt;p&gt;So before the official JS specification for promises (eventually called Promises/A+) had landed we had an implementation for promises in jQuery. This was super handy for developers then since it meant they could have all the advantages of promises as soon as jQuery allowed it. The problem is that jQuery’s implementation and Promises/A+ differ. And it’s not likely that either will change any time soon.&lt;/p&gt;

&lt;p&gt;With a bit of effort jQuery’s promises and Promises/A+ can play nicely together, but that effort wasn’t made in the past since the Promises/A+ weren’t even available at the time. There’s also the mental effort involved in knowing both ways of working with the promises and knowing what type of promise you’re working with at any given time.&lt;/p&gt;

&lt;p&gt;It’s not ideal, but it’s the world we live in.&lt;/p&gt;

&lt;p&gt;Next time we’ll talk about the differences between the Promises/A+ spec and jQuery’s implementation of promises so you know what to watch out for.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: promise and deferred</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/js-promises-vs-deferred/"/>
    <id>http://lucybain.com/blog/2016/js-promises-vs-deferred/</id>
    <published>2016-12-22T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m struggling with promises. A lot.&lt;/p&gt;

&lt;p&gt;One of the things that’s super confusing about promises is the jargon associated. We’ve got all kinds of things: promise, deferred, Promises/A+, jQuery promise, fulfil, settle, reject, resolve, fail, catch, then, done, and probably others I don’t know yet. It was only &lt;em&gt;today&lt;/em&gt; that I realised promises and deferreds aren’t the same thing. And that &lt;strong&gt;p&lt;/strong&gt;romise and &lt;strong&gt;P&lt;/strong&gt;romise aren’t the same thing. Programming is hard.&lt;/p&gt;

&lt;h3&gt;promise vs. deferred&lt;/h3&gt;

&lt;p&gt;Anywhoo, I found this really great article &lt;a href="http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt1-theory-and-semantics"&gt;Promise &amp;amp; Deferred objects in JavaScript&lt;/a&gt;. Chris’s approach of taking some time out to think about promises and deferreds &lt;em&gt;without&lt;/em&gt; code samples helped clarify things. He was also was very careful about which words he used when, so the post is far more consistent than others I’ve read (and I’ve been reading a lot recently...).&lt;/p&gt;

&lt;p&gt;In that article is one paragraph in particular that helped me&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value. Every deferred has a promise which functions as a proxy for the future result. While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver. The promise itself can be given to any number of consumers and each will observe the resolution independently meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it. From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll be honest, I’ve read that paragraph 15-20 times by now, trying to tease out meaning from each line. So I rewrote it in my own words, and threw in some examples for good measure.&lt;/p&gt;

&lt;p&gt;Here’s my breakdown:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises represent a future value. At the moment of its creation, a promise doesn’t know what its ultimate value will be. Kind of like how the judges didn’t know what the artist’s final picture will be &lt;a href="https://www.youtube.com/watch?v=OetrSxmFZSI"&gt;when she started painting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A deferred is the work that must take place in order for a promise to “settle” (that is, for the promise’s ultimate value to be available). Like the action of painting that the artist needs to do before the judges could see the final product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every deferred has a promise which functions as a proxy for the future result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the deferred’s work kicks off it immediately returns a promise which represents the final value of the deferred’s work. This is similar to accepting a job (initialising a deferred) agreeing on a wage (the unsettled promise that is immediately returned by the deferred), doing the work (resolving the deferred), and then getting paid (resolving the promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deferreds must be explicitly “fulfilled” by other parts of the code (that is, the deferreds’ work must be completed), or they will remain in an “unfulfilled” state forever (incomplete). If this happens, the deferred’s associated promise will never settle. A deferred can fulfil in a section of the code that is unrelated to how and when its promise is referenced and used.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The promise itself can be given to any number of consumers and each will observe the resolution independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A promise can have many listeners that are all updated with the final value of the promise when the promise settles. (Ready for this example? It’s my favourite!) Hermione’s &lt;a href="http://harrypotter.wikia.com/wiki/Dumbledore's_Army_coin"&gt;coins&lt;/a&gt; for Dumbledore’s Army: Harry set his one coin (settled the promise) and all the other coins updated accordingly (many listeners for the same promise). Boom.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same deferred can be passed to multiple functions (producers). Since it’s all the same deferred any one of these producers can fulfil the deferred. Once this happens the deferred is fulfilled for all the producers (and the single associated promise is settled as well).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises can be returned and treated like a value, even though the value is not yet know.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;That’s all for now, but I’m planning to write more posts about the rest of those words from the beginning. At least promises are giving me plenty of content!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Upgrading to Middleman v4</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/middleman-v4/"/>
    <id>http://lucybain.com/blog/2016/middleman-v4/</id>
    <published>2016-12-10T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My blog runs on &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt; - I really like the way they’ve set things up, and it feels very familiar to me since it’s written in Ruby. However, v4 came out almost a year ago, and I never upgraded. I tried half heartedly a couple of times, but never committed. But this time I made the leap, what you see before you is a blog built by Middleman 4.0.0 (ok, I need to upgrade it even more, but this is an improvement!).&lt;/p&gt;

&lt;p&gt;I hit some snags as I went along, so let’s talk about those&lt;/p&gt;

&lt;h2&gt;Removed “Implied Extension feature”&lt;/h2&gt;

&lt;p&gt;The first issue is listed in their &lt;a href="https://middlemanapp.com/basics/upgrade-v4/"&gt;upgrade docs&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removed &amp;quot;Implied Extension feature&amp;quot;, all templates must include a full file name plus the list of desired templating extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I completely missed this (it’s about halfway down a long list of bullet points, most of which didn’t apply to me), but eventually found it referenced in a few issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does that mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good question, it wasn’t obvious to me either. The “full file name” is the normal name of the file (this file’s name is &lt;code&gt;12-10-middleman-v4&lt;/code&gt;) which is simple enough. But the “list of desired templating extensions” needs to include the ultimate format you want your page to end up in (in this case, &lt;code&gt;.html&lt;/code&gt;). This is new, you used to be able to just have &lt;code&gt;12-10-middleman-v4.md&lt;/code&gt;, but now you need the full &lt;code&gt;12-10-middleman-v4.html.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Updating all your files to add a &lt;code&gt;.html&lt;/code&gt; before the previous extension is more than a little annoying. So I wrote a little script to help me out:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="c1"&gt;# FILL ME IN&lt;/span&gt;

&lt;span class="c1"&gt;# Step 1: get a list of all the extensions you use&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'set'&lt;/span&gt;
&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: convert the extensions you want converted&lt;/span&gt;

&lt;span class="n"&gt;extensions_to_convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# FILL ME IN&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;should_convert_extension?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;extensions_to_convert&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt;
  &lt;span class="n"&gt;already_converted?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s1"&gt;'html'&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;should_convert_extension?&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;already_converted?&lt;/span&gt;
  &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.html.'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# verify file conversion&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c1"&gt;# uncomment to make actual changes&lt;/span&gt;
  &lt;span class="c1"&gt;# File.rename(file, new_name)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find it &lt;a href="https://gist.github.com/lbain/5ce9ef81f6a3ce6f3b4b84774f9a63d8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Filter errors with &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Some of my earlier blog posts were written in Haml (this was back when I was writing more Ruby and didn’t know Markdown as well). In general these moved from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.html.haml&lt;/code&gt; without a hitch, but a few threw errors on &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt; saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Filter &amp;quot;code&amp;quot; is not defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have no idea what changed in Haml or Middleman to trigger this failure (I assume it was a Middleman change since I only moved from &lt;a href="https://github.com/lbain/lucybain/commit/0cab70d26bd82946dbc6475fe0a4bb147f5639b4"&gt;Haml 4.0.5 to 4.0.7&lt;/a&gt;). Since I only had a few of these errors it was easiest to convert the Haml files to Markdown files. It’s something I’ve been meaning to do anyway, and this was as good a time as any.&lt;/p&gt;

&lt;h2&gt;Sass files should include Sass files&lt;/h2&gt;

&lt;p&gt;I had a tiny issue with a Sass file that used to be &lt;code&gt;@include&lt;/code&gt;ing a CSS file, but now died. Seems like that should never have worked, but it was an easy fix to convert my one &lt;a href="http://css2sass.herokuapp.com/"&gt;CSS file to a Sass&lt;/a&gt; file and have everything work.&lt;/p&gt;

&lt;h2&gt;Middleman-blog doesn’t like Haml layout&lt;/h2&gt;

&lt;p&gt;I don’t really know what’s going on here, but I’m not the only &lt;a href="https://github.com/middleman/middleman-blog/issues/324"&gt;person&lt;/a&gt; experiencing this &lt;a href="https://github.com/middleman/middleman-blog/issues/322"&gt;issue&lt;/a&gt;. At the end of the day there’s something wonky happening with how the blog template plays with the general site template in Haml. After a fair amount of tinkering (and hair pulling...) I gave up and &lt;a href="https://haml2erb.org/"&gt;converted the layouts&lt;/a&gt; to &lt;code&gt;.erb&lt;/code&gt; files. I’m not super happy with this outcome (I had &lt;code&gt;.haml&lt;/code&gt; files for a reason!), but it works and I want to enjoy my remaining hair.&lt;/p&gt;

&lt;p&gt;An issue with converting from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.erb&lt;/code&gt;: in order to preserve whitespace and nice things in a markdown converted blog post with code snippets I needed to use &lt;code&gt;find_and_preserve&lt;/code&gt;. However, this method only exists in Haml, and so isn’t available in an &lt;code&gt;.erb&lt;/code&gt; file. It’s not needed for embedded Ruby, but it’ll throw errors until you delete it.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; wrapping&lt;/h2&gt;

&lt;p&gt;Last of all I found the updated &lt;a href="https://github.com/vmg/redcarpet"&gt;Redcarpet gem&lt;/a&gt; now wraps all code in &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags. Now you’d think this wasn’t a big deal, but it really messed with my head. What used to happen was...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;`single ticks`
&amp;lt;code&amp;gt;single ticks&amp;lt;/code&amp;gt;


```
triple ticks
```
&amp;lt;pre&amp;gt;triple ticks&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But now the ``` is different:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;```
triple ticks
```
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;triple ticks&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately all my styling relied on the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; only being used inline and the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; only being used for code blocks. It &lt;a href="https://github.com/lbain/lucybain/commit/945fd5c249731572e1c9ebeb2a3a7e97351de2cd"&gt;wasn’t hard to fix&lt;/a&gt;, but it make my blog posts look weird and caused a good deal of despair.&lt;/p&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;Usually the lesson from this kind of thing is “update earlier!” but I’m honestly not sure that would have helped. There weren’t a lot of resources out there to find (or my Google searches were completely off base), and the &lt;a href="https://forum.middlemanapp.com"&gt;Middleman forum&lt;/a&gt; kept not loading. Which is why I’m writing this post - I hope it helps someone!&lt;/p&gt;

&lt;p&gt;I did hugely underestimate the amount of time involved with doing the upgrade. Often solving the issue wasn’t too difficult, but finding it was hard. And, in the case of the Haml layouts, I never solved it but had to call it quits and move on to the next thing.&lt;/p&gt;

&lt;p&gt;I also got really frustrated with the whole thing and nearly called it off at least twice. It’s hard to keep going when you don’t know how close to the end you are.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>YOW! Day Two</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/yow-day-2/"/>
    <id>http://lucybain.com/blog/2016/yow-day-2/</id>
    <published>2016-12-09T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The other volunteers and I got to sleep in a bit this morning and only had an 8:15 start time. &lt;em&gt;Yawn!&lt;/em&gt; At least there’s free tea and coffee! After setting up a few odds and ends it was time to start shepherding people into the main room for the third, and last, keynote.&lt;/p&gt;

&lt;h3&gt;The Past and Future of Evolutionary Architecture, &lt;a href="https://twitter.com/rebeccaparsons"&gt;Rebecca Parsons&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We’ve been singing praises to Agile for a long time, but how do you apply these methods to architecture? &lt;em&gt;Evolutionary&lt;/em&gt; architecture&lt;/li&gt;
&lt;li&gt;Start by building a good test suite (I’m sensing a theme here...). Changing large design decisions doesn’t need to be as scary when you’ve got a good test suite to be sure the change won’t break things.&lt;/li&gt;
&lt;li&gt;Recommended Reading: &lt;a href="https://www.amazon.com/Refactoring-Databases-Evolutionary-paperback-Addison-Wesley/dp/0321774515"&gt;Refactoring Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Be aware of your team: it’s irresponsible to do evolutionary architecture (and generally make risky decisions) without having good tests, CI, and CD. Otherwise it puts too much pressure on the ops team.&lt;/li&gt;
&lt;li&gt;Delay decisions until the last responsible moment. The longer you delay the more information you’ll have available. But you still need to be responsible about it; others shouldn’t suffer for your lack of decision.&lt;/li&gt;
&lt;li&gt;Develop a &lt;a href="https://en.wikipedia.org/wiki/Fitness_function"&gt;fitness function&lt;/a&gt; early on in a project. The fitness function should define “good” for this particular project by making boundaries and requirements explicit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quote about thinking bigger picture:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Good code has a more consistent definition across projects than good architecture design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Adventures in Elm Questioning your principles, &lt;a href="https://twitter.com/jessitron"&gt;Jessica Kerr&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jessica’s talk was built around a live coding demo. Not only was this amazingly gutsy, but it was a fantastic way to show off the complier, as well as allowing for “human” moments. She made a few mistakes (although at least some of them were on purpose!) and kept going. It was quite an inspiring talk, and I’d certainly recommend it to newer devs.&lt;/li&gt;
&lt;li&gt;She also was really explicit about what tools she used and how her system was set up. This was really helpful as you often have questions about a cool thing you saw them use.&lt;/li&gt;
&lt;li&gt;Elm:

&lt;ul&gt;
&lt;li&gt;Explicit types are optional, all items in a list must be of the same type&lt;/li&gt;
&lt;li&gt;The language is aimed at people doing work and their experience. It’s not about building the “right” language.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm compiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A major part of the talk focused on how useful the compiler is. I mostly work in interpreted languages (JS, Ruby); I learned to fear and hate the compiler in my Java days at university. But her explanation of how the Elm compiler fits into her process was pretty persuasive.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My favourite quote was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Elm considers every compile error as a teachable moment&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a quick look, I found &lt;a href="http://elm-lang.org/blog/compiler-errors-for-humans"&gt;this blog post&lt;/a&gt; about the reasoning behind these error messages. It’s really lovely and human-centric. I love this way of a language doing it’s best to help the user (programmer).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adorable quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The compiler is my friend and it helps me get it &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/elm-live-coding.jpg" alt="Live coding with Elm" /&gt;&lt;/p&gt;

&lt;p&gt;Her dress matched the colours and styles of the slides, nice touch!&lt;/p&gt;

&lt;h3&gt;If you are Synchronous you are not Resilient, &lt;a href="https://twitter.com/ghohpe"&gt;Gregor Hohpe&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Gregor started his talk by defining three types of systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resilient: acknowledge things will fail, your system needs to be able to handle it and react to return to the normal state&lt;/li&gt;
&lt;li&gt;Fail-operational: the system has to continue working (perhaps with a degraded service) and cannot be restarted or crash out (think of an plane)&lt;/li&gt;
&lt;li&gt;Antifragile: something that becomes &lt;em&gt;stronger&lt;/em&gt; with disturbances (think of a rumour, or the &lt;a href="https://en.wikipedia.org/wiki/Lernaean_Hydra"&gt;Hydra&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the talk covered how to move your code, team and organisation towards each of these states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resilient: as other talks had mentioned, programmers usually aren&amp;#39;t great at handling error cases. In order to reach this first state a system needs to deal with errors that come out, not just leave a &lt;code&gt;// todo&lt;/code&gt; comment.&lt;/li&gt;
&lt;li&gt;Fail-operational: everything must be built in an isolated way, and the most important systems (like the plane engine) need backups&lt;/li&gt;
&lt;li&gt;Antifragile: adding something like the &lt;a href="https://github.com/Netflix/chaosmonkey"&gt;Chaos Monkey&lt;/a&gt;, when the monkey finds a failure your can improve your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Communities of Practice: The Missing Piece of your Agile Organisation, &lt;a href="https://twitter.com/ewebber"&gt;Emily Webber&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Given my experience with various user groups, study groups, and my own continuing education I was quite excited to go to this talk. Unfortunately for me, it was aimed more for beginner community organisers. I did like her ideas around bringing these kinds of communities into the office, both how to do that from a practical stand point, and why learning with your co-workers can be a good thing.&lt;/p&gt;

&lt;p&gt;I enjoyed Emily’s discussion about the Kolb’s learning styles because it’s particularly relevant to my own learning efforts.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/kolbs-learning-styles.jpg" alt="Kolb’s learning styles" /&gt;&lt;/p&gt;

&lt;p&gt;In general, I try to follow these steps, although I’d never thought of them so concretely. My typical flow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Concrete experience: encounter something difficult at work, or a new idea from a technical article.&lt;/li&gt;
&lt;li&gt;Reflection observation: think about what was difficult and do some research into that topic.&lt;/li&gt;
&lt;li&gt;Abstract conceptualisation: write a blog post in my own words about the topic.&lt;/li&gt;
&lt;li&gt;Active experimentation: I’ll admit, this is where I don’t do as well. I generally have real examples in my blog posts, and of course I try to apply what I’ve learned to what I do at work. But there’s certainly room for improvement here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learning quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As all architects know, there’s something to be learned from everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/RMcKergow/status/810062288770076672" class="image-link"&gt;&lt;img src="/images/blog/yow-2016/communities-of-practice.jpg" alt="Communities of practice" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Knit One, Compute One, &lt;a href="https://twitter.com/web_goddess"&gt;Kris Howard&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The last talk of the day was given by my friend Kris. Kris programs and knits, this talk was about the intersection of the two. It was extra satisfying to watch because I was one of the people who encouraged her to submit the talk to YOW! way back in August.&lt;/p&gt;

&lt;p&gt;Kris’s talk went into the similarities of programming and knitting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knitting can be thought of as binary (knit and purl vs. 1 and 0)&lt;/li&gt;
&lt;li&gt;knitting patterns are programs for the knitter to follow&lt;/li&gt;
&lt;li&gt;patterns use many programming concepts, such as loops, if statements, go to statements, and more&lt;/li&gt;
&lt;li&gt;the final bombshell was that knitting can be Turing complete!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I particularly enjoyed the discussion about using a &lt;a href="https://launchpad.net/knitml"&gt;standard markup language&lt;/a&gt; to store patterns. This way a program could easy use one of many ways to display a knitting pattern, and the implementation would result in the same thing. I love the idea of having One Pattern to Rule Them All, but allowing each person to use their favourite way of consuming the patterns. &lt;em&gt;I want this for recipes!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;General notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“Uncle Bob” started his talk with a call to gender diversity by asking the programmers to stand and then asking the men to sit down. As a person left standing I found it pretty disappointing, it looked like quite a bit less than 10-15% were women. I followed up with one of the conference organisers after the event and they estimated that ~20% of registrants were women. So perhaps I had some implicit bias to see the number of female attendees as low; perhaps the women didn’t make it in time for the first keynote; perhaps the wording of the request wasn’t clear (“will people with a Y chromosome please sit down.”); or perhaps the women there didn’t identify as programmers, and so weren’t standing in the first place. No matter the reason, I appreciated that the conference opened with a note about wanting more women attendees, and I am thrilled that so many women registered.&lt;/li&gt;
&lt;li&gt;There was a fair amount of discussion about having standards and living up to others’ expectations for what being a programmer means. Maybe we’re moving away from “hackers” and “ninjas” and towards ... “professional” programmers.&lt;/li&gt;
&lt;li&gt;We’re reinventing wheels:

&lt;ul&gt;
&lt;li&gt;TDD was thought of in 1967. &lt;/li&gt;
&lt;li&gt;There’s a discussion of agile development in 1968&lt;/li&gt;
&lt;li&gt;Research into distributed systems happened in the 1980s&lt;/li&gt;
&lt;li&gt;Perhaps we’re so busy disrupting we don’t take the time to look for lessons from the past.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A few speakers mentioned &lt;a href="https://en.wikipedia.org/wiki/Conway's_law"&gt;Conway&amp;#39;s law&lt;/a&gt;, and it’s reverse — first decide how you want your &lt;em&gt;code&lt;/em&gt; structure look and then make your organisation look like that.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
