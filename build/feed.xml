<!DOCTYPE html>
<html>
  <head>
    <meta content='width=device-width, initial-scale=1' name='viewport'>
    <meta charset='utf-8'>
    <meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>
    <link href='/images/favicon.ico' rel='icon' type='image/ico'>
    <link href='http://fonts.googleapis.com/css?family=Crimson+Text:400,700|Nobile:400,700' rel='stylesheet' type='text/css'>
    <title>Lucy Bain</title>
    <link href="/stylesheets/application.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="/stylesheets/code.css" media="screen" rel="stylesheet" type="text/css" />
    <script src="/javascripts/all.js" type="text/javascript"></script>
  </head>
  <body class='feed'>
    <div class='header'>
      <ul class='nav' id='menu'>
        <li>
          <a class="" href="/">Connect with me</a>
        </li>
        <li>
          <a class="" href="/resources/job/">My job</a>
        </li>
        <li>
          <a class="" href="/resources/">Resources</a>
        </li>
        <li>
          <a class="" href="/blog/">Blog</a>
        </li>
      </ul>
    </div>
    <div class='content'>
      <?xml version="1.0" encoding="UTF-8"?>
      <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Blog Name</title>
        <subtitle>Blog subtitle</subtitle>
        <id>http://blog.url.com/blog</id>
        <link href="http://blog.url.com/blog"/>
        <link href="http://blog.url.com/feed.xml" rel="self"/>
        <updated>2014-02-13T00:00:00Z</updated>
        <author>
          <name>Blog Author</name>
        </author>
        <entry>
          <title>Git Branch Names on Command Prompt</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/git-branch-names-on-command-line/"/>
          <id>http://blog.url.com/blog/2014/git-branch-names-on-command-line/</id>
          <published>2014-02-13T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I often forget which branch I'm on. Sure, I have &lt;code&gt;git branch&lt;/code&gt; aliased (it's probably one of my most frequently used commands) but sometimes I &lt;em&gt;know&lt;/em&gt; I'm on another branch. A few commits and merges later I find out I was wrong, and it's time for some branch cleaning.
      &lt;/p&gt;
      &lt;p&gt;
        Recently my coworker &lt;a href="https://plus.google.com/+SimonHildebrandt/"&gt;Simon&lt;/a&gt; gave me the following code:
      &lt;/p&gt;
      &lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;parse_git_branch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&amp;#x000A;   &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/dev/nu&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;'/^[^*]/d'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;'s/* \(.*\)/ (\1)/'&lt;/span&gt;&amp;#x000A;&lt;span class="p"&gt;}&lt;/span&gt;&amp;#x000A;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="no"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\W\[\033&lt;/span&gt;&lt;span class="s2"&gt;[32m&lt;/span&gt;&lt;span class="se"&gt;\]\$&lt;/span&gt;&lt;span class="s2"&gt;(parse_git_branch)&lt;/span&gt;&lt;span class="se"&gt;\[\033&lt;/span&gt;&lt;span class="s2"&gt;[00m&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;&lt;span class="s2"&gt; $ "&lt;/span&gt;&lt;/pre&gt;
      &lt;p&gt;This code should go in your &lt;code&gt;~/.bash_profile&lt;/code&gt;. Once you've added it, you'll need to source with &lt;code&gt;$ source ~/.bash_profile&lt;/code&gt; (or &lt;code&gt;$ . ~/.bash_profile&lt;/code&gt; if you want to save a few key strokes!).&lt;/p&gt;
      &lt;p&gt;
        Your prompt will be &lt;code&gt; current-directory (branch-name) $&lt;/code&gt; with your branch name in green. Mine looks like this:
        &lt;div class='center'&gt;
          &lt;img alt="lucybain (blog) $" src="/images/blog/git-branch-prompt.png" /&gt;
        &lt;/div&gt;
        Now you can see what branch your on right where you'll be committing it. Nice, huh? Hopefully you'll never run a &lt;code&gt;reset --hard&lt;/code&gt; on the wrong branch again!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>Sublime Multi-Cursor</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/sublime-multi-cursor/"/>
          <id>http://blog.url.com/blog/2014/sublime-multi-cursor/</id>
          <published>2014-02-03T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I use Sublime. I know, I know, I'm not a &lt;a href="http://xkcd.com/378/"&gt;"real"&lt;/a&gt; dev. Whatever. It works for me. One of my favourite features is the multi-cursor. If you're a fellow Sublime user and aren't aware of this ability you should really check it out. Look at &lt;a href="http://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/"&gt;step 12&lt;/a&gt; for a little gif of what it looks like.
      &lt;/p&gt;
      &lt;p&gt;
        This is an awesome tool for making bulk edits in a file. &lt;code&gt;cmd + mouse-click&lt;/code&gt; is where I started, but then &lt;a href="https://twitter.com/gerwinvanroyen"&gt;@gerwinvanroyen&lt;/a&gt; told me about selecting a bunch of lines and then doing &lt;code&gt;cmd + shift + L&lt;/code&gt; to select all the lines individually. Also running a &lt;code&gt;find all&lt;/code&gt; in Sublime and then using the multiple cursors from there has been really helpful.
      &lt;/p&gt;
      &lt;p&gt;
        So go try it out - it's pretty powerful!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>validate vs. validateS</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/validate-vs-validates/"/>
          <id>http://blog.url.com/blog/2014/validate-vs-validates/</id>
          <published>2014-01-15T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I stumbled across this validation gotcha a while back, but that was before I had this awesome blog ;) I think this is a pretty big one, hope this help someone!
      &lt;/p&gt;
      &lt;p&gt;
        &lt;code&gt;::ActiveModel::Validations&lt;/code&gt; treats &lt;code&gt;validates&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; differently. &lt;code&gt;validates&lt;/code&gt; is used for normal validations &lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, and the like. &lt;code&gt;validate&lt;/code&gt; is used for custom validation methods &lt;code&gt;validate_name_starts_with_a&lt;/code&gt;, or whatever crazy method you come up with. These methods are clearly useful and help keep data clean.
      &lt;/p&gt;
      &lt;p&gt;
        That's all well and good, except for one tiny thing:
        &lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record'&lt;/span&gt;&amp;#x000A;&amp;#x000A;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&amp;#x000A;  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Validations&lt;/span&gt;&amp;#x000A;&amp;#x000A;  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&amp;#x000A;  &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&amp;#x000A;  &lt;span class="c1"&gt;# Note the validate without an s!&lt;/span&gt;&amp;#x000A;&lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&amp;#x000A;&amp;#x000A;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec'&lt;/span&gt;&amp;#x000A;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/autorun'&lt;/span&gt;&amp;#x000A;&amp;#x000A;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'Foo'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&amp;#x000A;  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'fails to actually validate'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&amp;#x000A;    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&amp;#x000A;    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_false&lt;/span&gt;&amp;#x000A;  &lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&lt;/pre&gt;
        That test &lt;em&gt;fails&lt;/em&gt;.
      &lt;/p&gt;
      &lt;p&gt;
        Go ahead, copy that into a new file and run it for yourself. I'll wait. Yep, it fails. There's no value set for &lt;code&gt;bar&lt;/code&gt; and yet &lt;code&gt;foo.valid?&lt;/code&gt; still returns &lt;code&gt;true&lt;/code&gt;. This is a problem.
      &lt;/p&gt;
      &lt;p&gt;
        So what's going on here? I asked &lt;a href="http://stackoverflow.com/questions/18140898/whats-the-difference-between-validate-and-validates"&gt;StackOverflow&lt;/a&gt;, and it turns out there's a totally reasonable explanation. &lt;code&gt;validate&lt;/code&gt; is written to look for a custom validation method, this time one called &lt;code&gt;bar&lt;/code&gt;. It just so happens there is a &lt;code&gt;bar&lt;/code&gt; method, set from the &lt;code&gt;attr_accessor :bar&lt;/code&gt; line. That &lt;code&gt;bar&lt;/code&gt; method returns doesn't return &lt;code&gt;false&lt;/code&gt;, nor does it put an error messages on the main object's body. Therefore &lt;code&gt;validate&lt;/code&gt; interprets the call to &lt;code&gt;bar&lt;/code&gt; as a success and doesn't invalidate the object.
      &lt;/p&gt;
      &lt;p&gt;
        This explanation also means there's no way for the code to "fail loudly" - to alert us that we haven't purposefully defined a custom method when we use &lt;code&gt;validate&lt;/code&gt;. So I'd suggest grepping through your codebase for &lt;code&gt;validate :&lt;/code&gt; and making very sure that's what you actually want.
      &lt;/p&gt;
      &lt;p&gt;
        So remember folks, &lt;code&gt;validates&lt;/code&gt; is for Rails validators (and custom validator classes ending with &lt;code&gt;Validator&lt;/code&gt; if that's what you're into), and &lt;code&gt;validate&lt;/code&gt; is for your custom validator methods. Don't make a typo!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>TDD Day 5</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/tdd-day-5/"/>
          <id>http://blog.url.com/blog/2014/tdd-day-5/</id>
          <published>2014-01-09T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;h3&gt;
        What did I do today?
      &lt;/h3&gt;
      &lt;p&gt;
        I said at the beginning that I wasn't a huge fan of TDD. It just doesn't seem like a great idea to me. Today I took some time to explore that, and it turns out, I'm not the only one. Most people have mixed reviews, and that's exactly what I'm experiencing now.
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="http://www.writemoretests.com/2011/09/test-driven-development-give-me-break.html"&gt;Test-Driven Development? Give me a break…&lt;/a&gt; said that &lt;b&gt;requiring&lt;/b&gt; TDD was a bad idea, but that the general principal is probably good. It's possible to have too much of a good thing.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/a/98566"&gt;Description of someone's negative TDD experience&lt;/a&gt; - "Like everything that comes under the 'Agile' banner, TDD is something that sounds good in theory, but in practice it's not so clear how good it is (and also like most 'Agile' things, you are told that if you don't like it, you are doing it wrong)." So much this. I like the idea of being able to refactor at will, but it doesn't seem to work like that in real life.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/a/178858"&gt;On designing with TDD&lt;/a&gt; pointed out that just because code was written with TDD doesn't mean it's good code. Writing good code is hard, TDD is one of the (many) tools and ideas programmers have available to write better code since it (theoretically) allows us to refactor more easily.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/questions/41409/why-does-tdd-work"&gt;Discussion on "engineering" side of development&lt;/a&gt; - "The false safe feelings that an 'all green' outcomes ... may be interepreted as 'the system is fine', when it really means 'the system is as good as our testing strategy'." This has bitten me a few times. We don't shoot for 100% test coverage at work, but we still feel ok to push code when we've got a green build.
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;
        Reflections
      &lt;/h3&gt;
      &lt;p&gt;
        I'm still not convinced about TDD. I'm hoping I'll have a more informed opinion at the end of these TDD sessions, but right now I'm a bit perplexed. It does make me feel better to know that I'm not the only one questioning TDD as the "right" way to do things.
      &lt;/p&gt;
      &lt;p&gt;
        On a positive note, I submitted a pull request today and one of my coworkers complemented me on my tests! So I guess these exercises are working :)
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>TDD Day 4</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/tdd-day-4/"/>
          <id>http://blog.url.com/blog/2014/tdd-day-4/</id>
          <published>2014-01-08T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;h3&gt;
        What did I do today?
      &lt;/h3&gt;
      &lt;p&gt;
        I'm continuing on at Coders Dojo, today I worked on &lt;a href="http://content.codersdojo.org/code-kata-catalogue/roman-numerals/"&gt;Roman Numerals&lt;/a&gt;. I've heard this problem talked about, but haven't actually worked on it myself. It was harder than I expected (and involved a lot of Googling for the correct way to convert numbers to roman numerals), but I did &lt;a href="https://github.com/lbain/tdd-practice/tree/master/day-4"&gt;finish&lt;/a&gt; it with all green specs.
      &lt;/p&gt;
      &lt;p&gt;
        I also watch the next &lt;a href="https://www.youtube.com/watch?v=dyBybIZJpyA&amp;amp;amp;list=PLVBFw0Pn9e9IduDzgOx7Yoh0ur7SZa7hu&amp;amp;amp;index=3"&gt;video&lt;/a&gt; from RubyOnRailsVideos about TDD. This one talked about writing pending specs before you get properly started to give you some scaffolding to work with (among other things). I tried to work with that today. I started by going through and writing up an outline of how I thought the tests should go, in increasing difficulty, and with clear titles. Overall I think it helped me stay focused. I was certainly much better at Red-Green-Refactor, particularly the refactoring bit.
      &lt;/p&gt;
      &lt;h3&gt;
        Reflections
      &lt;/h3&gt;
      &lt;p&gt;
        I found that once I had a couple of hard coded examples of code that passed specs I found it much easier to move to a more abstract implementations. Normally I would just head to the abstraction since I know that's what I'll have to end up with. But focusing on the "least code possible" for a green test it was easier to work out what the final code should be. So there's something concrete and useful about using TDD...
      &lt;/p&gt;
      &lt;p&gt;
        As with the prime number converter I looked around for a solution to this kata after I had finished it. Other people solved it more simply, although I felt like they were cheating. An interesting idea, if it's voluntary work done for your personal betterment, can you really cheat? They simply wrote more cases for the base dictionary (i.e. 4, 9, 90, etc.). As I said, I feel like this is cheating. It seems like your application should only know the minimum numerals available, and not need to look up any additional combinations. At that point, why not just hard code all of the solutions?
      &lt;/p&gt;
      &lt;p&gt;
        Well, because that would be extremely tedious, and with the few additional numbers these other solutions used they were able to save a considerable amount of code. In the real world, theirs would be the preferred solution by far. It was far simpler, had fewer lines of code, and did not hard code anything that was likely to change in the future (those Roman numerals have been around for a while). So although I may feel self-righteous about my solution, I do believe theirs is preferred.
      &lt;/p&gt;
      &lt;p&gt;
        I do think I'm starting to see more of a use for TDD, and testing in general. Refactoring the code was much easier with all the tests I had to make sure I didn't forget anything small.
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>TDD Day 3</title>
          <link rel="alternate" href="http://blog.url.com/blog/2014/tdd-day-3/"/>
          <id>http://blog.url.com/blog/2014/tdd-day-3/</id>
          <published>2014-01-06T00:00:00Z</published>
          <updated>2014-02-15T22:16:33+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I started the next &lt;a href="http://content.codersdojo.org/code-kata-catalogue/prime-factors/"&gt;kata&lt;/a&gt; at Coders Dojo. I think you're supposed to do katas over and over again, but I didn't think I'd gain that much from repeating the FizzBuzz kata from yesterday. Maybe when I've got a better hang of things I can go back to FizzBuzz and learn something from it. Anyways, today's exercise was new to me - finding all the prime factors for a given number. Of course I've done this in math class, but I haven't written a program for it before.
      &lt;/p&gt;
      &lt;p&gt;
        I figured I shouldn't have a list of all the primes ever (also, not possible to do...), and that calculating the primes on the fly would be too slow. (Not that there's a time constraint, just that I know computers spend their lives computing the next prime number and it seemed a bit in efficient.) Fortunately Ruby has a Prime class, so I borrowed that one. I'm not sure this was in the spirit of the kata, but TDD and Agile are all about writing as little code as possible, and I thought using someone else's code would further that cause. Looking back I'm not so sure...
      &lt;/p&gt;
      &lt;p&gt;
        I went through the exercise and got it all &lt;a href="https://github.com/lbain/tdd-practice/tree/master/day-3"&gt;sorted.&lt;/a&gt; I'll admit I'd forgotten 1 isn't a prime number, but a bit of Googling set me straight. In the end the Prime class wasn't as helpful as I'd thought since it didn't come in the "correct" form as described in Coders Dojo. So I had to write a converting function to deal with this.
      &lt;/p&gt;
      &lt;h3&gt;
        Reflections
      &lt;/h3&gt;
      &lt;p&gt;
        When I was done I found a &lt;a href="http://www.codersdojo.com/statistics/aa3d8500266d4b5bcf6fe18d0fce77dc1a7b7c0e"&gt;"solution"&lt;/a&gt; posted by the Dojo. It was... much better than mine. :( Well, I guess that's what learning is all about. I ended up putting similar tests together (a few primes and a few composite numbers all in one "it" block). I'm pretty sure you're not supposed to do this, but I really haven't found a good reason why not. But I only had a few test cases, the solution had many more. The solution also rolled it's own factorization rather than relying on Prime. I had assumed this would be too slow, but of course that was premature optimization. No one else is going to use this function, just me and my tests. Time is unimportant. Also, I have no idea how the Prime class works, it might compute the primes on the fly itself.
      &lt;/p&gt;
      &lt;p&gt;
        All in all, I think I did better sticking with the TDD mindset, but I'd like to come back to this one in a little while (once I've forgotten it a bit), and write my own factorization without leaning on Prime.
      &lt;/p&gt;
      </content>
        </entry>
      </feed>
    </div>
    
  </body>
  <script src='//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js'></script>
  <script src='/javascripts/jquery.slicknav.min.js'></script>
  <script src='/javascripts/all.js'></script>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    
    ga('create', 'UA-45866381-1', 'lucybain.com');
    ga('send', 'pageview');
  </script>
</html>
