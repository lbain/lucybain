<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2021-01-31T11:00:00+11:00</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Preparing for our coaching session</title>
    <link rel="alternate" href="http://lucybain.com/blog/2021/coaching-session-prep/"/>
    <id>http://lucybain.com/blog/2021/coaching-session-prep/</id>
    <published>2021-01-31T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is written mostly for the four women who are part of my community &lt;a href="/blog/2021/coaching-sessions/"&gt;coaching program&lt;/a&gt;. It will mostly apply to anyone doing coaching with me, and might be helpful to review before a coaching session with others as well!&lt;/p&gt;

&lt;h2&gt;Pre-work&lt;/h2&gt;

&lt;p&gt;Before each session take some time to think about a problem or area of your life that you’d like to discuss. The topic should be job related, but can leak into your personal life as well. It shouldn’t be something fact based like “how to fix this bug” but maybe “I have trouble speaking up in meetings” or “my boss doesn’t give me challenging work.” Part of the coaching process includes taking time to understand and clarify the topic so it doesn’t need to be super well defined yet! Personally, I usually think about what’s been my biggest difficulty in the past 2-4 weeks and talk through that.&lt;/p&gt;

&lt;p&gt;Other examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;difficulty communicating with a particular team member&lt;/li&gt;
&lt;li&gt;struggling with work life balance&lt;/li&gt;
&lt;li&gt;thinking about leaving your company&lt;/li&gt;
&lt;li&gt;having trouble jumping into conversations on Zoom&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Session&lt;/h2&gt;

&lt;p&gt;You have an hour booked with me to learn, grow, and plan for your future. I’ll keep an eye on the time to make sure we don’t go over, but the time is yours. That being said, the timing often works out roughly like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;25 minutes to better understand the problem&lt;/li&gt;
&lt;li&gt;25 minutes to discuss and plan out a plan of attack&lt;/li&gt;
&lt;li&gt;10 minutes to review, give feedback, and wrap up the session&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We won’t stick to that exactly, but I hope it’s helpful to have an idea of what you’re walking into!&lt;/p&gt;

&lt;h2&gt;Homework&lt;/h2&gt;

&lt;p&gt;If all goes well, during our session you’ll come up with a plan to enact over the next month. Where desired, please do the work or make relevant changes to the plan works better for you as needed. Ideally this is an exciting assignment as you work on yourself and your career!&lt;/p&gt;

&lt;p&gt;During the session or in an email after, I might suggest some exercises or reading that I believe would be valuable for you. Please dedicate up to an hour a week to these assignments, but don’t let them take away from your main plan for the month.&lt;/p&gt;

&lt;p&gt;Of course, not everyone is ready to “do” after just one discussion. Your plan might fall to the bottom of your to do list or feel unapproachable after our session. If this is the case please be honest with me in our next meeting. What held you back? What were you most dreading? Please be thoughtful; “I didn’t have time” is usually not the root reason. If we can approach the situation without shame or judgment we’re more likely to make progress in the next session.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2021 Coaching Sessions</title>
    <link rel="alternate" href="http://lucybain.com/blog/2021/coaching-sessions/"/>
    <id>http://lucybain.com/blog/2021/coaching-sessions/</id>
    <published>2021-01-01T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hello and welcome to 2021!&lt;/p&gt;

&lt;p&gt;This year I&amp;#39;ll give back to the amazing community in a different, covid safe, way. I&amp;#39;m offering four people six coaching sessions! I got a lot of value attending coaching sessions; so much so, that I took a course on how to be a coach so I could help others. I really liked the one-on-one focus, and ability to dive deep into a problem with someone else. I&amp;#39;d like to take my coaching practice deeper through a continued relationship so you have time to make changes and grow.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m particularly interested in &lt;strong&gt;coaching women through inflection points&lt;/strong&gt;. Did you become a manager? Or perhaps you&amp;#39;re considering changing companies? Are you a mid or senior developer wondering how to have wider impact? Possibly your a junior developer in your first programming job.&lt;/p&gt;

&lt;p&gt;Please do apply if you&amp;#39;re keen, but don&amp;#39;t particularly align with one of these inflection points. These were just the ones that came to mind, but I&amp;#39;m happy to hear about other situations too!&lt;/p&gt;

&lt;h2&gt;Details:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Six sessions&lt;/li&gt;
&lt;li&gt;One hour each&lt;/li&gt;
&lt;li&gt;Once a month (February - July)&lt;/li&gt;
&lt;li&gt;Expect homework each session, around an hour a week or less&lt;/li&gt;
&lt;li&gt;Free! Kind of...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&amp;quot;Payment&amp;quot;&lt;/h3&gt;

&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don&amp;#39;t want your money - I want to help you and give back to our wonderful community! However, to make this work you need to be as committed as I am. The best way I know to quantify commitment between strangers is with money. So here are the rules for payment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You pay $300 upfront that I&amp;#39;ll hold, but not spend.&lt;/li&gt;
&lt;li&gt;I&amp;#39;ll transfer you $50 back after every session you attend. That way you get the whole amount if you show up for all six sessions.&lt;/li&gt;
&lt;li&gt;If you reschedule with less than 12 hours notice I will keep $25 to offset the annoyance.&lt;/li&gt;
&lt;li&gt;If you simply don&amp;#39;t show up then I keep the full $50. Again, I&amp;#39;d rather do the session, but if I gave up my evening sitting on a video call alone then I&amp;#39;d like to get my nails done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ve done this kind of payment before and have a track record of not stealing from anyone. The initial payment wouldn&amp;#39;t be due until after our &amp;quot;get to know you&amp;quot; session - don&amp;#39;t give money to strangers on the internet!&lt;/p&gt;

&lt;p&gt;If $300 is prohibitively expensive for you (student, unemployed, etc) please mention this in your application and we&amp;#39;ll figure something out. Again - I don&amp;#39;t want your money, I want your commitment.&lt;/p&gt;

&lt;h2&gt;Apply&lt;/h2&gt;

&lt;p&gt;Hard requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify as a woman&lt;/li&gt;
&lt;li&gt;Available for sessions during the evening AEDT&lt;/li&gt;
&lt;li&gt;Good enough internet connection for an hour long video call&lt;/li&gt;
&lt;li&gt;Sessions in English&lt;/li&gt;
&lt;li&gt;Applications due by Jan 14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdQhhjugyT-wIfMKzmw4n6KHAQE3AFIgpqtTT4kCeFnVOD22A/viewform?usp=sf_link"&gt;Apply here!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll contact everyone during the last week of January. I&amp;#39;ll schedule a 30 min &amp;quot;get to know you&amp;quot; session to double check that we want to commit to this process together.&lt;/p&gt;

&lt;h2&gt;Additional info&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a bit more about me, so you know what I have experience with and where I might help you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completed a computer science degree in the US; some friends have done coding bootcamps, but I don&amp;#39;t have first hand experience here&lt;/li&gt;
&lt;li&gt;Lived and worked in Silicon Valley for a couple of years&lt;/li&gt;
&lt;li&gt;Moved to New Zealand and then Sydney (covering visa stress, feeling like an outsider, and settling in)&lt;/li&gt;
&lt;li&gt;Worked for a couple of small startups&lt;/li&gt;
&lt;li&gt;Now work for Atlassian&lt;/li&gt;
&lt;li&gt;Moved from developer to manager&lt;/li&gt;
&lt;li&gt;I&amp;#39;ve been involved in the community over the years, working with: Women Who Code Sydney, Rails Girls, Girl Geek Dinners, and run a few programming related study groups&lt;/li&gt;
&lt;li&gt;I also have a passion for public speaking, especially for new or hesitant speakers&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Three tips for reports to improve one-on-ones: Part 1</title>
    <link rel="alternate" href="http://lucybain.com/blog/2019/better-one-on-ones-pt1/"/>
    <id>http://lucybain.com/blog/2019/better-one-on-ones-pt1/</id>
    <published>2019-01-18T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Having better one-on-ones (1:1s) is usually left up to the manager. There are &lt;a href="https://www.atiim.com/blog/use-these-6-rules-to-build-better-one-on-ones/"&gt;loads&lt;/a&gt; &lt;a href="https://www.officevibe.com/blog/guide-to-better-one-on-ones"&gt;of&lt;/a&gt; &lt;a href="https://www.themuse.com/advice/how-to-have-oneonones-that-actually-matter"&gt;articles&lt;/a&gt; &lt;a href="https://www.booktopia.com.au/radical-candor-kim-scott-malone/prod9781509845385.html"&gt;and&lt;/a&gt; &lt;a href="https://www.booktopia.com.au/management-stephen-robbins/prod9781488609077.html"&gt;books&lt;/a&gt; written with the manager in mind. But focusing exclusively on only one of the attendees drastically reduces how useful the meeting can be. In this post I’ll focus on ways that the team member (report) can improve a 1:1.&lt;/p&gt;

&lt;p&gt;Your 1:1s have &lt;em&gt;improved&lt;/em&gt; if you get more &lt;em&gt;value&lt;/em&gt; out of the meetings. A 1:1 can be “bad” in that you received criticism during the meeting. However it can still be &lt;em&gt;valuable&lt;/em&gt; in that the feedback helped you be better at your job. Similarly a 1:1 can be “good” in that you and your manager had a nice chat. However a 1:1 like that might not be &lt;em&gt;valuable&lt;/em&gt; in that you and your manager might already have a pretty solid relationship. (Yes, I know having “just a chat” can be valuable from time to time, but if that’s all you’re doing it’s unlikely that the relationship is helping you with your job.)&lt;/p&gt;

&lt;p&gt;The tips below set a decent baseline. Many of you are probably already doing all of these things - that’s great! Some of you will find starting with these three tips to be challenging enough for now - that’s great too! I’ll add some more posts with tips later on. These suggestions should continue to increase how much value you get from your 1:1s, and will be a little more difficult than the tips below.&lt;/p&gt;

&lt;h2&gt;Tips&lt;/h2&gt;

&lt;h3&gt;1. Actually have the meeting&lt;/h3&gt;

&lt;p&gt;Think back over the past six months, have you and your manager met regularly?&lt;/p&gt;

&lt;p&gt;If you don’t have a 1:1 calendar slot already then add one in. Pick a regular time to meet with your manager. Make sure that time usually works for them. Add a calendar event and invite them to it. Frequency varies a lot, so I recommend starting with every other week and adjusting from there. If having 1:1s at all is unusual at your company you might want to try for 30 minutes once a month and increase the frequency as you’re able.&lt;/p&gt;

&lt;p&gt;Some people have a meeting setup but don&amp;#39;t actually &lt;em&gt;have&lt;/em&gt; the meeting. Occasional misses are generally ok (people get sick and go on holidays), but if the meeting is skipped more than 25% of the time then it’s a problem.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;you&lt;/em&gt; are canceling then evaluate why that is and try to make a change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are the meetings at a bad time? Ask your manager if you can shift to a different time. Give a suggestion about when works better for you (in the morning right after standup, at 11:30 just before lunch, etc) and ideally check their calendar to make sure they’re free at the time you’re suggesting.&lt;/li&gt;
&lt;li&gt;Do you feel you have to get your work done and don’t have time for a meeting? Have an explicit conversation with your manager whenever you bail for this reason. Perhaps they agree with you in this particular situation (ideally you can reschedule) or perhaps they haven’t made the priorities clear.&lt;/li&gt;
&lt;li&gt;Do you not get value from the meetings? Keep reading! Make some changes and give them another chance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your &lt;em&gt;manager&lt;/em&gt; is canceling the 1:1s…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;consider that having 1:1s with you is part of your managers job. You have a right to expect these meetings just as much as they have a right to expect you do your job.&lt;/li&gt;
&lt;li&gt;raise it with them. This is hard. I won’t judge you if you don’t go down this path. Ideally you can ask them why they keep canceling and come up with a solution. Perhaps your manager thinks you’re doing so well you don’t need regular meetings! Whatever the reason letting them know you &lt;em&gt;want&lt;/em&gt; to meet at least helps set expectations.&lt;/li&gt;
&lt;li&gt;raise it with their boss. Again difficult, but possibly easier than speaking directly to your manager. Perhaps your manager has too much going on but they haven’t been able to bring it up with their boss yet. Possibly they think they’re meeting with you more frequently than they really are (they have a lot of meetings, it’s easy to forget). Whatever the reason, raising this with their boss can give feedback and context and hopefully help your situation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2. Talk&lt;/h3&gt;

&lt;p&gt;If your manager is asking questions they want the answers! Answer with something more than just yes or no. If you need to, ask for some time to think over what your answer will be and respond at a later date (if this happens a lot ask them to share their questions in advance where possible). Awkward silences signal that you probably don’t want to be there - and it’s just as awkward for your manager as for you. Ideally bring something to contribute to the conversation as well, which brings us to…&lt;/p&gt;

&lt;h3&gt;3. Prepare for your 1:1&lt;/h3&gt;

&lt;p&gt;Before your next 1:1 take some time to think about what &lt;em&gt;you&lt;/em&gt; want to talk about. This doesn’t need to be a big ordeal, you can start with just 5 minutes. As you get more comfortable with it, you can take notes on what you’d like to discuss any time between meetings. Many people have a 1:1 page to jot down notes about what you’d like to discuss in your next meeting. Bonus points if you share this page with your manager.&lt;/p&gt;

&lt;p&gt;Suggested prompts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you want some feedback? Ideally ask for feedback on something specific rather than an open ended “do you have any feedback for me?” Yes, asking for general feedback is ok too, but you’ll probably get better quality feedback if you ask for it on a particular topic. You’ll get even better feedback if you let your boss know you’ll be asking for that feedback in advance!&lt;/li&gt;
&lt;li&gt;Would you like some advice? Maybe you’ve had a difficult personal interaction, perhaps your work took longer to get reviewed than you would have liked, possibly you’re uncertain about how to get started with your next piece of work.&lt;/li&gt;
&lt;li&gt;What’s something you’ve done well? 1:1s are a great time to highlight your accomplishments.&lt;/li&gt;
&lt;li&gt;Do you have some insights into your team? What do you see that your manager might have missed? Maybe someone took the time to explain a new concept to you, perhaps you’re concerned about friction between team members, possibly your recent retrospective got you thinking about a new process you’d like to try out.&lt;/li&gt;
&lt;li&gt;How are things progressing on your project? Are you happy with the quality you’re producing or do you need more time to better plan the work? What process might need changing?&lt;/li&gt;
&lt;li&gt;What can your manager change to help you and the team? Your manager probably doesn’t get a lot of feedback from their reports - a 1:1 can be a good time give them some.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;If you don’t have regular 1:1s with your manager, start by setting one up. From there you can work on having deeper and more useful conversations during your meetings. Regular time with you manager can be really helpful. These meetings can be even more valuable if you contribute too!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>React JS: what is a PureComponent?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2018/react-js-pure-component/"/>
    <id>http://lucybain.com/blog/2018/react-js-pure-component/</id>
    <published>2018-01-14T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Early on, React developers had the idea of “pure” components. This concept went by a variety of names (stateful/pure, smart/dumb, container/presentational, etc.) but were all fairly similar. These components still used the &lt;code&gt;React.Component&lt;/code&gt; class, but the idea provided a useful mental model for developers to work with. &lt;/p&gt;

&lt;p&gt;But then on June 29, 2016 React 15.3 was released a new &lt;code&gt;PureComponent&lt;/code&gt; class. The &lt;code&gt;PureComponent&lt;/code&gt; kind of summed up the previous concept of “pure” components, and put a large speed boost in as well. This article is about the &lt;code&gt;PureComponent&lt;/code&gt; class, and only touches on the “pure” component mental model. I’ve added some links in the references section to cover why the idea of “pure” components is useful. Because of &lt;code&gt;PureComponent&lt;/code&gt;’s emphasis on performance, this is also a continuation from my previous article about &lt;a href="/blog/2017/react-js-when-to-rerender/"&gt;when React re-renders&lt;/a&gt; (I recommend reading that one first if you haven’t already).&lt;/p&gt;

&lt;h3&gt;What problem does it solve?&lt;/h3&gt;

&lt;p&gt;By default, a plain &lt;code&gt;React.Component&lt;/code&gt; has &lt;code&gt;shouldComponentUpdate&lt;/code&gt; set to always return &lt;code&gt;true&lt;/code&gt;. This is good because it means React errs on the side of always updating the component in case there’s any new data to show. However, it’s bad because it means React might trigger unnecessary re-renders. One way to deal with these extra re-renders is to change the &lt;code&gt;shouldComponentUpdate&lt;/code&gt; function to check when your component needs to update (see my &lt;a href="/blog/2017/react-js-when-to-rerender/"&gt;previous post&lt;/a&gt; for more information).&lt;/p&gt;

&lt;p&gt;Another way to stop extra re-renders is to use a &lt;code&gt;PureComponent&lt;/code&gt;. Let’s build out the example from the previous performance post...&lt;/p&gt;

&lt;h3&gt;Example setup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’ve written intentionally bad code in the &lt;code&gt;componentDidMount&lt;/code&gt; methods throughout. This is to keep the examples small and to show some gotchas along the way. Please do not write this kind of code for reals!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PureComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;take out the trash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;walk dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exercise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read about React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fun!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Todos render called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoItem&lt;/span&gt;
                &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TodoItem render called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✓&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;▢&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                (&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;)
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todos&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s bigger than most of the examples I write, but it’s all relevant - promise! We’ll break it down (feel free to skip down to the next section if the above is clear to you already):&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;Todos&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;First we have a React component, this is the one that &lt;code&gt;ReactDOM&lt;/code&gt; will render (see the last line in the example).&lt;/p&gt;

&lt;p&gt;We have the constructor method so we can set the initial state - in this case an array of &lt;code&gt;todos&lt;/code&gt;, each of which has &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, and &lt;code&gt;notes&lt;/code&gt; attributes. (Typically this kind of state would be passed in through &lt;code&gt;props&lt;/code&gt; but I’ve written it in the &lt;code&gt;state&lt;/code&gt; to keep the example smaller and self contained.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;take out the trash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;walk dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exercise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read about React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fun!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then there’s the &lt;code&gt;componentDidMount&lt;/code&gt; method. Its only purpose is to change the state every second so we can see how React deals with those changes. Right now it updates &lt;code&gt;state.todos&lt;/code&gt; to be the same as the previous &lt;code&gt;state.todos&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally &lt;code&gt;Todos&lt;/code&gt; has the render method. It renders a list of the &lt;code&gt;TodoItem&lt;/code&gt; components, and passes in their respective &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, and &lt;code&gt;notes&lt;/code&gt; attributes. The main thing we’re interested in here is seeing when this component is rendered. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Todos render called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoItem&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;TodoItem&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;It’s a lot simpler than &lt;code&gt;Todos&lt;/code&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Yes, that’s right &lt;code&gt;TodoItem&lt;/code&gt; inherits from &lt;code&gt;React.Component&lt;/code&gt; just like &lt;code&gt;Todos&lt;/code&gt;, but it only implements the &lt;code&gt;render&lt;/code&gt; function (which is required) to display the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, and &lt;code&gt;notes&lt;/code&gt; values. Here again we’re mostly interested in knowing &lt;em&gt;when&lt;/em&gt; the &lt;code&gt;render&lt;/code&gt; method is called, not really what is displayed (yet!).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TodoItem render called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✓&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;▢&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            (&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;)
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;What’s the problem?&lt;/h3&gt;

&lt;p&gt;Well, if you &lt;a href="https://codepen.io/lbain/pen/GyOXye"&gt;look at it yourself&lt;/a&gt; you’ll see the console spits out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;Todos render called
TodoItem render called
TodoItem render called
TodoItem render called
Todos render called
TodoItem render called
TodoItem render called
TodoItem render called
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Over and over, every second.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That seems silly, the data isn’t even changing!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You’re right - there’s no need to re-render any of these components because the data doesn’t change. But React doesn’t know this - the &lt;code&gt;setState&lt;/code&gt; method from the &lt;code&gt;onComponentDidmount&lt;/code&gt; triggers a re-render every second for the &lt;code&gt;Todos&lt;/code&gt; component and its children.&lt;/p&gt;

&lt;h3&gt;How do we re-render less?&lt;/h3&gt;

&lt;p&gt;Let’s focus on &lt;code&gt;TodoItem&lt;/code&gt; for now. It’s rendering three times for each &lt;code&gt;Todos&lt;/code&gt; render so we can optimise it first. We’ll talk about &lt;code&gt;Todos&lt;/code&gt; later on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can we fix &lt;code&gt;TodoItem&lt;/code&gt; re-rendering too much?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That brings us nicely to the &lt;code&gt;React.PureComponent&lt;/code&gt; this post is supposed to be all about. The &lt;code&gt;TodoItem&lt;/code&gt; doesn’t need to re-render since none of its data changes. The &lt;code&gt;props&lt;/code&gt; coming in each time are the same, and there’s no internal &lt;code&gt;state&lt;/code&gt;. Let’s try converting &lt;code&gt;TodoItem&lt;/code&gt; to a &lt;code&gt;React.PureComponent&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PureComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// This line changed&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TodoItem render called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✓&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;▢&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                (&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;)
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you make that change in the &lt;a href="https://codepen.io/lbain/pen/GyOXye"&gt;CodePen&lt;/a&gt; you’ll see the following in the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;Todos render called
TodoItem render called
TodoItem render called
TodoItem render called
Todos render called
Todos render called
Todos render called
Todos render called
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the initial &lt;code&gt;TodoItem&lt;/code&gt;s render, they never render again &lt;em&gt;even though their parent renders multiple times.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boom.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did you catch that? We just saved ourselves a &lt;em&gt;bunch&lt;/em&gt; of unnecessary &lt;code&gt;TodoItem&lt;/code&gt; renders simply by converting it to a &lt;code&gt;PureComponent&lt;/code&gt;. Aw yeah.&lt;/p&gt;

&lt;h3&gt;How does &lt;code&gt;PureComponent&lt;/code&gt; work?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Ok, you’ve had your big reveal. How does it actually work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You know how we’d normally need to write our own &lt;code&gt;shouldComponentUpdate&lt;/code&gt; to check if the component should re-render or not? Well, React has written that check for us in &lt;code&gt;PureComponent&lt;/code&gt;. The &lt;a href="https://github.com/facebook/react/blob/9d310e0bc7b9d5ce39d82536dfcb67f98462a346/packages/react-test-renderer/src/ReactShallowRenderer.js#L170-L173"&gt;relevant shouldComponentUpdate code&lt;/a&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPureReactComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;shouldUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shallowEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                   &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shallowEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React checks both &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt;. Throughout this article I focus on &lt;code&gt;state&lt;/code&gt; because it makes the examples easier and self contained, however it’s important to note that everything we talk about here equally applies to &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js"&gt;Here&lt;/a&gt; is the code for that &lt;code&gt;shallowEqual&lt;/code&gt; function. Of particular interest is the &lt;a href="https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js#L35-L37"&gt;method documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Performs equality by iterating through keys on an object and returning false when any key has values which are not strictly equal between the arguments. Returns true when the values of all keys are strictly equal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;But wait, what does “strictly equal” mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is a &lt;strong&gt;very&lt;/strong&gt; good question, so we’ll dedicate a whole section to it.&lt;/p&gt;

&lt;h3&gt;Side note: shallow equality&lt;/h3&gt;

&lt;p&gt;Feel free to skip if this isn’t new for you.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;shallow&lt;/em&gt; equality check means that JS only checks that the value’s object &lt;em&gt;ids&lt;/em&gt; (as in, the memory address for where JS stores the information for that particular object) are the same, not that their &lt;em&gt;content&lt;/em&gt; is the same. So here’s an example where shallow equality is what you and I would usually think of as “equal”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;const value = 'cat';

const item1 = value;
const item2 = value;

console.log(item1 === item2); // true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here’s an example where JS’s definition of “equal” and our definition might differ:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;const value = 'cat';

const array1 = [value];
const array2 = [value];

console.log(array1 === array2); // false
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though we can clearly see the &lt;em&gt;content&lt;/em&gt; of &lt;code&gt;array2&lt;/code&gt; is the same as &lt;code&gt;array1&lt;/code&gt; JS registers them as different since their &lt;em&gt;ids&lt;/em&gt; are different. In this case we created two completely separate arrays, that just happened to have the same data in them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s the alternative?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can check inside each item and see if all the values are the same - this is called a “deep” equality check. Something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Why would shallow equality ever be useful?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, it’s &lt;em&gt;really&lt;/em&gt; fast. In the previous example we have to loop through every single item in the array to find that the arrays are equal. Assuming you’ve got more than one thing in your array that gets slow quickly.&lt;/p&gt;

&lt;h3&gt;Warning: PureComponent does a shallow equality check&lt;/h3&gt;

&lt;p&gt;React uses a shallow equality check because it is is &lt;em&gt;way&lt;/em&gt; more performant than doing a deep equal. In fact, React doesn’t even offer doing a deep equality check. You can do a shallow check (with &lt;code&gt;PureComponent&lt;/code&gt;), write your own check (with &lt;code&gt;shouldComponentUpdate&lt;/code&gt;), or not check at all and just always re-render (the default). It’s too risky for React to do a deep equality check since you might have really deeply nested data. Instead React errs on the side of not checking and doing the re-render automatically.&lt;/p&gt;

&lt;p&gt;All if this is generally good news if your component is working with shallow-equality-friendly data. If the  &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;prop&lt;/code&gt; value ids change when their content changes then the components re-render when the should - yay! However, if you don’t handle your data properly, then you can accidentally not re-render when you should - boo!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could you give an example?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As it happens, we already have one ready to go! Let’s leave &lt;code&gt;TodoItem&lt;/code&gt; as a &lt;code&gt;PureComponent&lt;/code&gt;, and change &lt;code&gt;Todo&lt;/code&gt;&amp;#39;s &lt;code&gt;componentDidMount&lt;/code&gt; to mess with some data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// new line&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run this you’ll see the “done” state for the first todo item flash on and off every second. This is good news - we’re updating the data and it’s displaying properly.&lt;/p&gt;

&lt;p&gt;But... let’s try this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smelly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new line&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first todo item &lt;em&gt;should&lt;/em&gt; re-render every second with a new “smelly” note displaying. But it doesn’t, there’s just the initial render (without the “smelly” note), and that’s it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why doesn’t React re-render?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because doing a &lt;code&gt;push&lt;/code&gt; on an array &lt;a href="http://gunnariauvinen.com/difference-between-concat-and-push-in-javascript/"&gt;does &lt;em&gt;not&lt;/em&gt; create a &lt;em&gt;new&lt;/em&gt; array.&lt;/a&gt; When React does the shallow equality check for the &lt;code&gt;PureComponent&lt;/code&gt; it only checks &lt;code&gt;oldState.notes === newState.notes&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt; &lt;em&gt;even though&lt;/em&gt; the data in &lt;code&gt;notes&lt;/code&gt; has changed. In order to render this properly we need to change &lt;code&gt;TodoItem&lt;/code&gt; back to a &lt;code&gt;React.Component&lt;/code&gt;, &lt;strong&gt;or&lt;/strong&gt; we can use &lt;code&gt;forceUpdate&lt;/code&gt; to tell React that the data actually has changed. However using &lt;code&gt;forceUpdate&lt;/code&gt; is kind of a code smell, so I won’t cover it here.&lt;/p&gt;

&lt;h3&gt;Warning: think of the children!&lt;/h3&gt;

&lt;p&gt;A common pitfall when converting from &lt;code&gt;Component&lt;/code&gt; to &lt;code&gt;PureComponent&lt;/code&gt; is to forget that the children need to re-render too. As with all React - if the parent doesn’t re-render the children won’t either. So if you have a &lt;code&gt;PureComponent&lt;/code&gt; with children, those children can only update if the parent’s &lt;code&gt;state&lt;/code&gt; or &lt;code&gt;props&lt;/code&gt; are shallowly different (causing the parent to re-render).&lt;/p&gt;

&lt;p&gt;You can only have a &lt;code&gt;PureComponent&lt;/code&gt; parent if you know none of the children should re-render if the parent doesn’t re-render. Let’s see an example of this pitfall by converting the &lt;code&gt;Todos&lt;/code&gt; component from a &lt;code&gt;Component&lt;/code&gt; to a &lt;code&gt;PureComponent&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PureComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// new line&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// new line&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// new line&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, most of the code is the same. We’ve changed &lt;code&gt;Todos&lt;/code&gt; to be a &lt;code&gt;PureComponent&lt;/code&gt; and the &lt;code&gt;componentDidMount&lt;/code&gt; to return the original &lt;code&gt;oldState&lt;/code&gt; object rather than creating a new object (as before).&lt;/p&gt;

&lt;p&gt;Now we &lt;em&gt;should&lt;/em&gt; see the first todo item flashing its &lt;code&gt;done&lt;/code&gt; state on and off. But it doesn’t, again there is only the initial render and that’s it. This happens because &lt;code&gt;Todos&lt;/code&gt; is now a &lt;code&gt;PureComponent&lt;/code&gt;, when the shallow equal check happens with &lt;code&gt;oldState === newState&lt;/code&gt; we find exactly the same object (again, even though the content of that object has changed). So &lt;code&gt;Todos&lt;/code&gt; never re-renders, so its &lt;em&gt;children&lt;/em&gt; also never re-render. We can fix this really easily by simply changing &lt;code&gt;Todos&lt;/code&gt; back to a &lt;code&gt;Component&lt;/code&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PureComponent&lt;/code&gt; is very powerful in that it can help you limit the number of unnecessary re-renders that occur. However, it can also cause surprising gotchas. The key thing to keep in mind is that &lt;code&gt;PureComponent&lt;/code&gt; only does a shallow equality check on &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; before deciding if it should re-render or not. And that has a cascade effect on if its children re-render or not. So use &lt;code&gt;PureComponent&lt;/code&gt; and love the performance gains, but be sure to check that it is always re-rendering when it should. When in doubt fall back to a &lt;code&gt;Component&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;p&gt;I read a &lt;em&gt;lot&lt;/em&gt; of posts and questions about &lt;code&gt;PureComponent&lt;/code&gt;, &lt;code&gt;Component&lt;/code&gt;, and &lt;code&gt;shouldComponentUpdate&lt;/code&gt; for this, so the below is not a complete list of resources. Hopefully they’re the most useful though!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/react-api.html#reactpurecomponent"&gt;React docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/41340697/react-component-vs-react-purecomponent"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shakacode.com/react-purecomponent-pitfalls-d057882f4b6e"&gt;Rob Wise&lt;/a&gt; lists more pitfalls of using &lt;code&gt;PureComponent&lt;/code&gt; - a good one to check if your &lt;code&gt;PureComponents&lt;/code&gt; are rendering &lt;em&gt;more&lt;/em&gt; than you’d expect (whereas I focused on not triggering re-renders enough)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/modus-create-front-end-development/component-rendering-performance-in-react-df859b474adc"&gt;Grgur Grisogono&lt;/a&gt; did some performance testing on &lt;code&gt;PureComponent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;Dan Abramov&lt;/a&gt; and &lt;a href="https://jaketrent.com/post/smart-dumb-components-react/"&gt;Jake Trent&lt;/a&gt; discuss what “pure” components are&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: ES6’s spread operator for objects</title>
    <link rel="alternate" href="http://lucybain.com/blog/2018/js-es6-spread-operator/"/>
    <id>http://lucybain.com/blog/2018/js-es6-spread-operator/</id>
    <published>2018-01-02T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Over two years ago I wrote about &lt;a href="/blog/2015/js-destructuring-assignment-es6/"&gt;destructuring assignment&lt;/a&gt;, which has been one of my favourite features of ES6. Since then I’ve also come to value destructuring’s “sibling” feature - the spread operator. Although you can use the spread operator on other things, this post focuses on how to use it with objects.&lt;/p&gt;

&lt;h2&gt;What it does&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You talk about an “operator,” but what is it actually?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To start with, the spread operator is &lt;code&gt;...&lt;/code&gt;. So you can write something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// this isn't useful (yet), but it is valid&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As of ES6, using three dots in a row is valid code and pretty useful code at that! &lt;code&gt;...&lt;/code&gt; &lt;em&gt;spreads&lt;/em&gt; out the content so you can manipulate it more easily.&lt;/p&gt;

&lt;p&gt;Let’s look at some examples.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;...&lt;/code&gt; to copy an object&lt;/h2&gt;

&lt;p&gt;It’s pretty common to want to base one object off of another, something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;kitten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Doesn’t that have a bug?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes! &lt;code&gt;kitten&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; refer to the same object. We didn’t create a new object for &lt;code&gt;kitten&lt;/code&gt; to reference, we just pointed &lt;code&gt;kitten&lt;/code&gt; to the existing &lt;code&gt;cat&lt;/code&gt; object. You can see that here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 &amp;lt;-- problem!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the spread operator we can easily create a new object with all the same properties of an existing object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kitten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- changed&lt;/span&gt;
&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4 &amp;lt;-- fixed!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that we created a new object for &lt;code&gt;kitten&lt;/code&gt; to reference when we used the spread operator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can you explain the &lt;code&gt;{ ...cat }&lt;/code&gt; line a bit?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing, the &lt;code&gt;{&lt;/code&gt; tells Javascript that we want to create a new object. Next, the &lt;code&gt;...cat&lt;/code&gt; says that we want that new object to contain all the same contents as the &lt;code&gt;cat&lt;/code&gt; object. And finally, &lt;code&gt;}&lt;/code&gt; means that we’re finished with that object and don’t want to add anything else to the object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s fairly common for people to expect &lt;code&gt;...&lt;/code&gt; to &lt;a href="https://stackoverflow.com/questions/38416020/deep-copy-in-es6-using-the-spread-sign"&gt;produce a deep copy&lt;/a&gt;. Let’s be cleare The spread operator &lt;strong&gt;does not deep copy&lt;/strong&gt;, while the spread operator does create a &lt;em&gt;new object&lt;/em&gt;, the properties’ &lt;em&gt;values&lt;/em&gt; are simply references and not new instances. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;toys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;catnip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kitten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kitten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["mouse", "yarn"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["mouse", "yarn"] &amp;lt;-- problem!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So using the spread operator to create new objects might be fine, it might cause unintended side effects. Please be careful!&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;...&lt;/code&gt; as an object base&lt;/h2&gt;

&lt;p&gt;So far we&amp;#39;ve only used &lt;code&gt;...&lt;/code&gt; to create a copy of an existing object, but it’s actually more powerful than that. We’ll use a different example to add a &lt;em&gt;new property&lt;/em&gt; to an object created with the spread operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;woof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4 }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4, sound: "woof" }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, you can see the &lt;code&gt;cat&lt;/code&gt; object wasn’t changed, but the new &lt;code&gt;dog&lt;/code&gt; object has all the properties from &lt;code&gt;cat&lt;/code&gt; as well as the new &lt;code&gt;sound&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But cats make sounds too, what happens if you assign the sound property to &lt;code&gt;cat&lt;/code&gt;?&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;woof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4, sound: "meow" }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4, sound: "woof" }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everything works exactly like you’d hope it would! The &lt;code&gt;cat&lt;/code&gt; object has the new &lt;code&gt;sound&lt;/code&gt; property, with &lt;code&gt;&amp;quot;meow&amp;quot;&lt;/code&gt; correctly assigned. And the &lt;code&gt;dog&lt;/code&gt; object is created with the &lt;code&gt;sound&lt;/code&gt; property set to &lt;code&gt;&amp;quot;woof&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s check out those lines more closely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;woof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like before, the &lt;code&gt;{&lt;/code&gt; starts a new object. Then using the spread operator on &lt;code&gt;cat&lt;/code&gt; adds all the &lt;code&gt;cat&lt;/code&gt; properties to the new object. Our new &lt;code&gt;sound: &amp;quot;woof&amp;quot;&lt;/code&gt; &lt;strong&gt;overwrites&lt;/strong&gt; the existing &lt;code&gt;sound&lt;/code&gt; property from &lt;code&gt;cat&lt;/code&gt;. And finally we have the &lt;code&gt;}&lt;/code&gt; to finish our new object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The line order maters for this to work. We need &lt;code&gt;sound: &amp;quot;woof&amp;quot;&lt;/code&gt; to come &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;...cat&lt;/code&gt; so the overwrite happens. This version does &lt;em&gt;not&lt;/em&gt; do what we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;woof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4, sound: "meow" }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { legs: 4, sound: "meow" }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we put the &lt;code&gt;...cat&lt;/code&gt; after the &lt;code&gt;sound: &amp;quot;woof&amp;quot;&lt;/code&gt; the &lt;code&gt;cat&lt;/code&gt;&amp;#39;s &lt;code&gt;sound&lt;/code&gt; property overwrote the &lt;code&gt;sound: &amp;quot;woof&amp;quot;&lt;/code&gt; property.&lt;/p&gt;

&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Well there you have it. The spread operator is super handy for quickly creating and updating objects. It has other uses too (see the Mozilla docs below), but I’ve found I use this version the most. Enjoy!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator"&gt;Mozilla&lt;/a&gt; documentation&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/tc39/proposal-object-rest-spread"&gt;proposal&lt;/a&gt; to add the spread operator to JS&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>New role (same company)</title>
    <link rel="alternate" href="http://lucybain.com/blog/2017/new-role/"/>
    <id>http://lucybain.com/blog/2017/new-role/</id>
    <published>2017-10-14T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;You may &lt;a href="/blog/2015/new-job/"&gt;recall&lt;/a&gt; I started working at Atlassian in March of 2015. I’ve been a front end developer for them for about two years, but have wanted to move to a team lead position for a little while. I was offered the position, and spent three months being an “unofficial” team lead. In July all the paperwork was done and dusted and I had officially started my new role.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what do you do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, that’s a good question. The team lead role at Atlassian isn’t very well defined. It grew organically as needed, and no one has put a strict definition on it. This is great because it means the role is what you make of it. This sucks because it’s sometimes hard to know what’s expected of you and how you’re tracking. From speaking with other team leads I knew this was a potential problem going into the role, so I made sure to speak with many other team leads and get a better understanding of the role. Here are some of my notes and thoughts from those conversations.&lt;/p&gt;

&lt;h2&gt;Three hats&lt;/h2&gt;

&lt;p&gt;Team leads wear three hats: process refinement (which is usually project management), people development, and programming. As a team lead you’re always trying to balance these three areas - each one comes with their own difficulties and advice.&lt;/p&gt;

&lt;h2&gt;Process (project management)&lt;/h2&gt;

&lt;p&gt;This is about defining scope, breaking features into tickets, keeping tabs, and generally getting a project from “in progress” to “done”.&lt;/p&gt;

&lt;p&gt;A constant question is “how can we do it better?” Sometimes “it” has already happened, so I’m looking for ways to do it better next time. Sometimes “it” is still happening so we can trial process changes right then. However, one team lead I talked to wisely gave me this instruction:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Part of your job is offer the team stability - don’t change too much too quickly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, I took notes about things I thought we should trial in our next feature, and made sure to ask the team what things they were interested in changing. Changing process seems to be a slow but constant part wearing this hat.&lt;/p&gt;

&lt;p&gt;Process is also about all the stuff that happens “around” your team - do they have a pull request that’s waiting for review from someone not in your subteam? Do we need to talk to someone from quality engineering or security about this feature? How can you find your unknown unknowns? Thankfully I got this piece of stellar advice early on:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Moving away from an individual contributor role is all about relationships: with your team, boss, triad, other decision-makers for the product, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So one of my early actions was setting up one-on-ones with everyone I thought might be useful: the PM for the feature, the designer, our architect, our quality engineer, other team leads, and of course my boss and everyone on the team. I didn’t have all of these every week, but knowing there was a time and place to raise questions meant that I could dump something on a page and it would get answered in our one-on-one rather than needing to find “just 5 minutes” to ask someone something. I’ve since scaled back on some of these meetings, but building those relationships early on was incredibly beneficial.&lt;/p&gt;

&lt;p&gt;Shipping is the most visible part of your job which means it’s also kind of a vanity metric. After all, weekly checkins are way nicer if your project is going well. It’s also easier to know how you’re performing in this area (a boolean “is your project running on time?” is a good starting point). As it happens, this is the hat your boss is the most interested in, since they look good if their features are shipping on time too.&lt;/p&gt;

&lt;p&gt;All of this adds up to getting sucked into just this part your job and ignoring the other two. It’s easy to do, and it feels productive, but it’s not the whole of your job description. Which leads us to...&lt;/p&gt;

&lt;h2&gt;People development&lt;/h2&gt;

&lt;p&gt;There’s a bunch of official people stuff team leads do: one-on-ones, yearly reviews, promotions, approving leave etc. But these aren’t directly related to growing people. As much as pushing to get a feature across the line is how you’re evaluated day to day...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ultimately you are measured by how well you can grow your reports.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I thought of being a team lead this was the area I was most interested in. I’ve done a lot of tutoring and mentoring over the years and I’ve always loved it. This is not that. This is nothing like that. A key aspect I overlooked is that in tutoring and mentoring it’s assumed that you know more than the person you’re working with. Being a team lead blows that assumption right out of the water. I’m lucky enough to work with people who are much better developers than I am, so how can I possibly make them better?&lt;/p&gt;

&lt;p&gt;I’m still very much figuring this part out. So far I think two aspects of people development are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Giving people time and authority to invest in themselves.&lt;/strong&gt; It’s hard to spontaneously remember to reflect on your work, so it’s part of a team lead’s job to make time for that. Having a weekly (or however often) one-on-one is official time to talk about how someone is improving. To give them tips on how they could get better faster. To talk about how awesome they already are. Maybe you set goals and track them, maybe you keep checking in and asking “what are you the most proud of this week?”, maybe it’s about giving them space to vent so they can go back to their desk feeling heard and able to move on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Giving people work that will help them improve.&lt;/strong&gt; When assigning tasks with the project management hat on, the question is “who can get this done the fastest?” On the flip side, when you’re wearing your people development hat the question is “who would benefit the most from doing this?” There’s a time for both of these questions in a project, but it’s important to make sure you’re asking the people development one periodically because it’s easy to get caught up in the project management side (see “vanity metric” above).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The other side of people development is gaining trust from your team. The best advice I received here is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Team members should never have surprises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They should know what work is coming up, what the timeline is, what your expectations are. It is on you to constantly communicate all of this with them so they are never surprised. This is especially true for end of year reviews (which I haven’t done yet), so there’s an emphasis on frequent feedback in one-on-ones to be sure the both of you are on the same page before the “official” page is presented.&lt;/p&gt;

&lt;p&gt;This is the hat your team is the most interested in. They want to be do amazing work, and it’s on you to facilitate that.&lt;/p&gt;

&lt;h2&gt;Programming&lt;/h2&gt;

&lt;p&gt;The early (and realistic) answers I got from talking with other team leads boiled down to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You won’t do a lot of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s understandable - you’re now wearing two more hats than you were before. And both of those hats come with a lot more meetings. There’s just less time at your desk in usable chunks. A few team leads I talked to had some hacks for this - all one-on-ones on one day so the other days have more usable chunks of time; no meetings one day a week; work from home periodically; no meetings in the mornings, etc. But overall no one seems to have a solution for it. It’s up to each team lead to decide how much time they can, should, and want to dedicate to programming.&lt;/p&gt;

&lt;p&gt;This predictably leads to an identity crisis. Programming is what you were originally hired for, you have the most professional experience here, and feel the most accomplished writing code. When things are going wrong with the other areas of your job it’s easy and tempting to come back to programming as a “safe place” where the problems are known or unknown, but never “pending”. When we were wrapping up our last feature all I wanted to do was code - our team was in a time crunch and everyone was pushing really hard to get it all done (and tested!) before we released. I desperately wanted to help them, and the way I’d done that best in the past was to crank out some bit of Javascript, close a ticket and do it again. This time things were different. I had to listen to the advice I had gotten:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever you’re going to pick up a programming task as yourself “is this the best way to help my team?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;generally the answer was “no” (not least because most of the tasks were Java and I would cause more problems than solutions if I tried that...).
I’ve talked to some team leads about how they stay in the loop. A few answers have been:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take on more pull requests than you would usually. This is a double win - you know who’s working on what and what feedback they’re getting about it, you also can read and learn from code without needing to do the “last 20%” to get the pull request merged.&lt;/li&gt;
&lt;li&gt;Pick up work, but never anything that’s critical path. This lets you keep your hands dirty, but means that if an urgent meeting pops up in the middle of your day you don’t need to find someone to take over your work.&lt;/li&gt;
&lt;li&gt;Pair program with your team. (This is my suggestion and I’m totally biased here because I love pairing.) Another double win of building relationships with your team and learning what’s happening with the code at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I think this is the hardest thing to balance. At the end of the day, no one benefits from your keeping your skills up as much as you do. If you can help your team work better “one developer” worth then you’ve already replaced yourself. It’s hard to justify why you should take time away from optimising your team further in favour of getting one ticket across the line.&lt;/p&gt;

&lt;h2&gt;Closing&lt;/h2&gt;

&lt;p&gt;I’ve now been in this role for about six months, and I’m really enjoying it. These new hats are keeping me busy and engaged. Here’s hoping I keep learning these new skills and keep up my programming skills at the same time!&lt;/p&gt;
</content>
  </entry>
</feed>
