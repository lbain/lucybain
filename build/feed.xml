<!DOCTYPE html>
<html>
  <head>
    <meta content='width=device-width, initial-scale=1' name='viewport'>
    <meta charset='utf-8'>
    <meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>
    <link href='/images/favicon.ico' rel='icon' type='image/ico'>
    <link href='http://fonts.googleapis.com/css?family=Crimson+Text:400,700|Nobile:400,700' rel='stylesheet' type='text/css'>
    <title>Lucy Bain</title>
    <link href="/stylesheets/application.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="/stylesheets/code.css" media="screen" rel="stylesheet" type="text/css" />
    <script src="/javascripts/all.js" type="text/javascript"></script>
  </head>
  <body class='feed'>
    <div class='header'>
      <div id='menu'>
        <div class='nav-open'>
          <ul>
            <li></li>
            <li></li>
            <li></li>
          </ul>
        </div>
        <ul class='nav'>
          <li>
            <a class="" href="/">Connect with me</a>
          </li>
          <li>
            <a class="" href="/resources/job/">My job</a>
          </li>
          <li>
            <a class="" href="/resources/">Resources</a>
          </li>
          <li>
            <a class="" href="/blog/">Blog</a>
          </li>
        </ul>
      </div>
    </div>
    <div class='content'>
      <?xml version="1.0" encoding="UTF-8"?>
      <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Lucy Bain</title>
        <id>http://lucybain.com/blog</id>
        <link href="http://lucybain.com/blog"/>
        <link href="http://lucybain.com/feed.xml" rel="self"/>
        <updated>2014-02-23T00:00:00Z</updated>
        <author>
          <name>Lucy Bain</name>
        </author>
        <entry>
          <title>RubyConf Australia 2014</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/RubyConfAU/"/>
          <id>http://lucybain.com/blog/2014/RubyConfAU/</id>
          <published>2014-02-23T00:00:00Z</published>
          <updated>2014-02-26T10:52:04+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I just finished RubyConf Australia, and what a wild ride! I've never been to a conference before, and I was a bit nervous what it would be like. Would people be welcoming? Would I know where to be? Would everyone be taking notes, or no one? Turns out I needn't have worried. The Ruby community was just as amazing as ever.
      &lt;/p&gt;
      &lt;p&gt;
        I met a bunch of new people - many women programmers, and many people hoping to make programming more available through mentorship and code education. While I enjoyed meeting all my fellow rubists, these connections were especially fulfilling since they touch on issues near and dear to my heart. I met &lt;a href="http://twitter.com/amandamelb"&gt;Amanda&lt;/a&gt;, who's poised to be the leader for &lt;a href="http://twitter.com/RailsGirls_MELB"&gt;Rails Girls Melbourne&lt;/a&gt;, and a few members of her study group. I'm sure any additional communication between the various Rails Girls chapters in Australia will be helpful. I was even put in contact with the woman who runs Rails Girls in Wellington, NZ. A nice reminder that this is an international organisation, not just Australia.
      &lt;/p&gt;
      &lt;p&gt;
        Much of the event was about facilitating these kinds of connections - people who are interested in the same kind of things finding each other and learning from everyone's experiences. But of course the main focus was the talks, which I loved attending! I haven't been at school in quite a while, all of my "continuing education" has been done on my own - books people have recommended, articles online, websites, coding exercises. While I have gained from these, it is never as concentrated an effort, and usually in isolation. Going to the conference let me learn with my friends and discuss the talks after. It was great to feel part of the community while learning - answering questions as able, asking my own to better understand what was discussed.
      &lt;/p&gt;
      &lt;p&gt;
        Unfortunately I had to duck out on the morning of the second day. I'm in the process of moving apartments and had some paperwork to deal with. It certainly hurt the feel of the day, I was much lower energy - late nights, preping for &lt;a href="/blog/2014/Rails-Girls-Next/"&gt;Rails Girls Next&lt;/a&gt;, a lot of learning, and the stress of moving made me exhausted. But I still got something from the talks, and I enjoyed continuing on the conversations I started with people the day before. Apparently conferences encourage people to become fast friends!
      &lt;/p&gt;
      &lt;p&gt;
        All in all, I'm really glad I received a scholarship ticket for my work with Rails Girls, otherwise I probably wouldn't have gone. And my work paid me to be there, which was very appreciated as well. The next Ruby Conf will be in Melbourne, and I'm hoping I can attend that one as well!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>Rails Girls Next</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/Rails-Girls-Next/"/>
          <id>http://lucybain.com/blog/2014/Rails-Girls-Next/</id>
          <published>2014-02-19T00:00:00Z</published>
          <updated>2014-02-26T12:33:08+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        Wahoo! Rails Girls Next happened without a (major) hitch today! I am so happy with how it went, and to have helped with these girls' continuing Ruby education.
      &lt;/p&gt;
      &lt;h2&gt;
        The event
      &lt;/h2&gt;
      &lt;p&gt;
        I've shared the &lt;a href="https://docs.google.com/presentation/d/19Jj8I4CVRe8k2sP8m17PMk0PXwbY0646MxWDS6VJ5yo/edit?usp=sharing"&gt;slides&lt;/a&gt; used for keeping track of time, so you can see the schedule we actually used on the day. We had &lt;a href="http://lbain.github.io/rails-girls-next/"&gt;three exercises&lt;/a&gt; for the girls to work through - test driven development (TDD), focused work with Ruby, and learning how the web works with Sinatra.
      &lt;/p&gt;
      &lt;p&gt;
        When the girls checked in they sat at one of six tables and tried to connect to the internet. Once it was time to start, each table was assigned one of three exercises (two tables per exercise). The goal was for each girl to do all of the exercises, and for all of the exercises to be running at any given time. Thus everyone would rotate through the exercises, and no single exercise would be overwhelmed with participants. We also strongly encouraged the girls to work in pairs, and to switch pairs after each exercise; the time they got up to switch exercises was a good time to switch pairs.
      &lt;/p&gt;
      &lt;p&gt;
        When the girls started a new exercise they were given a brief overview of the exercise by the mentor at the table and then they got started. We didn't offer much guidance since we wanted the girls to work in their pairs and rely on each other, but mentors were readily available for struggling groups. After about an hour all the attendees who had been working on the same exercise (about nine) gathered with their mentors (two mentors per exercise). For the next 15 minutes they had a group discussion about the solutions they had come up with, as well as some good practices and tips from the mentors.
      &lt;/p&gt;
      &lt;p&gt;
        After a short break (time to move to another exercise area and find a new pair partner) this process was repeated for each of the remaining exercises. Once the exercises were over the girls were asked to fill out a short survey about how they found the day. Finally, the last part of the day was a discussion with the whole group. This was framed as a retro (although it wasn't a full agile retrospective), and gave the girls, mentors, and myself a time and place to discuss how the day went and what could have been better. I found it extremely valuable to hear which exercises "worked" for the girls, and which ones needed tweaking, how the mentors felt about the discussions after each exercise, what things everyone would like to see changed before the next event, and others. Much of what was discussed was also in the feedback form, but I wanted to make sure the girls gave their feedback independently, before they could be influenced by listening to other participants.
      &lt;/p&gt;
      &lt;h2&gt;
        Lessons learned
      &lt;/h2&gt;
      &lt;p&gt;
        We had the normal problems with the girls connecting to conference (aka hotel) wifi. I'm not sure if there's any way to fix this - hotels never seem to believe how much internet programmers use. There was also some concern about power for the attendee's computers so the conference coordinators and myself went out to buy a few more power strips. In the end it seemed everyone who needed power could get it, or they were pairing on another computer that had enough power. In the future I'd like to check the power situation in advance.
      &lt;/p&gt;
      &lt;p&gt;
        From an organisers point of view, the biggest problem was that I hadn't asked about food times. I'd assumed we'd be able to eat when we were ready, but since we were getting food from the hotel this was not the case. It caused some problems with the timing for the day, but worked out overall. This is something that's easily avoidable - I just needed to ask the conference organisers in advance.
      &lt;/p&gt;
      &lt;p&gt;
        The exercises were (mostly) hosted on GitHub pages. This was convenient since GitHub took care of the hosting and coding everything was pretty straight forward. However, I'd never actually written a site in pure HTML, and man, it is annoying! In the future I'd write any sites I need using whatever method I'm used to (this blog is written with &lt;a href="middlemanapp.com"&gt;Middleman&lt;/a&gt;, I recommend checking it out). Writing pure HTML is just time consuming, and there's no need - we've moved on from then! That said, I'm hoping to move the exercises back to Rails Girls so other groups can use them in the future.
      &lt;/p&gt;
      &lt;p&gt;
        Although I had a clear idea in my head how the discussions after each exercise were supposed to go, I hadn't communicated that as well as was needed to the mentors. I wanted that time to be for the girls to realise other people were running into the same problems they were and they weren't "dumb." I also wanted to end up with a whole stack of happy post-it notes with a list of all the things the girls had learned - what a great thing to look back on! Unfortunately my ideas for this time really only solidified about two days before the event, and I never met up with the mentors to talk about it. I'd like to have a better write up for the mentors for future events.
      &lt;/p&gt;
      &lt;p&gt;
        Overall the feedback was useful and positive, but one response talked about feeling depressed with how far behind they felt when compared to the other participants. Obviously I was very sad about this - Rails Girls is set up to help everyone succeed, and I hated to think something I had poured so much energy into had actually made someone feel worse about themselves. At least with this piece of honest feedback we can do something to make the exercises more approachable and/or make some &lt;em&gt;very&lt;/em&gt; beginner friendly exercises.
      &lt;/p&gt;
      &lt;p&gt;
        The most actionable piece of feedback is the ordering of the exercises. All of the girls seemed to find the TDD exercise the most approachable and the Ruby one the most challenging. So in the future I'd like for everyone to work on the same exercise at the same time. I'm not sure how to really encourage the girls to switch pairs between exercises, hopefully if there's an official "switch" time they'll do it themselves. And speaking of pairing, the other easily actionable feedback was that the Sinatra exercise didn't need pairing as it provided a clear enough walk through to work on alone.
      &lt;/p&gt;
      &lt;p&gt;
        At the end of the day, I'm really pleased with how the event went. I was blown away with how much the girls got done - massive props to them for sticking with the harder exercises and wanting to really understand it. And of course huge thanks to the mentors who gave up a day to help strangers learn to code. Hopefully the next Rails Girls Next event will run more smoothly and have more approachable exercises, but I think this was a pretty good starting point.
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>Git Branch Names on Command Prompt</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/git-branch-names-on-command-line/"/>
          <id>http://lucybain.com/blog/2014/git-branch-names-on-command-line/</id>
          <published>2014-02-13T00:00:00Z</published>
          <updated>2014-02-23T19:16:51+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I often forget which branch I'm on. Sure, I have &lt;code&gt;git branch&lt;/code&gt; aliased (it's probably one of my most frequently used commands) but sometimes I &lt;em&gt;know&lt;/em&gt; I'm on another branch. A few commits and merges later I find out I was wrong, and it's time for some branch cleaning.
      &lt;/p&gt;
      &lt;p&gt;
        Recently my coworker &lt;a href="https://plus.google.com/+SimonHildebrandt/"&gt;Simon&lt;/a&gt; gave me the following code:
      &lt;/p&gt;
      &lt;pre class="highlight plaintext"&gt;parse_git_branch() {&amp;#x000A;   git branch 2&amp;gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'&amp;#x000A;}&amp;#x000A;export PS1="\W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "&lt;/pre&gt;
      &lt;p&gt;This code should go in your &lt;code&gt;~/.bash_profile&lt;/code&gt;. Once you've added it, you'll need to source with &lt;code&gt;$ source ~/.bash_profile&lt;/code&gt; (or &lt;code&gt;$ . ~/.bash_profile&lt;/code&gt; if you want to save a few key strokes!).&lt;/p&gt;
      &lt;p&gt;
        Your prompt will be &lt;code&gt; current-directory (branch-name) $&lt;/code&gt; with your branch name in green. Mine looks like this:
        &lt;div class='center'&gt;
          &lt;img alt="lucybain (blog) $" src="/images/blog/git-branch-prompt.png" /&gt;
        &lt;/div&gt;
        Now you can see what branch your on right where you'll be committing it. Nice, huh? Hopefully you'll never run a &lt;code&gt;reset --hard&lt;/code&gt; on the wrong branch again!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>Sublime Multi-Cursor</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/sublime-multi-cursor/"/>
          <id>http://lucybain.com/blog/2014/sublime-multi-cursor/</id>
          <published>2014-02-03T00:00:00Z</published>
          <updated>2014-02-15T22:18:21+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I use Sublime. I know, I know, I'm not a &lt;a href="http://xkcd.com/378/"&gt;"real"&lt;/a&gt; dev. Whatever. It works for me. One of my favourite features is the multi-cursor. If you're a fellow Sublime user and aren't aware of this ability you should really check it out. Look at &lt;a href="http://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/"&gt;step 12&lt;/a&gt; for a little gif of what it looks like.
      &lt;/p&gt;
      &lt;p&gt;
        This is an awesome tool for making bulk edits in a file. &lt;code&gt;cmd + mouse-click&lt;/code&gt; is where I started, but then &lt;a href="https://twitter.com/gerwinvanroyen"&gt;@gerwinvanroyen&lt;/a&gt; told me about selecting a bunch of lines and then doing &lt;code&gt;cmd + shift + L&lt;/code&gt; to select all the lines individually. Also running a &lt;code&gt;find all&lt;/code&gt; in Sublime and then using the multiple cursors from there has been really helpful.
      &lt;/p&gt;
      &lt;p&gt;
        So go try it out - it's pretty powerful!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>validate vs. validateS</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/validate-vs-validates/"/>
          <id>http://lucybain.com/blog/2014/validate-vs-validates/</id>
          <published>2014-01-15T00:00:00Z</published>
          <updated>2014-02-15T22:18:21+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;p&gt;
        I stumbled across this validation gotcha a while back, but that was before I had this awesome blog ;) I think this is a pretty big one, hope this help someone!
      &lt;/p&gt;
      &lt;p&gt;
        &lt;code&gt;::ActiveModel::Validations&lt;/code&gt; treats &lt;code&gt;validates&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; differently. &lt;code&gt;validates&lt;/code&gt; is used for normal validations &lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, and the like. &lt;code&gt;validate&lt;/code&gt; is used for custom validation methods &lt;code&gt;validate_name_starts_with_a&lt;/code&gt;, or whatever crazy method you come up with. These methods are clearly useful and help keep data clean.
      &lt;/p&gt;
      &lt;p&gt;
        That's all well and good, except for one tiny thing:
        &lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record'&lt;/span&gt;&amp;#x000A;&amp;#x000A;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&amp;#x000A;  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Validations&lt;/span&gt;&amp;#x000A;&amp;#x000A;  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&amp;#x000A;  &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&amp;#x000A;  &lt;span class="c1"&gt;# Note the validate without an s!&lt;/span&gt;&amp;#x000A;&lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&amp;#x000A;&amp;#x000A;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec'&lt;/span&gt;&amp;#x000A;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/autorun'&lt;/span&gt;&amp;#x000A;&amp;#x000A;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'Foo'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&amp;#x000A;  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'fails to actually validate'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&amp;#x000A;    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&amp;#x000A;    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_false&lt;/span&gt;&amp;#x000A;  &lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&lt;span class="k"&gt;end&lt;/span&gt;&amp;#x000A;&lt;/pre&gt;
        That test &lt;em&gt;fails&lt;/em&gt;.
      &lt;/p&gt;
      &lt;p&gt;
        Go ahead, copy that into a new file and run it for yourself. I'll wait. Yep, it fails. There's no value set for &lt;code&gt;bar&lt;/code&gt; and yet &lt;code&gt;foo.valid?&lt;/code&gt; still returns &lt;code&gt;true&lt;/code&gt;. This is a problem.
      &lt;/p&gt;
      &lt;p&gt;
        So what's going on here? I asked &lt;a href="http://stackoverflow.com/questions/18140898/whats-the-difference-between-validate-and-validates"&gt;StackOverflow&lt;/a&gt;, and it turns out there's a totally reasonable explanation. &lt;code&gt;validate&lt;/code&gt; is written to look for a custom validation method, this time one called &lt;code&gt;bar&lt;/code&gt;. It just so happens there is a &lt;code&gt;bar&lt;/code&gt; method, set from the &lt;code&gt;attr_accessor :bar&lt;/code&gt; line. That &lt;code&gt;bar&lt;/code&gt; method returns doesn't return &lt;code&gt;false&lt;/code&gt;, nor does it put an error messages on the main object's body. Therefore &lt;code&gt;validate&lt;/code&gt; interprets the call to &lt;code&gt;bar&lt;/code&gt; as a success and doesn't invalidate the object.
      &lt;/p&gt;
      &lt;p&gt;
        This explanation also means there's no way for the code to "fail loudly" - to alert us that we haven't purposefully defined a custom method when we use &lt;code&gt;validate&lt;/code&gt;. So I'd suggest grepping through your codebase for &lt;code&gt;validate :&lt;/code&gt; and making very sure that's what you actually want.
      &lt;/p&gt;
      &lt;p&gt;
        So remember folks, &lt;code&gt;validates&lt;/code&gt; is for Rails validators (and custom validator classes ending with &lt;code&gt;Validator&lt;/code&gt; if that's what you're into), and &lt;code&gt;validate&lt;/code&gt; is for your custom validator methods. Don't make a typo!
      &lt;/p&gt;
      </content>
        </entry>
        <entry>
          <title>TDD Day 5</title>
          <link rel="alternate" href="http://lucybain.com/blog/2014/tdd-day-5/"/>
          <id>http://lucybain.com/blog/2014/tdd-day-5/</id>
          <published>2014-01-09T00:00:00Z</published>
          <updated>2014-02-15T22:18:21+11:00</updated>
          <author>
            <name>Article Author</name>
          </author>
          <content type="html">&lt;h3&gt;
        What did I do today?
      &lt;/h3&gt;
      &lt;p&gt;
        I said at the beginning that I wasn't a huge fan of TDD. It just doesn't seem like a great idea to me. Today I took some time to explore that, and it turns out, I'm not the only one. Most people have mixed reviews, and that's exactly what I'm experiencing now.
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="http://www.writemoretests.com/2011/09/test-driven-development-give-me-break.html"&gt;Test-Driven Development? Give me a break…&lt;/a&gt; said that &lt;b&gt;requiring&lt;/b&gt; TDD was a bad idea, but that the general principal is probably good. It's possible to have too much of a good thing.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/a/98566"&gt;Description of someone's negative TDD experience&lt;/a&gt; - "Like everything that comes under the 'Agile' banner, TDD is something that sounds good in theory, but in practice it's not so clear how good it is (and also like most 'Agile' things, you are told that if you don't like it, you are doing it wrong)." So much this. I like the idea of being able to refactor at will, but it doesn't seem to work like that in real life.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/a/178858"&gt;On designing with TDD&lt;/a&gt; pointed out that just because code was written with TDD doesn't mean it's good code. Writing good code is hard, TDD is one of the (many) tools and ideas programmers have available to write better code since it (theoretically) allows us to refactor more easily.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="http://programmers.stackexchange.com/questions/41409/why-does-tdd-work"&gt;Discussion on "engineering" side of development&lt;/a&gt; - "The false safe feelings that an 'all green' outcomes ... may be interepreted as 'the system is fine', when it really means 'the system is as good as our testing strategy'." This has bitten me a few times. We don't shoot for 100% test coverage at work, but we still feel ok to push code when we've got a green build.
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h3&gt;
        Reflections
      &lt;/h3&gt;
      &lt;p&gt;
        I'm still not convinced about TDD. I'm hoping I'll have a more informed opinion at the end of these TDD sessions, but right now I'm a bit perplexed. It does make me feel better to know that I'm not the only one questioning TDD as the "right" way to do things.
      &lt;/p&gt;
      &lt;p&gt;
        On a positive note, I submitted a pull request today and one of my coworkers complemented me on my tests! So I guess these exercises are working :)
      &lt;/p&gt;
      </content>
        </entry>
      </feed>
    </div>
    
  </body>
  <script src='//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js'></script>
  <script src='/javascripts/all.js'></script>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    
    ga('create', 'UA-45866381-1', 'lucybain.com');
    ga('send', 'pageview');
  </script>
</html>
