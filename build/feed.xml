<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2014-10-01T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS Immediately Invoked Function Expressions</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/immediately-invoked-function-expression/"/>
    <id>http://lucybain.com/blog/2014/immediately-invoked-function-expression/</id>
    <published>2014-10-01T00:00:00Z</published>
    <updated>2014-10-02T23:02:58+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explain why the following doesn&amp;#39;t work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What does &amp;quot;IIFE&amp;quot; even stand for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;IIFE stands for Immediately Invoked Function Expressions&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great, so what are IIFEs?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An IIFE is an anonymous function that is created and then immediately invoked. It&amp;#39;s not called from anywhere else (hence why it&amp;#39;s anonymous), but runs just after being created.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;(function () {
  return 5;
} ());
// returns 5 right away
&lt;/pre&gt;
&lt;p&gt;They can be used to guard against &lt;strong&gt;unintended effects of hoisting:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code snip-it is from &lt;a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression#Evaluation_context"&gt;Wikipedia&lt;/a&gt;. I didn&amp;#39;t understand how it worked right away, but I wrote the explanation following the snip-it to clear up my confusion.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var v = 1;
var getValue = (function(x) {
  return function() { return x; };
}(v));
v = 2;

getValue(); // returns 1
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;I can&amp;#39;t even read that, what do all the nested functions mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s investigate the IIFE assigned to &lt;code&gt;getValue&lt;/code&gt; by rewriting it with a helper function:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var v = 1;

function helperFunction(x) {
  return function() {
    return x;
  };
}
var getValue = helperFunction(v); // returns an anonymous function

v = 2;

getValue(); // invokes that function
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What happens when the &lt;code&gt;var getValue = helperFunction(v)&lt;/code&gt; line is called?&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;helperFunction(v)&lt;/code&gt; gets called with the current value of &lt;code&gt;v&lt;/code&gt;, which is 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;helperFunction&lt;/code&gt; gets executed, with the param &lt;code&gt;x&lt;/code&gt; set to 1&lt;/li&gt;
&lt;li&gt;The anonymous function returned by &lt;code&gt;helperFunction&lt;/code&gt; gets created, still with &lt;code&gt;x&lt;/code&gt; set to 1&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;getValue&lt;/code&gt; is set to the result of &lt;code&gt;helperFunction&lt;/code&gt;, which is&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function() {
  return 1;
};
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So now things look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var v = 1;
var getValue = function() {
                 return 1;
               };
v = 2;

getValue();
&lt;/pre&gt;
&lt;p&gt;And from here it is hardly surprising that &lt;code&gt;getValue()&lt;/code&gt; returns 1.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What would have happened without the IIFE?&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var v = 1;
var getValue = function() {
                  return v;
               };
v = 2;

getValue(); // returns 2
&lt;/pre&gt;
&lt;p&gt;Although the &lt;code&gt;return v&lt;/code&gt; is written when &lt;code&gt;v&lt;/code&gt; is 1, by the time &lt;code&gt;getValue&lt;/code&gt; is called &lt;code&gt;v&lt;/code&gt; has been set to 2. Thus &lt;code&gt;getValue()&lt;/code&gt; actually returns 2.&lt;/p&gt;

&lt;p&gt;IIFEs can also be used to enforce &lt;strong&gt;private variables and methods:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, the example is taken by &lt;a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression#Establishing_private_variables_and_accessors"&gt;Wikipedia&lt;/a&gt; (slightly simplified), and the explanation is my own.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var counter = (function(){
  var i = 0;

  return {
    get: function(){
      return i;
    },
    set: function( val ){
      i = val;
    }
  };
}());

counter.get(); // returns 0
counter.set( 3 ); // returns undefined
counter.get(); // returns 3
counter.i; // returns undefined
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Again with the confusing nested functions! Can I have a rewrite?&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function helperFunction(){
  var i = 0;

  return {
    get: function(){
      return i;
    },
    set: function( val ){
      i = val;
    }
  };
};

var counter = helperFunction();

counter.get(); // returns 0
counter.set( 3 ); // returns undefined
counter.get(); // returns 3
counter.i; // returns undefined
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Ok, that&amp;#39;s a bit clearer, but what is &lt;code&gt;counter&lt;/code&gt; actually set to?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;counter&lt;/code&gt; is set to the return value of &lt;code&gt;helperFunction&lt;/code&gt;, that is just this bit:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;function()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;i;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;function(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;val;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll notice &lt;code&gt;var i&lt;/code&gt; doesn&amp;#39;t appear anywhere in there. &lt;code&gt;i&lt;/code&gt; is defined elsewhere in the &lt;code&gt;helperFunction&lt;/code&gt; / IIFE. Since the return value of &lt;code&gt;helperFunction&lt;/code&gt; doesn&amp;#39;t give explicit access to &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;counter&lt;/code&gt; doesn&amp;#39;t have access.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fine, so if that&amp;#39;s all that &lt;code&gt;counter&lt;/code&gt; has access to, how does &lt;code&gt;counter.get()&lt;/code&gt; return a value?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Scopes! The scope from &lt;code&gt;helperFunction&lt;/code&gt; has access to &lt;code&gt;i&lt;/code&gt;. The object returned by &lt;code&gt;helperFunction&lt;/code&gt; (a.k.a &lt;code&gt;counter&lt;/code&gt;) has access to all the variables defined in &lt;code&gt;helperFunction&lt;/code&gt;. It works like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Call to &lt;code&gt;counter.get()&lt;/code&gt; goes and looks at the &lt;code&gt;get&lt;/code&gt; function defined in &lt;code&gt;helperFunction&lt;/code&gt;...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;get: function(){
    return i;
   }
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; function looks for it&amp;#39;s local scope, which is &lt;code&gt;helperFunction&lt;/code&gt; ...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function helperFunction(){
var i = 0;

return {
  get: function(){
    return i;
  },
  set: function( val ){
    i = val;
  }
};
};
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;code&gt;helperFunction&lt;/code&gt; is a definition for &lt;code&gt;i&lt;/code&gt;...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var i = 0;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So &lt;code&gt;get&lt;/code&gt; can return 0!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;And now back to your scheduled program&lt;/h3&gt;

&lt;p&gt;With all that explanation behind us, let&amp;#39;s go back to the original question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explain why the following doesn&amp;#39;t work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;foo&lt;/code&gt; isn&amp;#39;t being called! Here&amp;#39;s a rewrite:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function foo(){
}();
&lt;/pre&gt;
&lt;p&gt;This is a function &lt;strong&gt;definition&lt;/strong&gt;, it defines &lt;code&gt;foo&lt;/code&gt;. But it&amp;#39;s not a function &lt;strong&gt;expression&lt;/strong&gt; - that is, it&amp;#39;s not understood by the JS parser to actually call a function.&lt;/p&gt;

&lt;p&gt;For the parser, things look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function foo(){
} // ok, done with that function definition
  // (silly human left off the semicolon, how embarrassing!)

(); // Are they trying to call something? What's the function's name?
    // PARSE ERROR
&lt;/pre&gt;
&lt;p&gt;In order to prep the parser that we&amp;#39;re actually dealing with a function &lt;strong&gt;expression&lt;/strong&gt; we have to wrap things up in &lt;code&gt;()&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;(
  function foo(){
  }()
);
&lt;/pre&gt;
&lt;p&gt;Now the parser reads this as:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;( // oh goody, we're going to call some function expressions!
  function foo(){ // here's the function definition
  }() // and here's where the function is actually called
);
&lt;/pre&gt;
&lt;p&gt;And to finish it all off with a return statement and everything:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;(function foo(){
  return 'bar';
}());
&lt;/pre&gt;
&lt;p&gt;For more information read Ben Alman&amp;#39;s post &lt;a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/"&gt;introducing IIFEs&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS prototypal inheritance</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/prototypal-inheritance/"/>
    <id>http://lucybain.com/blog/2014/prototypal-inheritance/</id>
    <published>2014-09-30T00:00:00Z</published>
    <updated>2014-10-01T22:40:42+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explain how prototypal inheritance works&lt;/h2&gt;

&lt;p&gt;JS objects each have a &amp;quot;hook&amp;quot; to it&amp;#39;s parent object, or prototype. Obviously everything the child object defines it has access to, but it also can climb up the prototype tree to access it&amp;#39;s parent&amp;#39;s (or ancesstor&amp;#39;s) methods and properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(the obligatory animal) Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Animal(){
  this.alive = true;
}

function Mammal() {
  this.warmBlooded = true;
  this.hasTail = false;
  this.move = function(){
    if(this.hasTail){
      return "Moving with tail";
    } else {
      return "Moving with tail";
    }
  };
}
Mammal.prototype = new Animal();

function Cat(name) {
  this.sound = 'Meow';
  this.hasTail = true;
  this.name = name;
  this.greet = function() {
    return "Hello, I'm " + this.name;
  };
}
Cat.prototype = new Mammal();

var mittens = new Cat('Mittens');

mittens.sound; // returns 'Meow' (as defined on Cat)

mittens.hasTail; // returns true (as defined on Cat)
  // Although Mammal also defines hasTail, the Cat's
  // definition takes precidence

mittens.warmBlooded; // returns true (as defined on Mammal)

mittens.alive; // returns true (as defined on Animal)

mittens.greet() // returns "Hello, I'm Mittens"
  // greet() accesses the "name" attribute defined on Cat

mittens.move() // returns "Moving with tail"
  // move() accesses the "hasTail" attribute which is defined
  // on Cat and Mammal. Although Mammal defines the move function
  // "this" refers to mittens, so move() uses mitten's "hasTail"
  // attribute, which is set to true
&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a longer explaination from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Mozilla&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS "this"</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/explaination-of-this/"/>
    <id>http://lucybain.com/blog/2014/explaination-of-this/</id>
    <published>2014-09-29T00:00:00Z</published>
    <updated>2014-10-01T22:41:06+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Explain how this works in JavaScript&lt;/h2&gt;

&lt;p&gt;Huh, well that&amp;#39;s something I&amp;#39;ve been trying to figure out as I work with JS. &lt;code&gt;this&lt;/code&gt; still doesn&amp;#39;t make perfect sense to me. But here&amp;#39;s my current understanding...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;this&lt;/code&gt; is the context the code is running in&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, the context seems to change a lot, and I find it rather confusing. So I signed upf for an &lt;a href="http://derickbailey.com/email-courses/masteringthis/"&gt;email series&lt;/a&gt; on how &lt;code&gt;this&lt;/code&gt; can change. Here&amp;#39;s a sweeping overview of that series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; refers to the window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At it&amp;#39;s simplest, &lt;code&gt;this&lt;/code&gt; is the window itself without anything fancy going on. You can call &lt;code&gt;this&lt;/code&gt; in the console directly and get Window.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; refers to the object it&amp;#39;s being called from&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAge&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// returns 37
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can see the call to &lt;code&gt;this.birthYear&lt;/code&gt; in the &lt;code&gt;getAge&lt;/code&gt; function references the &lt;code&gt;person&lt;/code&gt;&amp;#39;s &lt;code&gt;birthYear&lt;/code&gt;. That is the &lt;code&gt;this&lt;/code&gt; refers to it&amp;#39;s parent object. As a Ruby developer &lt;code&gt;this&lt;/code&gt; is similar to &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; refers to the element the event is bound to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs true
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here the &lt;code&gt;this&lt;/code&gt; refers to the link the user clicked on, just like &lt;code&gt;event.target&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; refers to the context that was explicitly set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apparently you can use &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; and pass a context explicitly. In that case &lt;code&gt;this&lt;/code&gt; refers to the passed context.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;passableContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'world'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passableContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// returns 'Hello world!'
&lt;/span&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>JS event delegation</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/event-delegation/"/>
    <id>http://lucybain.com/blog/2014/event-delegation/</id>
    <published>2014-09-25T00:00:00Z</published>
    <updated>2014-10-01T22:26:04+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  I'm continuing my JS learning and found a list of &lt;a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions"&gt;front end interview questions&lt;/a&gt;. There's a section devoted to JS on there for me to work through. If they're important enough to know in an interview I should probably know about them too.
&lt;/p&gt;
&lt;h2&gt;Explain event delegation&lt;/h2&gt;
&lt;p&gt;
  Well I'm glad you asked. As it turns out we covered this topic in my &lt;a href="http://codesydney.com"&gt;JS study group&lt;/a&gt; when I wrote my &lt;a href="code-sydney-work/tic-tac-toe/"&gt;Tic Tac Toe game.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  Event delegation is when you bind an event listener to a parent (or ancestor) element rather than the element(s) you are particularly interested in. When the event is triggered you can check the event target to make sure it was actually the triggered on the element of interest. In general this would be inefficient as you're now listening to events on the parent, and have to filter out any that aren't on the particular element of interest. However, event delegation is particularly useful when you have many siblings (or decedents of the ancestor) that you're interested in.
&lt;/p&gt;
&lt;p&gt;
  A simple example is as follows:
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;ul&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; First list element &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; Second list element &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;li&amp;gt; Third list element &amp;lt;/li&amp;gt;&amp;#x000A;&amp;lt;/ul&amp;gt;&amp;#x000A;&lt;/pre&gt;
&lt;p&gt;
  While it would be possible to bind to the individual &lt;code&gt;li&lt;/code&gt; elements it would require 3 listeners. Using event delegation it is possible to bind one event listener to the &lt;code&gt;ul&lt;/code&gt; element and just check if the event's target is an li element (very likely in this case...).
&lt;/p&gt;
&lt;p&gt;
  For my Tic Tac Toe game I listened to all click events on the board, and then checked the particular cell they clicked on, rather than listening for events on all the cells at once.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sublime Text Macros</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/sublime-macros/"/>
    <id>http://lucybain.com/blog/2014/sublime-macros/</id>
    <published>2014-06-18T00:00:00Z</published>
    <updated>2014-06-18T13:23:40+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  My coworker users vim, and has a snazzy macro to put a &lt;code&gt;binding.pry&lt;/code&gt; wherever he using a keyboad shortcut. I thought it was a neat trick (and he mentioned something about Sublime not being a real editor), so I decided to implement it for Sublime as well.
&lt;/p&gt;
&lt;p&gt;
  I looked up &lt;a href="http://docs.sublimetext.info/en/latest/extensibility/macros.html"&gt;how to make macros&lt;/a&gt; and wrote one for adding &lt;code&gt;binding.pry&lt;/code&gt;. Basically you need to use &lt;code&gt;control + q&lt;/code&gt; to start and stop your macro recording. Then you save the macro by going to &lt;code&gt;Tools/Save Macro...&lt;/code&gt;. You should name it something memerable, like &lt;code&gt;add_binding&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Ok, now we've got our macro, and you can invoke it by going to &lt;code&gt;Tools/Macros/User/add_macro&lt;/code&gt;. (Note: you might need to restart Sublime first.) But going to the menu each time is lame, we're better than that.
&lt;/p&gt;
&lt;p&gt;
  Let's add a key binding!
&lt;/p&gt;
&lt;p&gt;
  I've done &lt;a href="http://docs.sublimetext.info/en/latest/customization/key_bindings.html"&gt;key bindings&lt;/a&gt; in the &lt;a href="/blog/2014/Sublime-Auto-Indent/"&gt;past&lt;/a&gt;, but not &lt;a href="http://superuser.com/questions/609057/how-do-i-assign-a-keyboard-shortcut-to-recorded-macro-in-sublime-text"&gt;with macros&lt;/a&gt;. I chose to use &lt;code&gt;command + b&lt;/code&gt; for mine (you might have that map to build, just a heads up...). So my key binding looked like this:
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;
  Awesome, now &lt;code&gt;command + b&lt;/code&gt; will add a &lt;code&gt;binding.pry&lt;/code&gt; inline. Handy!
&lt;/p&gt;
&lt;p&gt;
  But I wanted more, a &lt;code&gt;- binding.pry&lt;/code&gt; in haml, and a &lt;code&gt;debugger&lt;/code&gt; in javascript. I also wanted to use the same key binding. I didn't want to think about if I'm in haml or JS.
&lt;/p&gt;
&lt;p&gt;
  Creating the macros was the same, but I needed the key bindings to know what kind of file I was in. I looked into how to make &lt;a href="http://www.guiguan.net/how-to-set-a-key-binding-in-sublime-text-based-on-the-file-type-the-command-is-running-on/."&gt;key bindings source aware&lt;/a&gt;. I also needed to know how &lt;a href="https://gist.github.com/iambibhas/4705378"&gt;Sublime names file types&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  Putting it all together, the final key bindings look like this:
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"source.ruby,source.ruby.rails"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&amp;#x000A;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_haml_binding.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text.haml"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&amp;#x000A;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"super+b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run_macro_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Packages/User/add_debugger.sublime-macro"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;  &lt;/span&gt;&lt;span class="s2"&gt;"context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"equal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"operand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"source.js,source.coffee"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&amp;#x000A;&lt;/span&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Next up: Front end</title>
    <link rel="alternate" href="http://lucybain.com/blog/2014/front-end/"/>
    <id>http://lucybain.com/blog/2014/front-end/</id>
    <published>2014-03-13T00:00:00Z</published>
    <updated>2014-03-27T10:32:57+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  For the next 12-14 months I'd like to learn front end dev.
&lt;/p&gt;
&lt;p&gt;
  I've been doing Rails for a little over 2 years now, and almost all of my training and experience has been heavily back end oriented. Pretty much everything I learned at uni was for back end languages and processes. I took all the web courses that were offered, but they didn't focus heavily on JS or CSS - although they did expose me to those concepts. Certainly everything I've done since uni has been back end (just a bit of Python, and then Ruby on Rails). I've learned heaps from this - MVC architecture, better programming design principles, some pretty awesome tricks Ruby can do, and a bunch more.
&lt;/p&gt;
&lt;p&gt;
  But I'd like to try my hand at some front end development. I think there's something satisfying to knowing people are seeing and interacting with what you're building - that happens more for front end. There's also a lot to learn about user interface design, and how to think like a user. It's also something that's definitely missing from my abilities. I always get a bit nervous when I need to do some front end tweaks, and any CSS change takes way longer than it really needs to. I'd like to move a bit closer to being "full stack" and not just boxing myself in to RoR back end.
&lt;/p&gt;
&lt;p&gt;
  So. What to do? I'm going to finish the &lt;a href="https://www.udacity.com/course/cs101"&gt;Python 101&lt;/a&gt; &lt;a href="/resources/udacity-python-study-group/"&gt;study group&lt;/a&gt; I organized. Just keeping up with the lectures for this class is taking a fair bit of time in the evenings. But then after that I'm planning on focusing on JS, CSS, and HTML with the goal of getting a front end job after a year.
&lt;/p&gt;
&lt;p&gt;
  I'm not really sure the best way to do that though. Some possible resources:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;a href="http://www.codecademy.com/"&gt;codecademy.com&lt;/a&gt; JS, jQuery, and HTML tracks
  &lt;/li&gt;
  &lt;li&gt;
    Getting a &lt;a href="https://github.com/sydjs/sydjs/wiki/Available-mentors"&gt;mentor&lt;/a&gt; from the SydJS community
  &lt;/li&gt;
  &lt;li&gt;
    Udacity's &lt;a href="https://www.udacity.com/course/cs256"&gt;Mobile Web Development&lt;/a&gt; to focus on responsive CSS
  &lt;/li&gt;
  &lt;li&gt;
    Udacity's &lt;a href="https://www.udacity.com/course/cs255"&gt;HTML5 Game Development&lt;/a&gt; focusing on... HTML5
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="http://shop.oreilly.com/product/9780596517748.do"&gt;JavaScript: The Good Parts&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="http://shop.oreilly.com/product/9780596805531.do"&gt;JavaScript: The Definitive Guide&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    And of course a series of exercises to practice and build a portfolio of sorts. Not sure exactly what this is going to entail...
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Do you have any suggestions? I'd love to work with a pretty clear plan, a curriculum if you will, and any ideas would be appreciated. Thank you!
&lt;/p&gt;
</content>
  </entry>
</feed>
