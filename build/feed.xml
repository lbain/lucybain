<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-03-26T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>In programming, what is an object?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/in-programming-what-is-an-object/"/>
    <id>http://lucybain.com/blog/2015/in-programming-what-is-an-object/</id>
    <published>2015-03-26T00:00:00Z</published>
    <updated>2015-03-29T20:07:08+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;m building up to the post I promised in my last blog: JS objects. We&amp;#39;ll start a bit smaller (as usual), with the concepts of object as a whole&lt;/p&gt;

&lt;h2&gt;Objects&lt;/h2&gt;

&lt;p&gt;Many languages have the concept of an &amp;quot;object.&amp;quot; It&amp;#39;s a way of organising code based around objects (things) with similar characteristics. As in, most dogs have four legs, most cars can drive forward, most houses have doors. Templates (often called Classes) are used to create objects. These templates come with empty fields (like a form), and sometimes with default values as well (such as four legs). So it could look something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;As you can see some fields (name and gender) are left blank, and some (arms and legs) have a default value associated. Again, this is a template, these values are assigned for each object (often called &amp;quot;instance of the class&amp;quot;). Mine would look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: _Lucy_
Gender: _Female_
Arms: _2_
Legs: _2_
&lt;/pre&gt;
&lt;p&gt;But objects hold more than just fields of information; they can also hold actions! Let&amp;#39;s build on our Human class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Name: ________
Gender: ________
Arms: _2_
Legs: _2_
Laugh: say "hahaha!"
Run: move your legs quickly
&lt;/pre&gt;
&lt;p&gt;So you can see the Human template now has two actions associated with it (laugh and run). Here&amp;#39;s the great part about objects: those actions are shared! I only have to write the method &lt;em&gt;once&lt;/em&gt; and all humans can now laugh and run. Pretty slick, huh?&lt;/p&gt;

&lt;p&gt;So a &lt;strong&gt;class&lt;/strong&gt; is a template of fields (variables) and actions (methods). Each &lt;strong&gt;object&lt;/strong&gt; fills out the template with it&amp;#39;s particular information. This is how you can write code like &lt;code&gt;me.name&lt;/code&gt; - the &lt;code&gt;me&lt;/code&gt; object has a &lt;code&gt;name&lt;/code&gt; field that keeps track of &lt;code&gt;me&lt;/code&gt;&amp;#39;s name. It&amp;#39;s also how you can write:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;fido.bark();
buddy.bark();
buster.bark();
princess.bark();
&lt;/pre&gt;
&lt;p&gt;but only need to implement the &lt;code&gt;bark&lt;/code&gt; action on the &lt;code&gt;Dog&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object Oriented Programming&lt;/strong&gt; is a way of organising your code into these objects for ease of use, readability, and understanding. It&amp;#39;s not the only &lt;a href="http://upload.wikimedia.org/wikipedia/commons/f/f7/Programming_paradigms.svg"&gt;programming paradigm&lt;/a&gt;, but it&amp;#39;s been popular over the years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/lii0o/eli5_what_do_it_programmer_developer_people_mean/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/j4dmq/eli5_what_is_objectoriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Still more &lt;a href="http://www.reddit.com/r/explainlikeimfive/comments/syjy3/can_someone_explain_object_oriented_programming/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: What datatypes are supported in Javascript?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-data-types/"/>
    <id>http://lucybain.com/blog/2015/js-data-types/</id>
    <published>2015-03-22T00:00:00Z</published>
    <updated>2015-03-28T17:36:38+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What data types are supported in Javascript?&lt;/h2&gt;

&lt;p&gt;According to the latest &lt;a href="http://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; release, these are the data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let&amp;#39;s run over those one by one:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pretty standard across all languages, booleans are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. They&amp;#39;re often used for conditional statements.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var raining = false;
if(raining) {
  bringUmbrella();
}
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Null and Undefined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve &lt;a href="/blog/2014/null-undefined-undeclared/"&gt;written&lt;/a&gt; about these before, so give that a read :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Things start to get more interesting here. The number data type covers integers and floats. That is, the &lt;code&gt;number&lt;/code&gt; type can handle normal numbers (1, 2, 3, 4), but also negative numbers and decimal places. This is different from many languages that have multiple data types to support different numbers.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var num = 1;
typeof num; // number

var num = -2;
typeof num; // number

var num = 0.3;
typeof num; // number
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As in most languages, JS strings are groupings of characters.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"hello world";
"I like cats";
'Testing "quotes';
&lt;/pre&gt;
&lt;p&gt;I don&amp;#39;t think they&amp;#39;re particularly interesting, but they are remarkably powerful. The main way we communicate with our users is the written word and &lt;code&gt;string&lt;/code&gt; makes this possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symbol&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is new in ECMAScript 6; check the &lt;a href="https://kangax.github.io/compat-table/es6/#Symbol"&gt;browser support&lt;/a&gt; before you use it.&lt;/p&gt;

&lt;p&gt;Symbols allow for private(ish) properties on objects. Before ECMAScript 6 all properties for an object could be accessed through &lt;code&gt;for in&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var dog = { bark: true }

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark"
  }
}
&lt;/pre&gt;
&lt;p&gt;Since symbols are not enumerable they cannot be accessed in this way. However, the symbolised properties are not truly private since they can be accessed directly.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var breed = Symbol("breed");
var dog = { bark: true };
dog[breed] = "Corgi";

for (var property in dog) {
  if (dog.hasOwnProperty(property)) {
    console.log(property); // logs "bark", but not "breed"
  }
}
console.log(dog[breed]); // logs "Corgi"
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everything in JS that we didn&amp;#39;t discuss above is an Object. So objects are the most complex data type; I&amp;#39;ll dedicate a future post to them since it&amp;#39;s a lot to cover here. But you&amp;#39;ve probably worked with objects in the past. They typically look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var cat = { sound: "meow" };

var fluffy = new Cat();

var whiskers = new function() {
    this.sound = "meow";
}
&lt;/pre&gt;
&lt;p&gt;But notice that we haven&amp;#39;t mentioned &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, or even &lt;code&gt;function&lt;/code&gt; that&amp;#39;s because, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#.22Normal.22_objects.2C_and_functions"&gt;officially&lt;/a&gt;, they&amp;#39;re all of type &lt;code&gt;object&lt;/code&gt;. Pretty crazy, huh? Again, I&amp;#39;ll write about this more in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/understandinges6/read/#leanpub-auto-symbols"&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: What is Javascript namespacing? How and where is it used?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-namespacing/"/>
    <id>http://lucybain.com/blog/2015/js-namespacing/</id>
    <published>2015-03-17T00:00:00Z</published>
    <updated>2015-03-27T22:45:14+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What is Javascript namespacing? How and where is it used?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Well, what is namespacing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Namespacing is a way of organising your code. It organises concepts and ideas into a group and gives the group a &lt;strong&gt;name.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So rather than having everything dumped in together...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function bark() { /* ... */ }
function meow() { /* ... */ }
function wagTail() { /* ... */ }
function sleepAllDay() { /* ... */ }
function beHyper() { /* ... */ }
function purr() { /* ... */ }
&lt;/pre&gt;
&lt;p&gt;...you group similar things together...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// Dog's can...
function bark() { /* ... */ }
function wagTail() { /* ... */ }
function beHyper() { /* ... */ }

// Cat's can...
function meow() { /* ... */ }
function sleepAllDay() { /* ... */ }
function purr() { /* ... */ }
&lt;/pre&gt;
&lt;p&gt;...and then give the groups a name!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var dog = {
  bark: function() { /* ... */ },
  wagTail: function() { /* ... */ },
  beHyper: function() { /* ... */ }
};

var cat = {
  meow: function() { /* ... */ },
  sleepAllDay: function() { /* ... */ },
  purr: function() { /* ... */ }
};
&lt;/pre&gt;
&lt;p&gt;Partly this is for ease of programming - it&amp;#39;s simpler to keep track of many things if they&amp;#39;re grouped into smaller numbers. But it&amp;#39;s also really important for avoiding naming collisions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are naming collisions?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say I&amp;#39;m working on a big project and I get a little lost in the code sometimes. At some point I defined a &lt;code&gt;warningAlert&lt;/code&gt; function. Then, a few weeks later, I forget that I had a &lt;code&gt;warningAlert&lt;/code&gt; function defined already, and I define a new one lower down.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function warningAlert(text) {
  alert('Warning: ' + text);
}

/* ... */

function warningAlert(text) {
  alert('ALERT: ' + text);
}
&lt;/pre&gt;
&lt;p&gt;Now calls to &lt;code&gt;warningAlert&lt;/code&gt; will use the second definition since it overwrote (collided with) the first definition.&lt;/p&gt;

&lt;p&gt;If I&amp;#39;d had a namespace for my &lt;code&gt;warningAlert&lt;/code&gt; method I probably would have known where to look for the function definition. Something like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var alerts = {}
alert.warning = function(text) {
  alert('Warning: ' + text);
};
&lt;/pre&gt;
&lt;p&gt;Namespaces aren&amp;#39;t only for you (because I&amp;#39;m sure &lt;em&gt;you&amp;#39;d&lt;/em&gt; never make a mistake like this... just for demonstration purposes, right?). They&amp;#39;re also important when you start including code by a third party.&lt;/p&gt;

&lt;p&gt;Since everything gets dumped into the global namespace there&amp;#39;s no way to know what you wrote and what was written by someone else. It&amp;#39;s generally a good idea to have a namespace for everything you wrote so you don&amp;#39;t get naming conflicts with anyone else. Actually, jQuery does just that. All the jQuery functions are namespaced to &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for &lt;em&gt;how is it used?&lt;/em&gt; I&amp;#39;ll leave the implementation details up to &lt;a href="http://www.kenneth-truyers.net/2013/04/27/javascript-namespaces-and-modules/"&gt;Kenneth Truyers&lt;/a&gt; since he did an excellent job listing out all your options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kenneth-truyers.net/2013/04/27/javascript-namespaces-and-modules/"&gt;Kenneth Truyers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/5947280/863846"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/12/07/namespacing-in-javascript/"&gt;Angus Croll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Split vs. Splice</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-split-vs-splice/"/>
    <id>http://lucybain.com/blog/2015/js-split-vs-splice/</id>
    <published>2015-03-12T00:00:00Z</published>
    <updated>2015-03-25T22:57:07+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;What&amp;#39;s the difference between &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Well, what does &lt;code&gt;split&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Much like the name implies &lt;code&gt;split&lt;/code&gt; breaks something into pieces. The &lt;code&gt;split&lt;/code&gt; method is used for strings in JS. It has a few optional parameters, so let&amp;#39;s see what the simplest call does:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split()); // ['My test string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Hmmm, that&amp;#39;s not super useful - &lt;code&gt;split&lt;/code&gt; called without a parameter simply creates an array with one element, the string. But note that calling &lt;code&gt;split&lt;/code&gt; on &lt;code&gt;myString&lt;/code&gt; doesn&amp;#39;t change &lt;code&gt;myString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let&amp;#39;s try something a little more interesting. I want to break &lt;code&gt;myString&lt;/code&gt; up into whole words. We can split &lt;code&gt;myString&lt;/code&gt; on spaces like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ')); // ['My', 'test', 'string']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Much more useful! When you call &lt;code&gt;split&lt;/code&gt; with a parameter the string is &lt;em&gt;split&lt;/em&gt; on every occurrence of that parameter. Note that the parameter itself is removed from the array (there are no spaces in &lt;code&gt;[&amp;#39;My&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;string&amp;#39;]&lt;/code&gt;). Now we can know how many words are in a sentence, or find people&amp;#39;s first and last names (sometimes, names can get tricky...). Again, note that &lt;code&gt;myString&lt;/code&gt; wasn&amp;#39;t changed.&lt;/p&gt;

&lt;p&gt;But what if &lt;code&gt;myString&lt;/code&gt; was really long? Maybe you don&amp;#39;t want an array with hundreds of items in it. Or perhaps you only want to find the first nonoccurence of something. Let&amp;#39;s look for the first two word in &lt;code&gt;myString&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myString = 'My test string';
console.log(myString.split(' ', 2)); // ['My', 'test']
console.log(myString); // 'My test string'
&lt;/pre&gt;
&lt;p&gt;Again, we split on spaces because we were looking for full words. The second parameter we sent to &lt;code&gt;split&lt;/code&gt; was the number of elements to go in the array. We wanted the first two words, so we sent through 2.&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;split&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrap a string up in an array &lt;code&gt;string.split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;break up a string whenever a particular string is found &lt;code&gt;string.split(breakString)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;return only a certain number of elements from all the break points &lt;code&gt;string.split(breakString, 3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweet, we&amp;#39;re halfway there!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what does &lt;code&gt;splice&lt;/code&gt; do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The name isn&amp;#39;t great, but it&amp;#39;s related to &lt;strong&gt;splicing&lt;/strong&gt; things together. Like you can take the end of one rope and splice it together with another. It&amp;#39;s a &lt;a href="https://www.google.com.au/search?q=splice+rope"&gt;real thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways... in JS &lt;code&gt;splice&lt;/code&gt; is an array method. Let&amp;#39;s look at a few sample calls:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(0, 2); // ['this', 'is']
console.log(myArray); // ['an', 'array']
&lt;/pre&gt;
&lt;p&gt;Ok, a really important thing to note is that &lt;code&gt;myArray&lt;/code&gt; was changed during the call to &lt;code&gt;splice&lt;/code&gt;. So if you ever want to use the original array you&amp;#39;ll need to keep a backup somewhere. Another thing to note is that &lt;code&gt;splice&lt;/code&gt; returns a value (in fact, it returns the elements that are missing from the array).&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;splice&lt;/code&gt; requires at least two parameters. The first parameter is an index in the array. I think of it as where the cursor is. The second parameter is how many elements to delete. So what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;0&lt;/strong&gt; please remove &lt;strong&gt;2&lt;/strong&gt; elements and return them to me.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at a similar example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var countingArray = [5, 6, 7, 8];
countingArray.splice(1, 1); // [6]
console.log(countingArray); // [5, 7, 8]
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;1&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me.&amp;quot;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: JS doesn&amp;#39;t have a &lt;code&gt;.delete(index)&lt;/code&gt; for arrays. The best you can do is &lt;code&gt;delete array[index]&lt;/code&gt;, but that actually just replaces the value at &lt;code&gt;array[index]&lt;/code&gt; with &lt;code&gt;undefined&lt;/code&gt;. Using &lt;code&gt;splice&lt;/code&gt; in the above example is how you can actually delete elements from an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, on to the optional parameter(s)!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;Hopefully you&amp;#39;ve got a good idea of what happened here. The first parameter is still an index. The second parameter is still how many elements to remove. And finally the third element is what to add &lt;strong&gt;after&lt;/strong&gt; the index given in the first parameter. Again, what we&amp;#39;re really saying is &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(3, 0, 'amazingly', 'awesome'); // []
console.log(myArray); // ['this', 'is', 'an', 'amazingly', 'awesome', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;3&lt;/strong&gt; please remove &lt;strong&gt;0&lt;/strong&gt; elements, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;3&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;amazing&amp;#39;&lt;/strong&gt; and &lt;strong&gt;&amp;#39;awesome&amp;#39;&lt;/strong&gt;.&amp;quot; The third parameter can keep on going. If you wanted to add 100 elements to &lt;code&gt;myArray&lt;/code&gt; you could do it with &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you can also switch words in place:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var myArray = ['this', 'is', 'an', 'array'];
myArray.splice(2, 1, 'the'); // ['an']
console.log(myArray); // ['this', 'is', 'the', 'array']
&lt;/pre&gt;
&lt;p&gt;What we said was &amp;quot;from position &lt;strong&gt;2&lt;/strong&gt; please remove &lt;strong&gt;1&lt;/strong&gt; element and return it to me, then &lt;strong&gt;after&lt;/strong&gt; position &lt;strong&gt;2&lt;/strong&gt; please add &lt;strong&gt;&amp;#39;the&amp;#39;&lt;/strong&gt;.&amp;quot;&lt;/p&gt;

&lt;p&gt;Overall &lt;code&gt;splice&lt;/code&gt; can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove elements by index&lt;/li&gt;
&lt;li&gt;add elements after an index&lt;/li&gt;
&lt;li&gt;add and remove in one step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew! Thanks for sticking with me - this was a long one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"&gt;Mozilla (split)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Mozilla (splice)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ariya.ofilabs.com/2014/02/javascript-array-slice-vs-splice.html"&gt;split vs. splice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Rails Girls - March 2015</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/rails-girls/"/>
    <id>http://lucybain.com/blog/2015/rails-girls/</id>
    <published>2015-03-08T00:00:00Z</published>
    <updated>2015-03-22T09:38:41+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Phew! Rails Girls Sydney, March 2015 was on Friday and Saturday, I wanted to update you&lt;/p&gt;

&lt;p&gt;Usually the Sydney Rails community runs a Rails Girls event every four-ish months. I&amp;#39;ve always enjoyed mentoring at them, but I&amp;#39;ve never organised one before . It&amp;#39;s a great way to give back to the community and encourage new programmers. It&amp;#39;s also aimed at women, which is something I&amp;#39;m also passionate about.&lt;/p&gt;

&lt;p&gt;The woman who organised the events in the past has moved to NYC (good for her, but sad for us). What with her leaving, and us not knowing what to do we took longer to run this event than usual. It ended up being about eight months between workshops.&lt;/p&gt;

&lt;p&gt;I had a surprise bonus two weeks off between jobs while waiting for my visa to get transfered properly. It turns out we absolutely needed at least one of those weeks off to prepare for the workshop full time. I hadn&amp;#39;t realised how much work was involved in one of these. I&amp;#39;m very grateful to the previous organiser, who did such a wonderful job.&lt;/p&gt;

&lt;p&gt;In the end we had about 45 attendees come and learn Rails with us. Not all of them were there for both days, some had to leave early, or weren&amp;#39;t able to come for Friday night. I had hopped for a few more attendees (50-55 was my goal), but everyone who was there was learning enthusiastically.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rails Girls Friday Hug" src="/images/blog/rails-girls.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to meet with another organiser to talk about what we did well, and what could have been better. There were a lot of things I didn&amp;#39;t know since it was the first time I organised it. Hopefully we can get most of those written down for next time!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JS: How does JSONP work?</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/how-does-jsonp-work/"/>
    <id>http://lucybain.com/blog/2015/how-does-jsonp-work/</id>
    <published>2015-03-01T00:00:00Z</published>
    <updated>2015-03-23T21:51:39+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;How does JSONP work?&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start smaller: &lt;em&gt;What does JSONP stand for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation with &lt;strong&gt;P&lt;/strong&gt;adding&lt;/p&gt;

&lt;p&gt;Hopefully you already know about the JSON part, if not check out this &lt;a href="http://stackoverflow.com/a/383699/863846"&gt;Stackoverflow&lt;/a&gt; answer. Go ahead, I&amp;#39;ll wait :)&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll talk about the padding part in a minute.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What problem does it solve?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Browsers try to be security conscious. They don&amp;#39;t let your JS talk to just any old server (see &lt;a href="https://www.google.com.au/webhp?sourceid=chrome-instant&amp;amp;amp;ion=1&amp;amp;amp;espv=2&amp;amp;amp;ie=UTF-8#q=cross%20site%20scripting"&gt;Cross Site Scripting&lt;/a&gt;). When you make AJAX requests, you can only query your server, not anyone else&amp;#39;s. This is a problem if you want to get data from another server (perhaps see a stream of Tweets). The browsers will not let you make an AJAX call to another server, so you&amp;#39;re stuck.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, tell me a bit about JSONP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, browsers have a caveat. You aren&amp;#39;t allowed to call other servers from your JS, but you &lt;em&gt;are&lt;/em&gt; allowed to include a script from another server. You probably already do this with jQuery. Most people include a script tag to get jQuery hosted from Google rather than hosting it themselves. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the domain is &lt;code&gt;ajax.googleapis.com&lt;/code&gt; not &lt;code&gt;your-awesome-site.com&lt;/code&gt;. Browsers allow this kind of code sharing, but direct calls to an API from JS.&lt;/p&gt;

&lt;p&gt;So way back in &lt;a href="http://en.wikipedia.org/wiki/JSONP#History"&gt;2005&lt;/a&gt; someone had the clever idea to take advantage of this caveat. Instead of calling an API directly (which browsers don&amp;#39;t allow) you can call it via a script tag (which is totally legit).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So how does it work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a function in the global space to handle the JSON returned from the API. It doesn&amp;#39;t have to do much, just enough so you can see what you&amp;#39;re getting:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function myCallbackFunction(data) {
  console.log(data);
}
&lt;/pre&gt;
&lt;p&gt;Next, add a script tag to your page which calls the API and passes it an additional parameter. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;script src="http://cool-stuff.com/api.json?callback=myCallbackFunction"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Notice the additional parameter? It&amp;#39;s typically called &lt;code&gt;callback&lt;/code&gt;, but not always, check the docs for your particular API. Also note the &lt;code&gt;callback&lt;/code&gt; parameter&amp;#39;s value. It&amp;#39;s the same as the function we defined earlier. &lt;em&gt;This is crucial!&lt;/em&gt; If those names don&amp;#39;t match up you won&amp;#39;t get your data.&lt;/p&gt;

&lt;p&gt;An API that&amp;#39;s set up to handle JSONP knows to look for that special parameter. If it&amp;#39;s there, the response isn&amp;#39;t just JSON, but the JSON wrapped (&lt;strong&gt;P&lt;/strong&gt;added) with the name of the callback. So for us, the API would return:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;myCallbackFunction({'awesome': 'data'});
&lt;/pre&gt;
&lt;p&gt;Since the API returns to a script tag the JS is immediately executed. So &lt;code&gt;myCallbackFunction&lt;/code&gt; gets called. We defined this function earlier, so we&amp;#39;ll have &lt;code&gt;{&amp;#39;awesome&amp;#39;: &amp;#39;data&amp;#39;}&lt;/code&gt; logged to the console!&lt;/p&gt;

&lt;p&gt;Phew! Way to get around some security issues!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few things to note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally you &lt;strong&gt;don&amp;#39;t write the script tag yourself.&lt;/strong&gt; You can get jQuery to do that for you :) To make the same call as we did previously you can just use:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$.ajax({
  url: 'http://cool-stuff.com/api.json',
  dataType: 'jsonp',
  success: function(data) {
    console.log(data);
  }
});
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Safety First!&lt;/strong&gt; There&amp;#39;s a reason browsers don&amp;#39;t like you talking to other servers - you never know what those servers will send back! Use good data validation, even if the data is &amp;quot;safe.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can only use JSONP for &lt;code&gt;get&lt;/code&gt; requests.&lt;/strong&gt; You can use normal AJAX to do &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; and all data manipulations, but you cannot do this with JSONP. The practical reason for this is that HTML tags only ever get information, they can&amp;#39;t do anything else (think image tags, links for style sheets, and script tags). The handy reason is that if you owned the API you almost certainly would not want randoms from the internet updating your data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://schock.net/articles/2013/02/05/how-jsonp-really-works-examples/"&gt;Jason Schock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnnywey.wordpress.com/2012/05/20/jsonp-how-does-it-work/"&gt;Jhonny Wey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/JSONP"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
