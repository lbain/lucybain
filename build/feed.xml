<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2016-12-22T11:00:00+11:00</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>JS: promise and deferred</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/js-promises-vs-deferred/"/>
    <id>http://lucybain.com/blog/2016/js-promises-vs-deferred/</id>
    <published>2016-12-22T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m struggling with promises. A lot.&lt;/p&gt;

&lt;p&gt;One of the things that’s super confusing about promises is the jargon associated. We’ve got all kinds of things: promise, deferred, Promises/A+, jQuery promise, fulfil, settle, reject, resolve, fail, catch, then, done, and probably others I don’t know yet. It was only &lt;em&gt;today&lt;/em&gt; that I realised promises and deferreds aren’t the same thing. And that &lt;strong&gt;p&lt;/strong&gt;romise and &lt;strong&gt;P&lt;/strong&gt;romise aren’t the same thing. Programming is hard.&lt;/p&gt;

&lt;h3&gt;promise vs. deferred&lt;/h3&gt;

&lt;p&gt;Anywhoo, I found this really great article &lt;a href="http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt1-theory-and-semantics"&gt;Promise &amp;amp; Deferred objects in JavaScript&lt;/a&gt;. Chris’s approach of taking some time out to think about promises and deferreds &lt;em&gt;without&lt;/em&gt; code samples helped clarify things. He was also was very careful about which words he used when, so the post is far more consistent than others I’ve read (and I’ve been reading a lot recently...).&lt;/p&gt;

&lt;p&gt;In that article is one paragraph in particular that helped me&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value. Every deferred has a promise which functions as a proxy for the future result. While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver. The promise itself can be given to any number of consumers and each will observe the resolution independently meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it. From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll be honest, I’ve read that paragraph 15-20 times by now, trying to tease out meaning from each line. So I rewrote it in my own words, and threw in some examples for good measure.&lt;/p&gt;

&lt;p&gt;Here’s my breakdown:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A promise is a placeholder for a result which is initially unknown while a deferred represents the computation that results in the value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises represent a future value. At the moment of its creation, a promise doesn’t know what its ultimate value will be. Kind of like how the judges didn’t know what the artist’s final picture will be &lt;a href="https://www.youtube.com/watch?v=OetrSxmFZSI"&gt;when she started painting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A deferred is the work that must take place in order for a promise to “settle” (that is, for the promise’s ultimate value to be available). Like the action of painting that the artist needs to do before the judges could see the final product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every deferred has a promise which functions as a proxy for the future result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the deferred’s work kicks off it immediately returns a promise which represents the final value of the deferred’s work. This is similar to accepting a job (initialising a deferred) agreeing on a wage (the unsettled promise that is immediately returned by the deferred), doing the work (resolving the deferred), and then getting paid (resolving the promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While a promise is a value returned by an asynchronous function, a deferred can be resolved or rejected by it’s caller which separates the promise from the resolver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deferreds must be explicitly “fulfilled” by other parts of the code (that is, the deferreds’ work must be completed), or they will remain in an “unfulfilled” state forever (incomplete). If this happens, the deferred’s associated promise will never settle. A deferred can fulfil in a section of the code that is unrelated to how and when its promise is referenced and used.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The promise itself can be given to any number of consumers and each will observe the resolution independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A promise can have many listeners that are all updated with the final value of the promise when the promise settles. (Ready for this example? It’s my favourite!) Hermione’s &lt;a href="http://harrypotter.wikia.com/wiki/Dumbledore's_Army_coin"&gt;coins&lt;/a&gt; for Dumbledore’s Army: Harry set his one coin (settled the promise) and all the other coins updated accordingly (many listeners for the same promise). Boom.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Meanwhile the resolver / deferred can be given to any number of producers and the promise will be resolved by the one that first resolves it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same deferred can be passed to multiple functions (producers). Since it’s all the same deferred any one of these producers can fulfil the deferred. Once this happens the deferred is fulfilled for all the producers (and the single associated promise is settled as well).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From a semantic perspective this means that instead of calling a function ( callback ), we are able to return a value ( promise ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises can be returned and treated like a value, even though the value is not yet know.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;That’s all for now, but I’m planning to write more posts about the rest of those words from the beginning. At least promises are giving me plenty of content!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Upgrading to Middleman v4</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/middleman-v4/"/>
    <id>http://lucybain.com/blog/2016/middleman-v4/</id>
    <published>2016-12-10T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My blog runs on &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt; - I really like the way they’ve set things up, and it feels very familiar to me since it’s written in Ruby. However, v4 came out almost a year ago, and I never upgraded. I tried half heartedly a couple of times, but never committed. But this time I made the leap, what you see before you is a blog built by Middleman 4.0.0 (ok, I need to upgrade it even more, but this is an improvement!).&lt;/p&gt;

&lt;p&gt;I hit some snags as I went along, so let’s talk about those&lt;/p&gt;

&lt;h2&gt;Removed “Implied Extension feature”&lt;/h2&gt;

&lt;p&gt;The first issue is listed in their &lt;a href="https://middlemanapp.com/basics/upgrade-v4/"&gt;upgrade docs&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removed &amp;quot;Implied Extension feature&amp;quot;, all templates must include a full file name plus the list of desired templating extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I completely missed this (it’s about halfway down a long list of bullet points, most of which didn’t apply to me), but eventually found it referenced in a few issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does that mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good question, it wasn’t obvious to me either. The “full file name” is the normal name of the file (this file’s name is &lt;code&gt;12-10-middleman-v4&lt;/code&gt;) which is simple enough. But the “list of desired templating extensions” needs to include the ultimate format you want your page to end up in (in this case, &lt;code&gt;.html&lt;/code&gt;). This is new, you used to be able to just have &lt;code&gt;12-10-middleman-v4.md&lt;/code&gt;, but now you need the full &lt;code&gt;12-10-middleman-v4.html.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Updating all your files to add a &lt;code&gt;.html&lt;/code&gt; before the previous extension is more than a little annoying. So I wrote a little script to help me out:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="c1"&gt;# FILL ME IN&lt;/span&gt;

&lt;span class="c1"&gt;# Step 1: get a list of all the extensions you use&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'set'&lt;/span&gt;
&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: convert the extensions you want converted&lt;/span&gt;

&lt;span class="n"&gt;extensions_to_convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# FILL ME IN&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_project&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;should_convert_extension?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;extensions_to_convert&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt;
  &lt;span class="n"&gt;already_converted?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s1"&gt;'html'&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;should_convert_extension?&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;already_converted?&lt;/span&gt;
  &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.html.'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# verify file conversion&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c1"&gt;# uncomment to make actual changes&lt;/span&gt;
  &lt;span class="c1"&gt;# File.rename(file, new_name)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find it &lt;a href="https://gist.github.com/lbain/5ce9ef81f6a3ce6f3b4b84774f9a63d8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Filter errors with &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Some of my earlier blog posts were written in Haml (this was back when I was writing more Ruby and didn’t know Markdown as well). In general these moved from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.html.haml&lt;/code&gt; without a hitch, but a few threw errors on &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt; saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Filter &amp;quot;code&amp;quot; is not defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have no idea what changed in Haml or Middleman to trigger this failure (I assume it was a Middleman change since I only moved from &lt;a href="https://github.com/lbain/lucybain/commit/0cab70d26bd82946dbc6475fe0a4bb147f5639b4"&gt;Haml 4.0.5 to 4.0.7&lt;/a&gt;). Since I only had a few of these errors it was easiest to convert the Haml files to Markdown files. It’s something I’ve been meaning to do anyway, and this was as good a time as any.&lt;/p&gt;

&lt;h2&gt;Sass files should include Sass files&lt;/h2&gt;

&lt;p&gt;I had a tiny issue with a Sass file that used to be &lt;code&gt;@include&lt;/code&gt;ing a CSS file, but now died. Seems like that should never have worked, but it was an easy fix to convert my one &lt;a href="http://css2sass.herokuapp.com/"&gt;CSS file to a Sass&lt;/a&gt; file and have everything work.&lt;/p&gt;

&lt;h2&gt;Middleman-blog doesn’t like Haml layout&lt;/h2&gt;

&lt;p&gt;I don’t really know what’s going on here, but I’m not the only &lt;a href="https://github.com/middleman/middleman-blog/issues/324"&gt;person&lt;/a&gt; experiencing this &lt;a href="https://github.com/middleman/middleman-blog/issues/322"&gt;issue&lt;/a&gt;. At the end of the day there’s something wonky happening with how the blog template plays with the general site template in Haml. After a fair amount of tinkering (and hair pulling...) I gave up and &lt;a href="https://haml2erb.org/"&gt;converted the layouts&lt;/a&gt; to &lt;code&gt;.erb&lt;/code&gt; files. I’m not super happy with this outcome (I had &lt;code&gt;.haml&lt;/code&gt; files for a reason!), but it works and I want to enjoy my remaining hair.&lt;/p&gt;

&lt;p&gt;An issue with converting from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.erb&lt;/code&gt;: in order to preserve whitespace and nice things in a markdown converted blog post with code snippets I needed to use &lt;code&gt;find_and_preserve&lt;/code&gt;. However, this method only exists in Haml, and so isn’t available in an &lt;code&gt;.erb&lt;/code&gt; file. It’s not needed for embedded Ruby, but it’ll throw errors until you delete it.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; wrapping&lt;/h2&gt;

&lt;p&gt;Last of all I found the updated &lt;a href="https://github.com/vmg/redcarpet"&gt;Redcarpet gem&lt;/a&gt; now wraps all code in &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags. Now you’d think this wasn’t a big deal, but it really messed with my head. What used to happen was...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`single ticks`
&amp;lt;code&amp;gt;single ticks&amp;lt;/code&amp;gt;


```
triple ticks
```
&amp;lt;pre&amp;gt;triple ticks&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But now the ``` is different:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```
triple ticks
```
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;triple ticks&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately all my styling relied on the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; only being used inline and the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; only being used for code blocks. It &lt;a href="https://github.com/lbain/lucybain/commit/945fd5c249731572e1c9ebeb2a3a7e97351de2cd"&gt;wasn’t hard to fix&lt;/a&gt;, but it make my blog posts look weird and caused a good deal of despair.&lt;/p&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;Usually the lesson from this kind of thing is “update earlier!” but I’m honestly not sure that would have helped. There weren’t a lot of resources out there to find (or my Google searches were completely off base), and the &lt;a href="https://forum.middlemanapp.com"&gt;Middleman forum&lt;/a&gt; kept not loading. Which is why I’m writing this post - I hope it helps someone!&lt;/p&gt;

&lt;p&gt;I did hugely underestimate the amount of time involved with doing the upgrade. Often solving the issue wasn’t too difficult, but finding it was hard. And, in the case of the Haml layouts, I never solved it but had to call it quits and move on to the next thing.&lt;/p&gt;

&lt;p&gt;I also got really frustrated with the whole thing and nearly called it off at least twice. It’s hard to keep going when you don’t know how close to the end you are.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>YOW! Day Two</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/yow-day-2/"/>
    <id>http://lucybain.com/blog/2016/yow-day-2/</id>
    <published>2016-12-09T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The other volunteers and I got to sleep in a bit this morning and only had an 8:15 start time. &lt;em&gt;Yawn!&lt;/em&gt; At least there’s free tea and coffee! After setting up a few odds and ends it was time to start shepherding people into the main room for the third, and last, keynote.&lt;/p&gt;

&lt;h3&gt;The Past and Future of Evolutionary Architecture, &lt;a href="https://twitter.com/rebeccaparsons"&gt;Rebecca Parsons&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We’ve been singing praises to Agile for a long time, but how do you apply these methods to architecture? &lt;em&gt;Evolutionary&lt;/em&gt; architecture&lt;/li&gt;
&lt;li&gt;Start by building a good test suite (I’m sensing a theme here...). Changing large design decisions doesn’t need to be as scary when you’ve got a good test suite to be sure the change won’t break things.&lt;/li&gt;
&lt;li&gt;Recommended Reading: &lt;a href="https://www.amazon.com/Refactoring-Databases-Evolutionary-paperback-Addison-Wesley/dp/0321774515"&gt;Refactoring Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Be aware of your team: it’s irresponsible to do evolutionary architecture (and generally make risky decisions) without having good tests, CI, and CD. Otherwise it puts too much pressure on the ops team.&lt;/li&gt;
&lt;li&gt;Delay decisions until the last responsible moment. The longer you delay the more information you’ll have available. But you still need to be responsible about it; others shouldn’t suffer for your lack of decision.&lt;/li&gt;
&lt;li&gt;Develop a &lt;a href="https://en.wikipedia.org/wiki/Fitness_function"&gt;fitness function&lt;/a&gt; early on in a project. The fitness function should define “good” for this particular project by making boundaries and requirements explicit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quote about thinking bigger picture:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Good code has a more consistent definition across projects than good architecture design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Adventures in Elm Questioning your principles, &lt;a href="https://twitter.com/jessitron"&gt;Jessica Kerr&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jessica’s talk was built around a live coding demo. Not only was this amazingly gutsy, but it was a fantastic way to show off the complier, as well as allowing for “human” moments. She made a few mistakes (although at least some of them were on purpose!) and kept going. It was quite an inspiring talk, and I’d certainly recommend it to newer devs.&lt;/li&gt;
&lt;li&gt;She also was really explicit about what tools she used and how her system was set up. This was really helpful as you often have questions about a cool thing you saw them use.&lt;/li&gt;
&lt;li&gt;Elm:

&lt;ul&gt;
&lt;li&gt;Explicit types are optional, all items in a list must be of the same type&lt;/li&gt;
&lt;li&gt;The language is aimed at people doing work and their experience. It’s not about building the “right” language.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm compiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A major part of the talk focused on how useful the compiler is. I mostly work in interpreted languages (JS, Ruby); I learned to fear and hate the compiler in my Java days at university. But her explanation of how the Elm compiler fits into her process was pretty persuasive.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My favourite quote was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Elm considers every compile error as a teachable moment&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a quick look, I found &lt;a href="http://elm-lang.org/blog/compiler-errors-for-humans"&gt;this blog post&lt;/a&gt; about the reasoning behind these error messages. It’s really lovely and human-centric. I love this way of a language doing it’s best to help the user (programmer).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adorable quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The compiler is my friend and it helps me get it &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/elm-live-coding.jpg" alt="Live coding with Elm" /&gt;&lt;/p&gt;

&lt;p&gt;Her dress matched the colours and styles of the slides, nice touch!&lt;/p&gt;

&lt;h3&gt;If you are Synchronous you are not Resilient, &lt;a href="https://twitter.com/ghohpe"&gt;Gregor Hohpe&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Gregor started his talk by defining three types of systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resilient: acknowledge things will fail, your system needs to be able to handle it and react to return to the normal state&lt;/li&gt;
&lt;li&gt;Fail-operational: the system has to continue working (perhaps with a degraded service) and cannot be restarted or crash out (think of an plane)&lt;/li&gt;
&lt;li&gt;Antifragile: something that becomes &lt;em&gt;stronger&lt;/em&gt; with disturbances (think of a rumour, or the &lt;a href="https://en.wikipedia.org/wiki/Lernaean_Hydra"&gt;Hydra&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the talk covered how to move your code, team and organisation towards each of these states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resilient: as other talks had mentioned, programmers usually aren&amp;#39;t great at handling error cases. In order to reach this first state a system needs to deal with errors that come out, not just leave a &lt;code&gt;// todo&lt;/code&gt; comment.&lt;/li&gt;
&lt;li&gt;Fail-operational: everything must be built in an isolated way, and the most important systems (like the plane engine) need backups&lt;/li&gt;
&lt;li&gt;Antifragile: adding something like the &lt;a href="https://github.com/Netflix/chaosmonkey"&gt;Chaos Monkey&lt;/a&gt;, when the monkey finds a failure your can improve your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Communities of Practice: The Missing Piece of your Agile Organisation, &lt;a href="https://twitter.com/ewebber"&gt;Emily Webber&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Given my experience with various user groups, study groups, and my own continuing education I was quite excited to go to this talk. Unfortunately for me, it was aimed more for beginner community organisers. I did like her ideas around bringing these kinds of communities into the office, both how to do that from a practical stand point, and why learning with your co-workers can be a good thing.&lt;/p&gt;

&lt;p&gt;I enjoyed Emily’s discussion about the Kolb’s learning styles because it’s particularly relevant to my own learning efforts.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/kolbs-learning-styles.jpg" alt="Kolb’s learning styles" /&gt;&lt;/p&gt;

&lt;p&gt;In general, I try to follow these steps, although I’d never thought of them so concretely. My typical flow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Concrete experience: encounter something difficult at work, or a new idea from a technical article.&lt;/li&gt;
&lt;li&gt;Reflection observation: think about what was difficult and do some research into that topic.&lt;/li&gt;
&lt;li&gt;Abstract conceptualisation: write a blog post in my own words about the topic.&lt;/li&gt;
&lt;li&gt;Active experimentation: I’ll admit, this is where I don’t do as well. I generally have real examples in my blog posts, and of course I try to apply what I’ve learned to what I do at work. But there’s certainly room for improvement here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learning quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As all architects know, there’s something to be learned from everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/RMcKergow/status/810062288770076672" class="image-link"&gt;&lt;img src="/images/blog/yow-2016/communities-of-practice.jpg" alt="Communities of practice" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Knit One, Compute One, &lt;a href="https://twitter.com/web_goddess"&gt;Kris Howard&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The last talk of the day was given by my friend Kris. Kris programs and knits, this talk was about the intersection of the two. It was extra satisfying to watch because I was one of the people who encouraged her to submit the talk to YOW! way back in August.&lt;/p&gt;

&lt;p&gt;Kris’s talk went into the similarities of programming and knitting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knitting can be thought of as binary (knit and purl vs. 1 and 0)&lt;/li&gt;
&lt;li&gt;knitting patterns are programs for the knitter to follow&lt;/li&gt;
&lt;li&gt;patterns use many programming concepts, such as loops, if statements, go to statements, and more&lt;/li&gt;
&lt;li&gt;the final bombshell was that knitting can be Turing complete!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I particularly enjoyed the discussion about using a &lt;a href="https://launchpad.net/knitml"&gt;standard markup language&lt;/a&gt; to store patterns. This way a program could easy use one of many ways to display a knitting pattern, and the implementation would result in the same thing. I love the idea of having One Pattern to Rule Them All, but allowing each person to use their favourite way of consuming the patterns. &lt;em&gt;I want this for recipes!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;General notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“Uncle Bob” started his talk with a call to gender diversity by asking the programmers to stand and then asking the men to sit down. As a person left standing I found it pretty disappointing, it looked like quite a bit less than 10-15% were women. I followed up with one of the conference organisers after the event and they estimated that ~20% of registrants were women. So perhaps I had some implicit bias to see the number of female attendees as low; perhaps the women didn’t make it in time for the first keynote; perhaps the wording of the request wasn’t clear (“will people with a Y chromosome please sit down.”); or perhaps the women there didn’t identify as programmers, and so weren’t standing in the first place. No matter the reason, I appreciated that the conference opened with a note about wanting more women attendees, and I am thrilled that so many women registered.&lt;/li&gt;
&lt;li&gt;There was a fair amount of discussion about having standards and living up to others’ expectations for what being a programmer means. Maybe we’re moving away from “hackers” and “ninjas” and towards ... “professional” programmers.&lt;/li&gt;
&lt;li&gt;We’re reinventing wheels:

&lt;ul&gt;
&lt;li&gt;TDD was thought of in 1967. &lt;/li&gt;
&lt;li&gt;There’s a discussion of agile development in 1968&lt;/li&gt;
&lt;li&gt;Research into distributed systems happened in the 1980s&lt;/li&gt;
&lt;li&gt;Perhaps we’re so busy disrupting we don’t take the time to look for lessons from the past.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A few speakers mentioned &lt;a href="https://en.wikipedia.org/wiki/Conway's_law"&gt;Conway&amp;#39;s law&lt;/a&gt;, and it’s reverse — first decide how you want your &lt;em&gt;code&lt;/em&gt; structure look and then make your organisation look like that.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>YOW! Day One</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/yow-day-1/"/>
    <id>http://lucybain.com/blog/2016/yow-day-1/</id>
    <published>2016-12-08T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In Australia we have a well known conference called YOW!. Yes, the name is in all capitals and contains an exclamation point; no it&amp;#39;s not ten times more exciting than any other tech conference. I’d always assumed this conference had more of a Java and enterprise focus, so I hadn’t gone before. But I’m curious about conferences, and they were looking for volunteers so I signed up.&lt;/p&gt;

&lt;p&gt;First of all, you’ll notice it’s a really well run conference. They run it for profit, and people have Real Jobs working for YOW! and the quality comes through. I enjoyed &lt;a href="/blog/2016/ela-conf-day-1/"&gt;Ela Conf&lt;/a&gt;, but it certainly had a home grown, community feel to it in comparison.&lt;/p&gt;

&lt;p&gt;So let’s dive into the talks!&lt;/p&gt;

&lt;h3&gt;The Scribe&amp;#39;s Oath, &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert Martin&lt;/a&gt; (Uncle Bob)&lt;/h3&gt;

&lt;p&gt;Programmers are the scribes of the modern world. Just like the scribes in ancient times, we have special knowledge about how the world works and how to change it. Having this much power means we will, at some point, become a regulated profession (like doctors and lawyers). Let’s jump the gun and regulate ourselves before government gets involved.&lt;/p&gt;

&lt;p&gt;Suggested programmer’s oath:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I will not produce harmful code. (Both in how it works and what it does. We shouldn’t do things like catching errors without handling them.)&lt;/li&gt;
&lt;li&gt;The code that I produce will always be my best work. I will not knowingly allow code that is defective either in behaviour or structure to accumulate. (Employers and the world expect we’re doing our best work all the time. Although it’s expected that what we write will “rot” a.k.a. become tech debt, it’s also expected that we will correct these problems.)&lt;/li&gt;
&lt;li&gt;I will produce, with each release, a quick, sure, and repeatable proof that every element of the code works as it should. (A full coverage test suite.)&lt;/li&gt;
&lt;li&gt;I will make frequent, small, releases so that I do not impede the process of others. (Your work shouldn’t negatively impact the work of others. You shouldn’t have long running branches that mess up other people.)&lt;/li&gt;
&lt;li&gt;I will fearlessly and relentlessly improve our work at every opportunity. I will never allow it to degrade. (We need to constantly pay off tech debt and aim for a better codebase.)&lt;/li&gt;
&lt;li&gt;I will do all that I can to keep the productivity of myself, and others, as high as possible. I will do nothing that decreases that productivity. (Find issues in your process that are slow and work to make them faster.)&lt;/li&gt;
&lt;li&gt;I will continuously ensure that others can cover for me, and that I can cover for them. (Work as a team, especially when it comes to time away from the team.)&lt;/li&gt;
&lt;li&gt;I will produce estimates that are honest both in magnitude and precision. I will not make process without certainty. (Try to make estimates that you are comfortable with, but have a reasonable range.)&lt;/li&gt;
&lt;li&gt;I will never stop learning and improving my craft. (Programming changes all the time, so it’s our responsibility to stay on top of things.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Interesting quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So far, the number of programmers seems to double about every five years. Which means, &lt;em&gt;half of all programmers have less than five years experience.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Mob Programming: A Whole Team Approach, &lt;a href="https://twitter.com/WoodyZuill"&gt;Woody Zuill&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The whole team working on the same thing, at the same time, at the same computer. There might be other computers in the room for reference, but only one computer is used for the actual work.&lt;/li&gt;
&lt;li&gt;The “driver” role is there to translate what the navigators say into code. They should not be coming up with the ideas themselves. “An idea should never originate and be typed by the same person.”&lt;/li&gt;
&lt;li&gt;Any time someone feels they’re not contributing or learning they should leave the group.&lt;/li&gt;
&lt;li&gt;Mob programming can only work if the team is allowed to do it - you need a company culture that’s open to the idea of programmers working together so much (often appearing unproductive to the untrained eye).&lt;/li&gt;
&lt;li&gt;Each person is there “to contribute the right thing, at the right time, in the right way” but no one person needs to contribute all the time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adorable quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to call out this animation because if I didn&amp;#39;t you wouldn&amp;#39;t notice and it took me &lt;em&gt;four hours&lt;/em&gt; to do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;The Verification of a Distributed System, &lt;a href="https://twitter.com/caitie"&gt;Caitie McCaffrey&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Formal verification: a way of formally proving a system is correct

&lt;ul&gt;
&lt;li&gt;The proofs cover every possible input and make sure the outputs are correct&lt;/li&gt;
&lt;li&gt;Use propositional logic to define which inputs are allowed and how inputs are treated&lt;/li&gt;
&lt;li&gt;Like testing, you can feel safe making updates because you can prove it won’t break things&lt;/li&gt;
&lt;li&gt;It’s super slow... most projects won’t use it (but Amazon S3 did, and found a critical bug!)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Distributed systems in the wild (see &lt;a href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf"&gt;Simple Testing can Prevent Most Critical Failures&lt;/a&gt; paper)

&lt;ul&gt;
&lt;li&gt;Unit tests are actually really powerful, use them! &lt;/li&gt;
&lt;li&gt;Use code coverage tools to double check that error paths are covered. Developers typically write and test the happy path, but errors are where the big crashes often happen.&lt;/li&gt;
&lt;li&gt;“Three nodes or less can reproduce 98% of failures” — same Simple Testing paper&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Property based testing: define properties and let the computer figure out if there are error cases

&lt;ul&gt;
&lt;li&gt;JS has a &lt;a href="http://jsverify.github.io/"&gt;library&lt;/a&gt; for property based testing, inspired by QuickCheck port for property based testing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fault injection: intentionally break things to make sure the system works when that happens. (Example: Netflix’s Chaos Monkey)

&lt;ul&gt;
&lt;li&gt;Test your dependencies!&lt;/li&gt;
&lt;li&gt;Test in staging first, don’t make your users part of the testing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/distributed-system-verification.jpg" alt="Test more in areas that are more likely to have errors" /&gt;&lt;/p&gt;

&lt;h3&gt;Data Science as Software at Pinterest, &lt;a href="https://twitter.com/arburbank"&gt;Andrea Burbank&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To make good data based decisions, you need to have good data.&lt;/li&gt;
&lt;li&gt;Start with logging

&lt;ul&gt;
&lt;li&gt;Who’s doing what when?&lt;/li&gt;
&lt;li&gt;Clean up the logs’ data as much as possible (probably using things like partitioned tables)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opinionated data: the data doesn’t need 100% complete or accurate, it needs to be representative for the data you’re interested in.

&lt;ul&gt;
&lt;li&gt;Having less &lt;em&gt;opinionated&lt;/em&gt; data is better than having more &lt;em&gt;unopinionated&lt;/em&gt; data since you can be confident in what’s counted and discounted in opinionated data.&lt;/li&gt;
&lt;li&gt;Example: Find patterns to find badies. Since spam often looks really similar, you can look for patterns in usage and mark users’ data as spam. You don’t need to delete these users or the data, you just need to discount the data from your metrics.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use data to better understand software

&lt;ul&gt;
&lt;li&gt;Are there any anomalies in the data that can’t be explained? Maybe there’s something unexpected happening in the software.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Treat your data as you would treat your software; the same good practices apply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/yow-2016/data-as-code.jpg" alt="Data should be treated like code" /&gt;&lt;/p&gt;

&lt;p&gt;Realistic quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think back to 2012, Pinterest was growing really fast. Mostly we were just trying to stop the system from falling over.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Engineering you, &lt;a href="http://mechanical-sympathy.blogspot.com.au/"&gt;Martin Thompson&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What should we learn?

&lt;ul&gt;
&lt;li&gt;Focus on topics that last well over time, rather than specific frameworks or languages.&lt;/li&gt;
&lt;li&gt;Learn about when to use one method over another; Only dive into the details when it’s time to implement.&lt;/li&gt;
&lt;li&gt;Suggestions: algorithms and data structures, design fundamentals, programming paradigms, decomposition and abstraction, Mathematics, business domains, communications&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How can we learn?

&lt;ul&gt;
&lt;li&gt;Practical practice: be intentional about putting everything you learn into code.&lt;/li&gt;
&lt;li&gt;Your co-workers have a massive impact on how and how much you learn. Pick teams with a good learning culture.&lt;/li&gt;
&lt;li&gt;When it comes to work projects, do the hard things first when you have the most time, don’t leave them to the end when you’ll have to rush through.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How can we learn?

&lt;ul&gt;
&lt;li&gt;First of all, give yourself more time by automating tasks where possible.&lt;/li&gt;
&lt;li&gt;Focus on having a better learning experience. How quickly can you get feedback about what and how you’re learning?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Down to earth quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t work with assholes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Who are you, Really?, &lt;a href="https://twitter.com/drbrianrlittle"&gt;Dr. Brian Little&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A deep dive into introversion vs. extroversion. This is a topic I’m particularly interested in, so I &lt;em&gt;loved&lt;/em&gt; it! Dr. Little was an incredibly engaging speaker, so I forgot to take many notes. I did jot down a few quotes or points of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caffeine &lt;em&gt;decreases&lt;/em&gt; an introvert’s ability, but &lt;em&gt;increases&lt;/em&gt; an extrovert’s.&lt;/li&gt;
&lt;li&gt;Introverts tend to better in school, but have the same IQ as extroverts.&lt;/li&gt;
&lt;li&gt;Ambiverts tend to do well in sales: they use the extrovert’s skill for the pitch, and the introvert’s skill for asking follow up questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Extroverts get more traffic tickets. They need the stimulation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Psychology is about finding ways we are like all others, some others, and no others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;That’s a wrap on day one! It’s been pretty full on, and I’m looking forward to tomorrow!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Javascript: pre-Promises</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/js-promises-1/"/>
    <id>http://lucybain.com/blog/2016/js-promises-1/</id>
    <published>2016-11-30T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Promises have confused me for quite a while, so I decided I should spend some time thinking about them. Turns out they’re really powerful, and there’s a fair bit going on with promises. This first post has no promises code, but instead gives some general information about promises and then sets up the problem that promises are meant to solve. I’ll reference this problem in my next blog post which will have plenty of promise code!&lt;/p&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ok, you got me all excited about promises, but what do they even &lt;strong&gt;do&lt;/strong&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– MDN’s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I’ll admit I didn’t really know what that meant when I first read it, so let’s break it down a bit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, we know promises are objects, and since they wrote &lt;strong&gt;P&lt;/strong&gt;romise with a capital P we also know it’s a &lt;a href="/blog/2015/js-new-keyword-and-functions/"&gt;constructor&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;used for asynchronous computations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, “asynchronous computations” are ones that don’t block the main execution thread, typically because they are long running. A common example is an &lt;a href="/blog/2015/js-how-does-ajax-work/"&gt;ajax&lt;/a&gt; request for data from the server. We can fire off the request, but we don’t want to stop the rest of the page from working while we wait for that request to return. Another example (which we’ll work with later) is timeouts - the whole page shouldn’t get locked while we wait for the timer to expire!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Promise represents a value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmm, now things are getting a bit weird. It “represents” a value, but isn’t the value itself. It’s not that the promise &lt;em&gt;is&lt;/em&gt; &lt;code&gt;5&lt;/code&gt;, but that it represents something else. Let’s keep reading...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a value which may be available now, or in the future, or never.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, so this value is a bit of a &lt;a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger's_cat"&gt;Schrödinger&amp;#39;s cat&lt;/a&gt; type value. It may or may not be available, both now and in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yikes! How are we supposed to program with so many unknowns?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But you already do!&lt;/p&gt;

&lt;h2&gt;Async code without promises&lt;/h2&gt;

&lt;h3&gt;Round one&lt;/h3&gt;

&lt;p&gt;Let’s start with our timer example. It was recently Thanksgiving, so we’re going put on a Thanksgiving feast!&lt;/p&gt;

&lt;p&gt;First we need to roast the turkey:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;1 second to roast a turkey...?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just go with it, no need for the examples to run in real time!&lt;/p&gt;

&lt;p&gt;As you can see, we’ll log out &lt;code&gt;Making turkey&lt;/code&gt; and then a second later we’ll log &lt;code&gt;turkey - done!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. We’re running asynchronous code without promises and not hitting any problems.&lt;/p&gt;

&lt;p&gt;But our Thanksgiving feast is pretty sad. Just a turkey. It needs some sides!&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fantastic, now we can have a side of roast veggies. But we only have a small oven! We can’t roast the veggies and the turkey at the same time, so we’ll have to modify our code a little.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- New line here!&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, we’re back on track for our feast! Except we don’t have any plates to eat off of - oops!&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Setting table'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'table - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, we only want to set the table when the turkey and veggies are done (we’re using the table as a work surface for dessert until we’re ready to eat). So again, we need to modify the code a bit:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- New line here!&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But that won&amp;#39;t work, we need to wait for the veggies to finish roasting first&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Right you are, let’s fix that:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- New line here!&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s write out the full code in all it’s glory:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Setting table'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'table - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/QGaJXo"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excellent! We get the output:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Making turkey
turkey - done!
Roasting veggies
veggies - done!
Setting table
table - done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So everything works as expected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The code isn’t too bad...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, I agree. It’s not too bad. Yet.&lt;/p&gt;

&lt;h3&gt;Round two&lt;/h3&gt;

&lt;p&gt;Let’s make our requirements a bit more complicated. Now we can roast our veggies and the turkey at the same time (we got a bigger oven), but we still only want to set the table when all the cooking is finished.&lt;/p&gt;

&lt;p&gt;First we’ll update the &lt;code&gt;makeTurkey&lt;/code&gt; code so it doesn’t call &lt;code&gt;roastVeggies&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// roastVeggies(); &amp;lt;-- This line no longer needed&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll update the main project execution to call &lt;code&gt;roastVeggies&lt;/code&gt; at the same time as &lt;code&gt;makeTurkey&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But how do we know when to set the table?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, for now we can leave &lt;code&gt;setTable&lt;/code&gt; where it is in the &lt;code&gt;roastVeggies&lt;/code&gt; call. Since &lt;code&gt;roastVeggies&lt;/code&gt; and &lt;code&gt;makeTurkey&lt;/code&gt; both take &lt;code&gt;1000ms&lt;/code&gt; to complete it doesn’t much matter where the set table is called from. (Note: this isn’t entirely accurate as one must finish before the other, but we’ll ignore that race condition. For now!)&lt;/p&gt;

&lt;p&gt;Ok, so here’s our final code:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Setting table'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'table - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/rWpoax"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And our output is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Making turkey
Roasting veggies
turkey - done!
veggies - done!
Setting table
table - done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is exactly what we want! The turkey and veggies start roasting at the same time, finish some time later, and then we set the table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I get the feeling there’s a catch...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, there is.&lt;/p&gt;

&lt;p&gt;Unlike cooking, most async calls take an unknown length of time to complete (like an ajax request). We can’t count on one call returning before another, or taking the same length of time. We cheated a bit in the previous example because we knew that roasting the turkey and veggies would take the same amount of time.&lt;/p&gt;

&lt;p&gt;So let’s look at a more realistic example:&lt;/p&gt;

&lt;h3&gt;Round three&lt;/h3&gt;

&lt;p&gt;First we’ll write a quick random number generator:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll set &lt;code&gt;roastTurkey&lt;/code&gt; and &lt;code&gt;roastVeggies&lt;/code&gt; to take a random amount of time between 100 and 2000 ms.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- line updated!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- line updated!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we’ll run the code and see what happens! (It might take a few attempts to get result below.)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Making turkey
Roasting veggies
veggies - done!
Setting table
turkey - done!
table - done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Oh no! We’ve started on the table before the turkey was done!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oh no indeed! Now that the turkey and veggies take a variable time to cook (a much more realistic example of async code) we don’t know when to set the table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so now what?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We’ll do one more iteration to get this version to work properly.&lt;/p&gt;

&lt;p&gt;Remember, our constraints are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The two roastings can happen at the same time (they’re at least started together).&lt;/li&gt;
&lt;li&gt;The table must not be set while anything is roasting.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need a way to know when the timers have finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning!&lt;/strong&gt; This is not good code! The whole point of this exercise is to find an example where promises would be a better solution. Do not try this at home!&lt;/p&gt;

&lt;p&gt;We’ll start by keeping track of the two timers and clearing them out when the timers have expired:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;veggieTimer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- line updated&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;-- new line&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;veggieTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- line updated&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;veggieTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;-- new line&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice these are global variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;boo, hiss&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right, but we’ll need to access them in just a moment.&lt;/p&gt;

&lt;p&gt;Alright, now we’ve got our timers all set up we need to check for when they’ve completed. Again, we don’t know when this will happen so we have to check the timers every millisecond to find when they’ve finished. Once they’ve finished we’ll set the table and clear out the check method.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkReady&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;veggieTimer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkReady&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the final version of this round looks like:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;veggieTimer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Making turkey'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'turkey - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Roasting veggies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;veggieTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'veggies - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;veggieTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Setting table'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'table - done!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeTurkey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;roastVeggies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkReady&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;turkeyTimer&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;veggieTimer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkReady&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/ObzrPB"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yikes!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right. This code is not very nice. It works, but it’s confusing and needing to poll every 1ms to see if it’s time to set the table is pretty terrible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There must be a better way!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is! We’ll be looking at promises next time to do just that.&lt;/p&gt;

&lt;p&gt;Check in again soon to see how all this can be so much better!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ReactJS: Props vs. State</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/react-state-vs-pros/"/>
    <id>http://lucybain.com/blog/2016/react-state-vs-pros/</id>
    <published>2016-11-27T11:00:00+11:00</published>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been using ReactJS with Redux at work recently, and I have quite a few questions about how it all fits together. I figured I’d start small, with just some React questions and see how it goes.&lt;/p&gt;

&lt;p&gt;This “props vs. state” question is &lt;a href="http://stackoverflow.com/search?q=%5Breactjs%5D+state+props"&gt;pretty common&lt;/a&gt; for new React devs - they look so similar, but are used differently. So what’s going on there?&lt;/p&gt;

&lt;h2&gt;Props&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What does “props” even mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To get the jargon out of the way, “props” is short for “properties” so nothing particularly fancy there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, all right then. What makes props special?&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;props&lt;/code&gt; are passed into the component&lt;/h3&gt;

&lt;p&gt;Here’s an example (code from the &lt;a href="https://facebook.github.io/react/docs/components-and-props.html"&gt;React Guide&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}

const element = &amp;lt;Welcome name="Sara" /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play with this on &lt;a href="https://codepen.io/anon/pen/aByERM?editors=1011"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The line &lt;code&gt;&amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;&lt;/code&gt; creates a property &lt;code&gt;name&lt;/code&gt; with value &lt;code&gt;&amp;quot;Sara&amp;quot;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;That sounds kinda like a function call...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, the property is passed to the component, similar to how an argument is passed to a function. In fact, we could even rewrite the component to be simpler:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello {props.name}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the “props as arguments” comparison is even clearer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OK, so props “come from above.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Often, but not always. A component can also have default props, so if a prop isn’t passed through it can still be set.&lt;/p&gt;

&lt;p&gt;We can make the &lt;code&gt;name&lt;/code&gt; property optional by adding &lt;code&gt;defaultProps&lt;/code&gt; to the &lt;code&gt;Welcome&lt;/code&gt; class:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}

Welcome.defaultProps = {
  name: "world",
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;Welcome&lt;/code&gt; is called without a name it will simply render &lt;code&gt;&amp;lt;h1&amp;gt; Hello world&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;props&lt;/code&gt; can come from the parent, or can be set by the component itself.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;props&lt;/code&gt; should not change&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;What?! I’ve totally done that!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You used to be able to change &lt;code&gt;props&lt;/code&gt; with &lt;code&gt;setProps&lt;/code&gt; and &lt;code&gt;replaceProps&lt;/code&gt; but these have been &lt;a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#new-deprecations-introduced-with-a-warning"&gt;deprecated&lt;/a&gt;. During a component’s life cycle &lt;code&gt;props&lt;/code&gt; should not change (consider them immutable).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fine, I won’t change props any more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;props&lt;/code&gt; are passed in, and they cannot change, you can think of any React component that only uses &lt;code&gt;props&lt;/code&gt; (and not &lt;code&gt;state&lt;/code&gt;) as “pure,” that is, it will always render the same output given the same input. This makes them really easy to test - win!&lt;/p&gt;

&lt;h2&gt;State&lt;/h2&gt;

&lt;p&gt;Like &lt;code&gt;props&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; holds information about the component. However, the kind of information and how it is handled is different.&lt;/p&gt;

&lt;p&gt;By default, a component has no state. The &lt;code&gt;Welcome&lt;/code&gt; component from above is stateless:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello {props.name}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;So when would you use state?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When a component needs to keep track of information between renderings the component &lt;em&gt;itself&lt;/em&gt; can create, update, and use state.&lt;/p&gt;

&lt;p&gt;We’ll be working with a fairly simple component to see &lt;code&gt;state&lt;/code&gt; working in action. We’ve got a button that keeps track of how many times you’ve clicked it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yawn...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, but here’s the code:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Button extends React.Component {
  constructor() {
    super();
    this.state = {
      count: 0,
    };
  }

  updateCount() {
    this.setState((prevState, props) =&amp;gt; {
      return { count: prevState.count + 1 }
    });
  }

  render() {
    return (&amp;lt;button
              onClick={() =&amp;gt; this.updateCount()}
            &amp;gt;
              Clicked {this.state.count} times
            &amp;lt;/button&amp;gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play with this code on &lt;a href="https://codepen.io/lbain/pen/ENpzBZ"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gah! There’s so much there! What’s going on?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now we’re working with &lt;code&gt;state&lt;/code&gt; things are a bit more complicated. But we’ll break it down to make it more understandable.&lt;/p&gt;

&lt;p&gt;Our first real difference between &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; is that...&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;state&lt;/code&gt; is created in the component&lt;/h3&gt;

&lt;p&gt;Let’s look at the &lt;code&gt;constructor&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor() {
  super();
  this.state = {
    count: 0,
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where &lt;code&gt;state&lt;/code&gt; gets it’s initial data. The inital data can be hard coded (as above), but it can also come from &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well that’s just confusing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is, I know. But it makes sense - you can’t change &lt;code&gt;props&lt;/code&gt;, but it’s pretty reasonable to want to do stuff to the data that a component receives. That’s where state comes in.&lt;/p&gt;

&lt;p&gt;Moving on brings us to our second difference...&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;state&lt;/code&gt; is changeable&lt;/h3&gt;

&lt;p&gt;Here’s &lt;code&gt;updateCount&lt;/code&gt; again:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;updateCount() {
  this.setState((prevState, props) =&amp;gt; {
    return { count: prevState.count + 1 }
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We change the state to keep track of the total number of clicks. The important bit is &lt;code&gt;setState&lt;/code&gt;. First off, notice that &lt;code&gt;setState&lt;/code&gt; takes a function, that’s becuase &lt;code&gt;setState&lt;/code&gt; can run asynchronously. It needs to take a callback function rather than updating the state directly. You can see we have access to &lt;code&gt;prevState&lt;/code&gt; within the callback, this will contain the previous state, even if the state has already been updated somewhere else. Pretty slick, huh?&lt;/p&gt;

&lt;p&gt;But React goes one step better, &lt;code&gt;setState&lt;/code&gt; updates the state object &lt;strong&gt;and&lt;/strong&gt; re-renders the component automagically.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boom!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, this is pretty great of React to do, no need for us to explicitly re-render or worry about anything. React will take care of it all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;setState&lt;/code&gt; warning one!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is tempting to write &lt;code&gt;this.state.count = this.state.count + 1&lt;/code&gt;. &lt;em&gt;Do not do this!&lt;/em&gt; React cannot listen to the state getting updated in this way, so your component will not re-render. Always use &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;setState&lt;/code&gt; warning two!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might also be tempting to write something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// DO NOT USE
this.setState({
  count: this.state.count + 1
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this might look reasonable, doesn’t throw errors, and you might find examples that use this syntax online, it is &lt;em&gt;wrong&lt;/em&gt;. This does not take into account the asychronous nature that &lt;code&gt;setState&lt;/code&gt; can use and might cause errors with out of sync state data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Program as usual&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally, &lt;code&gt;render&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
  return (&amp;lt;button
            onClick={() =&amp;gt; this.updateCount()}
          &amp;gt;
            Clicked {this.state.count} times
          &amp;lt;/button&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;onClick={() =&amp;gt; this.updateCount()}&lt;/code&gt; means that when the button is clicked the &lt;code&gt;updateCount&lt;/code&gt; method will be called. We need to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;ES6’s arrow function&lt;/a&gt; so &lt;code&gt;updateCount&lt;/code&gt; will have access to this instance’s &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The text rendered in the button is &lt;code&gt;Clicked {this.state.count} times&lt;/code&gt;, which will use whatever &lt;code&gt;this.state.count&lt;/code&gt; is at the time of rendering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Phew! That was a lot! Can I have it one more time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing, let’s look at the whole flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The component is initialised and &lt;code&gt;state.count&lt;/code&gt; is set to 0&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.state = {
  count: 0,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The component renders, with “Clicked 0 times” as the button text&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Clicked {this.state.count} times
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The user clicks the button&lt;/p&gt;

&lt;p&gt;&lt;em&gt;click!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;updateCount&lt;/code&gt; is called, bound to this instance of the component&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onClick={() =&amp;gt; this.updateCount()}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;updateCount&lt;/code&gt; calls &lt;code&gt;setState&lt;/code&gt; with a call back to increase the counter from the previous state’s counter value&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.setState((prevState, props) =&amp;gt; {
return { count: prevState.count + 1 }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; triggers a call to &lt;code&gt;render&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React magic!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The component renders, with “Clicked 1 times” as the button text&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Clicked {this.state.count} times
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Review&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; both hold information relating to the component, they are used differently and should be kept separate.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;props&lt;/code&gt; contains information set by the parent component (although defaults can be set) and should not be changed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;state&lt;/code&gt; contains “private” information for the component to initialise, change, and use on it’s own.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;... props are a way of passing data from parent to child. ... State is reserved only for interactivity, that is, data that changes over time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Facebook&amp;#39;s &lt;a href="https://facebook.github.io/react/docs/thinking-in-react.html"&gt;React Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazing guide on &lt;a href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md"&gt;state vs. props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackoverflow &lt;a href="http://stackoverflow.com/questions/23481061/reactjs-state-vs-prop"&gt;question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs on &lt;a href="https://facebook.github.io/react/docs/components-and-props.html"&gt;Components and Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs on &lt;a href="https://facebook.github.io/react/docs/state-and-lifecycle.html"&gt;State and Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
