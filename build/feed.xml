<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2016-12-10T11:00:00+11:00</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Upgrading to Middleman v4</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/middleman-v4/"/>
    <id>http://lucybain.com/blog/2016/middleman-v4/</id>
    <published>2016-12-10T11:00:00+11:00</published>
    <updated>2016-12-10T23:17:37+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;My blog runs on &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt; - I really like the way they’ve set things up, and it feels very familiar to me since it’s written in Ruby. However, v4 came out almost a year ago, and I never upgraded. I tried half heartedly a couple of times, but never committed. But this time I made the leap, what you see before you is a blog built by Middleman 4.0.0 (ok, I need to upgrade it even more, but this is an improvement!).&lt;/p&gt;

&lt;p&gt;I hit some snags as I went along, so let’s talk about those&lt;/p&gt;

&lt;h2&gt;Removed “Implied Extension feature”&lt;/h2&gt;

&lt;p&gt;The first issue is listed in their &lt;a href="https://middlemanapp.com/basics/upgrade-v4/"&gt;upgrade docs&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removed &amp;quot;Implied Extension feature&amp;quot;, all templates must include a full file name plus the list of desired templating extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I completely missed this (it’s about halfway down a long list of bullet points, most of which didn’t apply to me), but eventually found it referenced in a few issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does that mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good question, it wasn’t obvious to me either. The “full file name” is the normal name of the file (this file’s name is &lt;code&gt;12-10-middleman-v4&lt;/code&gt;) which is simple enough. But the “list of desired templating extensions” needs to include the ultimate format you want your page to end up in (in this case, &lt;code&gt;.html&lt;/code&gt;). This is new, you used to be able to just have &lt;code&gt;12-10-middleman-v4.md&lt;/code&gt;, but now you need the full &lt;code&gt;12-10-middleman-v4.html.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Updating all your files to add a &lt;code&gt;.html&lt;/code&gt; before the previous extension is more than a little annoying. So I wrote a little script to help me out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;path_to_project = &amp;quot;&amp;quot; # FILL ME IN

# Step 1: get a list of all the extensions you use

require &amp;#39;set&amp;#39;
extensions = Set.new []

Dir.glob(path_to_project).each do |file|
  parts = file.split(&amp;#39;.&amp;#39;)
  extensions.merge(parts[1.. parts.length])
end

extensions.each do |extension|
  puts extension
end

# Step 2: convert the extensions you want converted

extensions_to_convert = [] # FILL ME IN

Dir.glob(path_to_project).each do |file|
  parts = file.split(&amp;#39;.&amp;#39;)
  should_convert_extension? = (parts &amp;amp; extensions_to_convert).any?
  already_converted? = parts.include? &amp;#39;html&amp;#39;
  next unless should_convert_extension? and not already_converted?
  new_name = parts[0] + &amp;#39;.html.&amp;#39; + parts[1..parts.length].join(&amp;#39;.&amp;#39;)

  # verify file conversion
  puts &amp;quot;#{file} &amp;gt; #{new_name}&amp;quot;

  # uncomment to make actual changes
  # File.rename(file, new_name)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find it &lt;a href="https://gist.github.com/lbain/5ce9ef81f6a3ce6f3b4b84774f9a63d8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Filter errors with &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Some of my earlier blog posts were written in Haml (this was back when I was writing more Ruby and didn’t know Markdown as well). In general these moved from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.html.haml&lt;/code&gt; without a hitch, but a few threw errors on &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and &lt;code&gt;:code&lt;/code&gt; saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Filter &amp;quot;code&amp;quot; is not defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have no idea what changed in Haml or Middleman to trigger this failure (I assume it was a Middleman change since I only moved from &lt;a href="https://github.com/lbain/lucybain/commit/0cab70d26bd82946dbc6475fe0a4bb147f5639b4"&gt;Haml 4.0.5 to 4.0.7&lt;/a&gt;). Since I only had a few of these errors it was easiest to convert the Haml files to Markdown files. It’s something I’ve been meaning to do anyway, and this was as good a time as any.&lt;/p&gt;

&lt;h2&gt;Sass files should include Sass files&lt;/h2&gt;

&lt;p&gt;I had a tiny issue with a Sass file that used to be &lt;code&gt;@include&lt;/code&gt;ing a CSS file, but now died. Seems like that should never have worked, but it was an easy fix to convert my one &lt;a href="http://css2sass.herokuapp.com/"&gt;CSS file to a Sass&lt;/a&gt; file and have everything work.&lt;/p&gt;

&lt;h2&gt;Middleman-blog doesn’t like Haml layout&lt;/h2&gt;

&lt;p&gt;I don’t really know what’s going on here, but I’m not the only &lt;a href="https://github.com/middleman/middleman-blog/issues/324"&gt;person&lt;/a&gt; experiencing this &lt;a href="https://github.com/middleman/middleman-blog/issues/322"&gt;issue&lt;/a&gt;. At the end of the day there’s something wonky happening with how the blog template plays with the general site template in Haml. After a fair amount of tinkering (and hair pulling...) I gave up and &lt;a href="https://haml2erb.org/"&gt;converted the layouts&lt;/a&gt; to &lt;code&gt;.erb&lt;/code&gt; files. I’m not super happy with this outcome (I had &lt;code&gt;.haml&lt;/code&gt; files for a reason!), but it works and I want to enjoy my remaining hair.&lt;/p&gt;

&lt;p&gt;An issue with converting from &lt;code&gt;.haml&lt;/code&gt; to &lt;code&gt;.erb&lt;/code&gt;: in order to preserve whitespace and nice things in a markdown converted blog post with code snippets I needed to use &lt;code&gt;find_and_preserve&lt;/code&gt;. However, this method only exists in Haml, and so isn’t available in an &lt;code&gt;.erb&lt;/code&gt; file. It’s not needed for embedded Ruby, but it’ll throw errors until you delete it.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; wrapping&lt;/h2&gt;

&lt;p&gt;Last of all I found the updated &lt;a href="https://github.com/vmg/redcarpet"&gt;Redcarpet gem&lt;/a&gt; now wraps all code in &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags. Now you’d think this wasn’t a big deal, but it really messed with my head. What used to happen was...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`single ticks`
&amp;lt;code&amp;gt;single ticks&amp;lt;/code&amp;gt;


```
triple ticks
```
&amp;lt;pre&amp;gt;triple ticks&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But now the ``` is different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
triple ticks
```
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;triple ticks&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately all my styling relied on the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; only being used inline and the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; only being used for code blocks. It &lt;a href="https://github.com/lbain/lucybain/commit/945fd5c249731572e1c9ebeb2a3a7e97351de2cd"&gt;wasn’t hard to fix&lt;/a&gt;, but it make my blog posts look weird and caused a good deal of despair.&lt;/p&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;Usually the lesson from this kind of thing is “update earlier!” but I’m honestly not sure that would have helped. There weren’t a lot of resources out there to find (or my Google searches were completely off base), and the &lt;a href="https://forum.middlemanapp.com"&gt;Middleman forum&lt;/a&gt; kept not loading. Which is why I’m writing this post - I hope it helps someone!&lt;/p&gt;

&lt;p&gt;I did hugely underestimate the amount of time involved with doing the upgrade. Often solving the issue wasn’t too difficult, but finding it was hard. And, in the case of the Haml layouts, I never solved it but had to call it quits and move on to the next thing.&lt;/p&gt;

&lt;p&gt;I also got really frustrated with the whole thing and nearly called it off at least twice. It’s hard to keep going when you don’t know how close to the end you are. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Javascript: pre-Promises</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/js-promises-1/"/>
    <id>http://lucybain.com/blog/2016/js-promises-1/</id>
    <published>2016-11-30T11:00:00+11:00</published>
    <updated>2016-12-10T22:10:54+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Promises have confused me for quite a while, so I decided I should spend some time thinking about them. Turns out they’re really powerful, and there’s a fair bit going on with promises. This first post has no promises code, but instead gives some general information about promises and then sets up the problem that promises are meant to solve. I’ll reference this problem in my next blog post which will have plenty of promise code!&lt;/p&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ok, you got me all excited about promises, but what do they even &lt;strong&gt;do&lt;/strong&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– MDN’s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I’ll admit I didn’t really know what that meant when I first read it, so let’s break it down a bit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, we know promises are objects, and since they wrote &lt;strong&gt;P&lt;/strong&gt;romise with a capital P we also know it’s a &lt;a href="/blog/2015/js-new-keyword-and-functions/"&gt;constructor&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;used for asynchronous computations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, “asynchronous computations” are ones that don’t block the main execution thread, typically because they are long running. A common example is an &lt;a href="/blog/2015/js-how-does-ajax-work/"&gt;ajax&lt;/a&gt; request for data from the server. We can fire off the request, but we don’t want to stop the rest of the page from working while we wait for that request to return. Another example (which we’ll work with later) is timeouts - the whole page shouldn’t get locked while we wait for the timer to expire!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Promise represents a value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmm, now things are getting a bit weird. It “represents” a value, but isn’t the value itself. It’s not that the promise &lt;em&gt;is&lt;/em&gt; &lt;code&gt;5&lt;/code&gt;, but that it represents something else. Let’s keep reading...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a value which may be available now, or in the future, or never.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, so this value is a bit of a &lt;a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger's_cat"&gt;Schrödinger&amp;#39;s cat&lt;/a&gt; type value. It may or may not be available, both now and in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yikes! How are we supposed to program with so many unknowns?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But you already do!&lt;/p&gt;

&lt;h2&gt;Async code without promises&lt;/h2&gt;

&lt;h3&gt;Round one&lt;/h3&gt;

&lt;p&gt;Let’s start with our timer example. It was recently Thanksgiving, so we’re going put on a Thanksgiving feast!&lt;/p&gt;

&lt;p&gt;First we need to roast the turkey:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
  }, 1000);
}

makeTurkey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;1 second to roast a turkey...?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just go with it, no need for the examples to run in real time!&lt;/p&gt;

&lt;p&gt;As you can see, we’ll log out &lt;code&gt;Making turkey&lt;/code&gt; and then a second later we’ll log &lt;code&gt;turkey - done!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. We’re running asynchronous code without promises and not hitting any problems.&lt;/p&gt;

&lt;p&gt;But our Thanksgiving feast is pretty sad. Just a turkey. It needs some sides!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
  }, 1000);
}

roastVeggies();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fantastic, now we can have a side of roast veggies. But we only have a small oven! We can’t roast the veggies and the turkey at the same time, so we’ll have to modify our code a little.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
    roastVeggies(); // &amp;lt;-- New line here!
  }, 1000);
}

makeTurkey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, we’re back on track for our feast! Except we don’t have any plates to eat off of - oops!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function setTable() {
  console.log(&amp;#39;Setting table&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;table - done!&amp;#39;);
  }, 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we only want to set the table when the turkey and veggies are done (we’re using the table as a work surface for dessert until we’re ready to eat). So again, we need to modify the code a bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
    roastVeggies();
    setTable(); // &amp;lt;-- New line here!
  }, 1000);
}

makeTurkey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;But that won&amp;#39;t work, we need to wait for the veggies to finish roasting first&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Right you are, let’s fix that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
    setTable(); // &amp;lt;-- New line here!
  }, 1000);
}

roastVeggies();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s write out the full code in all it’s glory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
    roastVeggies();
  }, 1000);
}

function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
    setTable();
  }, 1000);
}

function setTable() {
  console.log(&amp;#39;Setting table&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;table - done!&amp;#39;);
  }, 1000);
}

makeTurkey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/QGaJXo"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excellent! We get the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Making turkey
turkey - done!
Roasting veggies
veggies - done!
Setting table
table - done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So everything works as expected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The code isn’t too bad...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, I agree. It’s not too bad. Yet.&lt;/p&gt;

&lt;h3&gt;Round two&lt;/h3&gt;

&lt;p&gt;Let’s make our requirements a bit more complicated. Now we can roast our veggies and the turkey at the same time (we got a bigger oven), but we still only want to set the table when all the cooking is finished.&lt;/p&gt;

&lt;p&gt;First we’ll update the &lt;code&gt;makeTurkey&lt;/code&gt; code so it doesn’t call &lt;code&gt;roastVeggies&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
    // roastVeggies(); &amp;lt;-- This line no longer needed
  }, 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we’ll update the main project execution to call &lt;code&gt;roastVeggies&lt;/code&gt; at the same time as &lt;code&gt;makeTurkey&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;makeTurkey();
roastVeggies();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;But how do we know when to set the table?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, for now we can leave &lt;code&gt;setTable&lt;/code&gt; where it is in the &lt;code&gt;roastVeggies&lt;/code&gt; call. Since &lt;code&gt;roastVeggies&lt;/code&gt; and &lt;code&gt;makeTurkey&lt;/code&gt; both take &lt;code&gt;1000ms&lt;/code&gt; to complete it doesn’t much matter where the set table is called from. (Note: this isn’t entirely accurate as one must finish before the other, but we’ll ignore that race condition. For now!)&lt;/p&gt;

&lt;p&gt;Ok, so here’s our final code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
  }, 1000);
}

function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
    setTable();
  }, 1000);
}

function setTable() {
  console.log(&amp;#39;Setting table&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;table - done!&amp;#39;);
  }, 1000);
}

makeTurkey();
roastVeggies();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/rWpoax"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And our output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Making turkey
Roasting veggies
turkey - done!
veggies - done!
Setting table
table - done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is exactly what we want! The turkey and veggies start roasting at the same time, finish some time later, and then we set the table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I get the feeling there’s a catch...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, there is.&lt;/p&gt;

&lt;p&gt;Unlike cooking, most async calls take an unknown length of time to complete (like an ajax request). We can’t count on one call returning before another, or taking the same length of time. We cheated a bit in the previous example because we knew that roasting the turkey and veggies would take the same amount of time.&lt;/p&gt;

&lt;p&gt;So let’s look at a more realistic example:&lt;/p&gt;

&lt;h3&gt;Round three&lt;/h3&gt;

&lt;p&gt;First we’ll write a quick random number generator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function random(min, max) {
    return Math.random() * (max - min) + min;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll set &lt;code&gt;roastTurkey&lt;/code&gt; and &lt;code&gt;roastVeggies&lt;/code&gt; to take a random amount of time between 100 and 2000 ms.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
  }, random(100, 2000)); // &amp;lt;-- line updated!
}

function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
    setTable();
  }, random(100, 2000)); // &amp;lt;-- line updated!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we’ll run the code and see what happens! (It might take a few attempts to get result below.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Making turkey
Roasting veggies
veggies - done!
Setting table
turkey - done!
table - done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Oh no! We’ve started on the table before the turkey was done!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oh no indeed! Now that the turkey and veggies take a variable time to cook (a much more realistic example of async code) we don’t know when to set the table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so now what?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We’ll do one more iteration to get this version to work properly.&lt;/p&gt;

&lt;p&gt;Remember, our constraints are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The two roastings can happen at the same time (they’re at least started together).&lt;/li&gt;
&lt;li&gt;The table must not be set while anything is roasting.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need a way to know when the timers have finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning!&lt;/strong&gt; This is not good code! The whole point of this exercise is to find an example where promises would be a better solution. Do not try this at home!&lt;/p&gt;

&lt;p&gt;We’ll start by keeping track of the two timers and clearing them out when the timers have expired:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let turkeyTimer;
let veggieTimer;

function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  turkeyTimer = setTimeout(() =&amp;gt; { // &amp;lt;-- line updated
    console.log(&amp;#39;turkey - done!&amp;#39;);
    turkeyTimer = false;  // &amp;lt;-- new line
  }, random(100, 2000));
}

function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  veggieTimer = setTimeout(() =&amp;gt; { // &amp;lt;-- line updated
    console.log(&amp;#39;veggies - done!&amp;#39;);
    veggieTimer = false;  // &amp;lt;-- new line
  }, random(100, 2000));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice these are global variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;boo, hiss&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right, but we’ll need to access them in just a moment.&lt;/p&gt;

&lt;p&gt;Alright, now we’ve got our timers all set up we need to check for when they’ve completed. Again, we don’t know when this will happen so we have to check the timers every millisecond to find when they’ve finished. Once they’ve finished we’ll set the table and clear out the check method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const checkReady = setInterval(() =&amp;gt; {
  if (!turkeyTimer &amp;amp;&amp;amp; !veggieTimer) {
    setTable();
    clearInterval(checkReady);
  }
}, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the final version of this round looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let turkeyTimer;
let veggieTimer;

function random(min, max) {
    return Math.random() * (max - min) + min;
}

function makeTurkey() {
  console.log(&amp;#39;Making turkey&amp;#39;);
  turkeyTimer = setTimeout(() =&amp;gt; {
    console.log(&amp;#39;turkey - done!&amp;#39;);
    turkeyTimer = false;
  }, random(100, 2000));
}

function roastVeggies() {
  console.log(&amp;#39;Roasting veggies&amp;#39;);
  veggieTimer = setTimeout(() =&amp;gt; {
    console.log(&amp;#39;veggies - done!&amp;#39;);
    veggieTimer = false;
  }, random(100, 2000));
}

function setTable() {
  console.log(&amp;#39;Setting table&amp;#39;);
  setTimeout(() =&amp;gt; {
    console.log(&amp;#39;table - done!&amp;#39;);
  }, 1000);
}

makeTurkey();
roastVeggies();

const checkReady = setInterval(() =&amp;gt; {
  if (!turkeyTimer &amp;amp;&amp;amp; !veggieTimer) {
    setTable();
    clearInterval(checkReady);
  }
}, 1);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code on &lt;a href="https://codepen.io/lbain/pen/ObzrPB"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yikes!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right. This code is not very nice. It works, but it’s confusing and needing to poll every 1ms to see if it’s time to set the table is pretty terrible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There must be a better way!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is! We’ll be looking at promises next time to do just that.&lt;/p&gt;

&lt;p&gt;Check in again soon to see how all this can be so much better!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ReactJS: Props vs. State</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/react-state-vs-pros/"/>
    <id>http://lucybain.com/blog/2016/react-state-vs-pros/</id>
    <published>2016-11-27T11:00:00+11:00</published>
    <updated>2016-12-11T21:36:02+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been using ReactJS with Redux at work recently, and I have quite a few questions about how it all fits together. I figured I’d start small, with just some React questions and see how it goes.&lt;/p&gt;

&lt;p&gt;This “props vs. state” question is &lt;a href="http://stackoverflow.com/search?q=%5Breactjs%5D+state+props"&gt;pretty common&lt;/a&gt; for new React devs - they look so similar, but are used differently. So what’s going on there?&lt;/p&gt;

&lt;h2&gt;Props&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What does “props” even mean?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To get the jargon out of the way, “props” is short for “properties” so nothing particularly fancy there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well, all right then. What makes props special?&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;props&lt;/code&gt; are passed into the component&lt;/h3&gt;

&lt;p&gt;Here’s an example (code from the &lt;a href="https://facebook.github.io/react/docs/components-and-props.html"&gt;React Guide&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}

const element = &amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can play with this on &lt;a href="https://codepen.io/anon/pen/aByERM?editors=1011"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The line &lt;code&gt;&amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;&lt;/code&gt; creates a property &lt;code&gt;name&lt;/code&gt; with value &lt;code&gt;&amp;quot;Sara&amp;quot;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;That sounds kinda like a function call...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, the property is passed to the component, similar to how an argument is passed to a function. In fact, we could even rewrite the component to be simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello {props.name}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the “props as arguments” comparison is even clearer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OK, so props “come from above.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Often, but not always. A component can also have default props, so if a prop isn’t passed through it can still be set.&lt;/p&gt;

&lt;p&gt;We can make the &lt;code&gt;name&lt;/code&gt; property optional by adding &lt;code&gt;defaultProps&lt;/code&gt; to the &lt;code&gt;Welcome&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}

Welcome.defaultProps = {
  name: &amp;quot;world&amp;quot;,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;Welcome&lt;/code&gt; is called without a name it will simply render &lt;code&gt;&amp;lt;h1&amp;gt; Hello world&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;props&lt;/code&gt; can come from the parent, or can be set by the component itself.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;props&lt;/code&gt; should not change&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;What?! I’ve totally done that!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You used to be able to change &lt;code&gt;props&lt;/code&gt; with &lt;code&gt;setProps&lt;/code&gt; and &lt;code&gt;replaceProps&lt;/code&gt; but these have been &lt;a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#new-deprecations-introduced-with-a-warning"&gt;deprecated&lt;/a&gt;. During a component’s life cycle &lt;code&gt;props&lt;/code&gt; should not change (consider them immutable).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fine, I won’t change props any more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;props&lt;/code&gt; are passed in, and they cannot change, you can think of any React component that only uses &lt;code&gt;props&lt;/code&gt; (and not &lt;code&gt;state&lt;/code&gt;) as “pure,” that is, it will always render the same output given the same input. This makes them really easy to test - win!&lt;/p&gt;

&lt;h2&gt;State&lt;/h2&gt;

&lt;p&gt;Like &lt;code&gt;props&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; holds information about the component. However, the kind of information and how it is handled is different.&lt;/p&gt;

&lt;p&gt;By default, a component has no state. The &lt;code&gt;Welcome&lt;/code&gt; component from above is stateless:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello {props.name}&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;So when would you use state?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When a component needs to keep track of information between renderings the component &lt;em&gt;itself&lt;/em&gt; can create, update, and use state.&lt;/p&gt;

&lt;p&gt;We’ll be working with a fairly simple component to see &lt;code&gt;state&lt;/code&gt; working in action. We’ve got a button that keeps track of how many times you’ve clicked it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yawn...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, but here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Button extends React.Component {
  constructor() {
    super();
    this.state = {
      count: 0,
    };
  }

  updateCount() {
    this.setState((prevState, props) =&amp;gt; {
      return { count: prevState.count + 1 }
    });
  }

  render() {
    return (&amp;lt;button
              onClick={() =&amp;gt; this.updateCount()}
            &amp;gt;
              Clicked {this.state.count} times
            &amp;lt;/button&amp;gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can play with this code on &lt;a href="https://codepen.io/lbain/pen/ENpzBZ"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gah! There’s so much there! What’s going on?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now we’re working with &lt;code&gt;state&lt;/code&gt; things are a bit more complicated. But we’ll break it down to make it more understandable.&lt;/p&gt;

&lt;p&gt;Our first real difference between &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; is that...&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;state&lt;/code&gt; is created in the component&lt;/h3&gt;

&lt;p&gt;Let’s look at the &lt;code&gt;constructor&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor() {
  super();
  this.state = {
    count: 0,
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where &lt;code&gt;state&lt;/code&gt; gets it’s initial data. The inital data can be hard coded (as above), but it can also come from &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well that’s just confusing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is, I know. But it makes sense - you can’t change &lt;code&gt;props&lt;/code&gt;, but it’s pretty reasonable to want to do stuff to the data that a component receives. That’s where state comes in.&lt;/p&gt;

&lt;p&gt;Moving on brings us to our second difference...&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;state&lt;/code&gt; is changeable&lt;/h3&gt;

&lt;p&gt;Here’s &lt;code&gt;updateCount&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;updateCount() {
  this.setState((prevState, props) =&amp;gt; {
    return { count: prevState.count + 1 }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We change the state to keep track of the total number of clicks. The important bit is &lt;code&gt;setState&lt;/code&gt;. First off, notice that &lt;code&gt;setState&lt;/code&gt; takes a function, that’s becuase &lt;code&gt;setState&lt;/code&gt; can run asynchronously. It needs to take a callback function rather than updating the state directly. You can see we have access to &lt;code&gt;prevState&lt;/code&gt; within the callback, this will contain the previous state, even if the state has already been updated somewhere else. Pretty slick, huh?&lt;/p&gt;

&lt;p&gt;But React goes one step better, &lt;code&gt;setState&lt;/code&gt; updates the state object &lt;strong&gt;and&lt;/strong&gt; re-renders the component automagically.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boom!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, this is pretty great of React to do, no need for us to explicitly re-render or worry about anything. React will take care of it all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;setState&lt;/code&gt; warning one!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is tempting to write &lt;code&gt;this.state.count = this.state.count + 1&lt;/code&gt;. &lt;em&gt;Do not do this!&lt;/em&gt; React cannot listen to the state getting updated in this way, so your component will not re-render. Always use &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;setState&lt;/code&gt; warning two!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might also be tempting to write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DO NOT USE
this.setState({
  count: this.state.count + 1
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this might look reasonable, doesn’t throw errors, and you might find examples that use this syntax online, it is &lt;em&gt;wrong&lt;/em&gt;. This does not take into account the asychronous nature that &lt;code&gt;setState&lt;/code&gt; can use and might cause errors with out of sync state data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Program as usual&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally, &lt;code&gt;render&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render() {
  return (&amp;lt;button
            onClick={() =&amp;gt; this.updateCount()}
          &amp;gt;
            Clicked {this.state.count} times
          &amp;lt;/button&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;onClick={() =&amp;gt; this.updateCount()}&lt;/code&gt; means that when the button is clicked the &lt;code&gt;updateCount&lt;/code&gt; method will be called. We need to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;ES6’s arrow function&lt;/a&gt; so &lt;code&gt;updateCount&lt;/code&gt; will have access to this instance’s &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The text rendered in the button is &lt;code&gt;Clicked {this.state.count} times&lt;/code&gt;, which will use whatever &lt;code&gt;this.state.count&lt;/code&gt; is at the time of rendering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Phew! That was a lot! Can I have it one more time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing, let’s look at the whole flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The component is initialised and &lt;code&gt;state.count&lt;/code&gt; is set to 0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.state = {
  count: 0,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The component renders, with “Clicked 0 times” as the button text&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Clicked {this.state.count} times
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The user clicks the button&lt;/p&gt;

&lt;p&gt;&lt;em&gt;click!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;updateCount&lt;/code&gt; is called, bound to this instance of the component&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onClick={() =&amp;gt; this.updateCount()}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;updateCount&lt;/code&gt; calls &lt;code&gt;setState&lt;/code&gt; with a call back to increase the counter from the previous state’s counter value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.setState((prevState, props) =&amp;gt; {
return { count: prevState.count + 1 }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; triggers a call to &lt;code&gt;render&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React magic!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The component renders, with “Clicked 1 times” as the button text&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Clicked {this.state.count} times
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Review&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; both hold information relating to the component, they are used differently and should be kept separate.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;props&lt;/code&gt; contains information set by the parent component (although defaults can be set) and should not be changed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;state&lt;/code&gt; contains “private” information for the component to initialise, change, and use on it’s own.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;... props are a way of passing data from parent to child. ... State is reserved only for interactivity, that is, data that changes over time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Facebook&amp;#39;s &lt;a href="https://facebook.github.io/react/docs/thinking-in-react.html"&gt;React Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazing guide on &lt;a href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md"&gt;state vs. props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackoverflow &lt;a href="http://stackoverflow.com/questions/23481061/reactjs-state-vs-prop"&gt;question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs on &lt;a href="https://facebook.github.io/react/docs/components-and-props.html"&gt;Components and Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs on &lt;a href="https://facebook.github.io/react/docs/state-and-lifecycle.html"&gt;State and Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ela Conf - closing thoughts</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/ela-conf-closing-thoughts/"/>
    <id>http://lucybain.com/blog/2016/ela-conf-closing-thoughts/</id>
    <published>2016-11-14T11:00:00+11:00</published>
    <updated>2016-12-10T22:10:54+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Well, Ela Conf 2016 is over and done. It’s been just over a week since I attended - time to write up some musings from the event!&lt;/p&gt;

&lt;h2&gt;Topics&lt;/h2&gt;

&lt;p&gt;Ela Conf is very much about non-technical topics for technical women. Their tag line is “Empowering more women to be leaders in tech.” But the topics are fairly generic - accepting negative feedback is something everyone has to deal with. The lessons on leadership would apply to any company. That’s not to say the talks were too generic to be useful, but I think it’s an interesting question if this kind of conference should continue to market itself as “for technical women” or if they should be for any woman wanting a leadership role or perhaps for anyone wanting to be a leader.&lt;/p&gt;

&lt;p&gt;Personally, I valued the shared language and community that this conference offered. A speaker could reference making a commit, fixing a bug, or the head-baning frustration of feeling completely stuck on a problem. We could all relate. When I introduced myself I could say that I’m a frontender at Atlassian, rather than I’m a programmer at a tech company.&lt;/p&gt;

&lt;p&gt;On the flip side, I was surprisingly disappointed by the lack of technical topics. I knew none of the talks were going to be technical going in, but somehow with so many technical people around I felt something was missing without the technical talks. Uncomfortably, having so many technical &lt;em&gt;women&lt;/em&gt; and not having &lt;em&gt;any&lt;/em&gt; technical talks felt as though we were admitting that we weren’t technical enough, that women are more interested in feelings and “soft topics” than Real Programming. Of course, I know this isn’t the case, and that the goals of this conference aren’t around Real Programming.&lt;/p&gt;

&lt;h2&gt;Attendees&lt;/h2&gt;

&lt;p&gt;I’m making massive assumptions in this section because I don’t know the demographic details of the attendees.&lt;/p&gt;

&lt;p&gt;Attendees’s average age seemed to be around my own, but there was a reasonably sized spread. We had mom’s with teen-aged kids, and students from uni. I’m sure it tended towards younger, but it made me happy to see so many moms and long-time programmers there.&lt;/p&gt;

&lt;p&gt;Many people had switched careers, so there was a lot of diversity in experience. It was great to hear about people’s past in their talks, and to get some history about how they got into programming.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;lot&lt;/em&gt; of people came from bootcamps or were self taught. I’m pretty sure I was in the minority of people who did uni degrees in CS. I don’t see that as a bad thing, but it was unusual for a tech conference. I’m curious why more women with CS degrees didn’t attend. Is it because there aren’t as many of them or they don’t feel they would benefit as much? Something else?&lt;/p&gt;

&lt;h2&gt;Feels&lt;/h2&gt;

&lt;p&gt;Oh man, so many feels! Certainly a great conference to go to if you need some girl power in your life. But more than that, I loved how the speakers nomalised the “woman experience.” Typical tech talks don’t mention musicals or baking, but these both came up at Ela Conf. Women generally don’t say “babies are really boring,” but this came up too. It felt like everyone had agreed to “this is a safe place to say things you wouldn’t normally - don’t hold back” and &lt;em&gt;massive&lt;/em&gt; props to the organisers for creating and encouraging that vibe.&lt;/p&gt;

&lt;h2&gt;Networking&lt;/h2&gt;

&lt;p&gt;I’m not a great networker. I put a lot of things into place so I don’t need to talk about the weather with strangers. Being at Ela Conf was a bit isolating, and I didn’t do anything to stop that. I knew I was only in Philadelphia for the weekend, and that I was incredibly unlikely to bump into any of the attendees again. So I didn’t bother to connect with many of them. For their part, they didn’t do much to welcome me. Many of the attendees know each other from other Philly meetups and were excited to spend time together. I’m not grudging them that time - I certainly do it at my Sydney meetings.&lt;/p&gt;

&lt;h2&gt;Sum it up&lt;/h2&gt;

&lt;p&gt;All in all, I‘m really glad I attended and I’m grateful Atlassian made it possible for me to go. Would I do it again? Well, I won’t fly from Sydney to Philly to attend next year, but if there was one at home I’d certainly join in. Would I change anything? For what the organisers wanted, I believe they made exactly the right event. If I ran an event for technical women, I’d want something a little difference and I‘d make some changes.&lt;/p&gt;

&lt;p&gt;Big props to the organisers for all of the hard work they’ve done over the past year - it was a beautiful event!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ela Conf - day two</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/ela-conf-day-2/"/>
    <id>http://lucybain.com/blog/2016/ela-conf-day-2/</id>
    <published>2016-11-05T11:00:00+11:00</published>
    <updated>2016-12-10T22:10:54+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We started with a light breakfast and moved right into the talks. Again, so many positive vibes and happy voices. Everyone is clearly excited to be here!&lt;/p&gt;

&lt;p&gt;We started off with some stories from the organisers about how they got into tech and why they decided to work with Ela Conf. It&amp;#39;s always nice to hear people’s stories and better understand where the conference comes from.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/welcome-day-2.jpg" alt="Welcome to day two!" /&gt;&lt;/p&gt;

&lt;h3&gt;Five things I Leared About Leadership from my Son, by &lt;a href="https://twitter.com/rockchick322004"&gt;Mary Scotton&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Get your hands dirty - be completely involved in, and committed to, your work. Other people will notice that you’re willing to get shit done.&lt;/li&gt;
&lt;li&gt;Break the rules - a.k.a. don’t do what your told. Your job isn’t just to do what you’re told, it’s to think, make considered decisions, and build good stuff.&lt;/li&gt;
&lt;li&gt;Go to coffee - spending authentic time with people (in and out of work) builds community and your network. Make an effort to keep moving relationships forward.&lt;/li&gt;
&lt;li&gt;Respect other perspectives - as a leader, it’s your job to make work a safe place to share different ideas. This is related to gender/race/etc. diversity, but it’s more about diversity of thought and allowing others to open up.&lt;/li&gt;
&lt;li&gt;Be you - if you’re holding yourself back you’re not able to fully do the above and connect with people.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Never Accept the First Offer, by &lt;a href="https://twitter.com/WhataTiberius"&gt;Tiberius Hefflin&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pay gap between women and men still exists. Companies can help by doing pay auditing (Atlassian does this - yay!), having blind applications, and setting up rules to favour people asking for more information around pay.&lt;/li&gt;
&lt;li&gt;Start small on things you don’t care about so you can get used to the process.&lt;/li&gt;
&lt;li&gt;Do your research before you start negotiating - what really is a &lt;em&gt;fair&lt;/em&gt; offer.&lt;/li&gt;
&lt;li&gt;Make a list of your skills are and what you bring to the table. This can help keep you focused and remind you why you’re asking for what you’re asking for.&lt;/li&gt;
&lt;li&gt;Ask for a pay review in six months so you have time to show them what you’re worth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Respect Effect, by &lt;a href="https://twitter.com/TimirahJ"&gt;Timirah James&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You need to teach people how to treat you, and what you will and won’t put up with. Make it clear when you don’t feel respected.&lt;/li&gt;
&lt;li&gt;Treat yourself the way you want others to treat you - this effect works from the inside out.&lt;/li&gt;
&lt;li&gt;The way that you’re perceived is something you can change, but you have to be mindful of it all the time - this takes effort!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Get yourself a squad!, by &lt;a href="https://twitter.com/nicolelzhu"&gt;Nicole Zhu&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“Coding is not a skill that you just innately have.”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Staying&lt;/em&gt; in tech is much harder than starting&lt;/li&gt;
&lt;li&gt;A squad is there to support you and your work - they’re friends who have the context of your work experience&lt;/li&gt;
&lt;li&gt;Your friends can give you more authentic feedback and keep you energized&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/squad.jpg" alt="Mulan’s Squad" /&gt;&lt;/p&gt;

&lt;h3&gt;Leadership and management (panel)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It’s all about communication - listening to your team members and getting them to open up about difficulties they’re experiencing, give time for others to offer suggestions before jumping in.&lt;/li&gt;
&lt;li&gt;1:1s should be more than just status checks; ask about life and future roles.&lt;/li&gt;
&lt;li&gt;If you’re wondering about moving to leadership, think about your current job: what kinds parts do you enjoy the most? (Coding vs. working with people vs. strategy meetings)&lt;/li&gt;
&lt;li&gt;Script difficult conversations (and practice with easy conversations!) so you know what you’re going to say and can stay calm&lt;/li&gt;
&lt;li&gt;Rotating roles (like scrum master) so others in the team can know what’s involved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://twitter.com/AlexandraLash/status/794970525642719233"&gt;&lt;img src="/images/blog/ela-conf/leadership-sketch-notes.jpg" alt="Leadership and management" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources mentioned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.thebroadexperience.com/"&gt;The broad experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://larahogan.me/blog/"&gt;Lara Hogan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rands in Repose &lt;a href="http://randsinrepose.com/welcome-to-rands-leadership-slack/"&gt;leadership slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Value of “I Don’t Know”, by &lt;a href="https://twitter.com/not_pele"&gt;Elise Wei&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Saying “I don’t know” helps fight imposter syndrome and makes others more comfortable with being honest about what they know too.&lt;/li&gt;
&lt;li&gt;Don’t just ask for the answer, ask &lt;em&gt;how&lt;/em&gt; they found the answer&lt;/li&gt;
&lt;li&gt;Builds up a culture of learning - you can encourage others to admit when they don’t know something and all learn together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;It’s not you, it’s them. What next?, by &lt;a href="https://twitter.com/theOnlyRuthie"&gt;Ruthie Floats&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It’s all about feelings. Your salary doesn’t actually matter, it’s how you feel about your salary that really matters.&lt;/li&gt;
&lt;li&gt;Determine the feeling, then the cause, then come up with an action. “I feel (blank) because (blank). So I will (blank).”&lt;/li&gt;
&lt;li&gt;What feelings are you hoping to get out of working in open source? Look for open source projects that meet these needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/its-them.jpg" alt="It’s not you" /&gt;&lt;/p&gt;

&lt;h3&gt;Getting Involved and Giving Back As A Beginner, by &lt;a href="https://twitter.com/_lisli"&gt;Lisa Yoder&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Document what you know, what you’re learning, and what you’re struggling with&lt;/li&gt;
&lt;li&gt;Keep lists of things you did that were hard - refer to these when you need a boost (like my moments of win list!)&lt;/li&gt;
&lt;li&gt;Noobs often explain things better since they just recently learned it. “You can be an expert at being a beginner.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Take up space: claiming your place in tech, by &lt;a href="https://twitter.com/adriennefriend"&gt;Adrienne Lowe&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Show yourself the same compassion you would show others (kinda a reverse golden rule)&lt;/li&gt;
&lt;li&gt;Celebrate the little wins too since they’re practice for celebrating the big wins; these wins help fight imposter syndrome&lt;/li&gt;
&lt;li&gt;“Asking for help when you need it is standing up for yourself.”&lt;/li&gt;
&lt;li&gt;There’s a difference between &lt;em&gt;real life&lt;/em&gt; struggle (food, safety, belonging, opening up to others), and &lt;em&gt;learning&lt;/em&gt; struggle. Take a deep breath and understand the difference.&lt;/li&gt;
&lt;li&gt;Reference to &lt;a href="https://www.amazon.com/dp/B00L0F01NK/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1"&gt;We should all be feminists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Naomi_Donna/status/794998786301063168"&gt;&lt;img src="/images/blog/ela-conf/take-up-space.jpg" alt="Take up space" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ela Conf - day one</title>
    <link rel="alternate" href="http://lucybain.com/blog/2016/ela-conf-day-1/"/>
    <id>http://lucybain.com/blog/2016/ela-conf-day-1/</id>
    <published>2016-11-04T11:00:00+11:00</published>
    <updated>2016-12-10T22:10:54+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Friday night was for talks and Lightning Talks. It was pretty quick, 7-8:30 or so, but a great way to meet some of my fellow attendees and kick off the good vibes for the evening. Props to the organisers who required all of the lightning talk presenters to send their slides in a couple hours before tonight started - that extra bit of planning made the evening so much smoother.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/welcome-day-1.jpg" alt="Welcome!" /&gt;&lt;/p&gt;

&lt;h3&gt;Build Your Community to Build Your Career, by Eleanor Whitney&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Understand what you have can bring to the table. You have skills and a history other people are interested in - which skills? what stories? How can you best share these?&lt;/li&gt;
&lt;li&gt;Community is part of your intellectual property (not sure I agree with this, but interesting idea)&lt;/li&gt;
&lt;li&gt;Scared of joining communities? Be human - you’re not alone. (Sounds like my “You’re not a snowflake”)&lt;/li&gt;
&lt;li&gt;Feel free to ask for help from your community, but be sure to help other members as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;5 Ways to Increase Your Influence, by Elizabeth Brown&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Reciprocity - if you help someone they’re more likely to help you in the future&lt;/li&gt;
&lt;li&gt;Liking principle - people want to help people they like&lt;/li&gt;
&lt;li&gt;Ben Franklin Effect - getting a rejection, probably means you’ll get a yes from them in the future.&lt;/li&gt;
&lt;li&gt;Scarcity - make it clear that you’re not permanently available&lt;/li&gt;
&lt;li&gt;Body language - project confidence&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More information from &lt;a href="https://www.amazon.com/Influence-Practice-Robert-B-Cialdini/dp/0205609996"&gt;Influence: science and practice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/increase-influence.jpg" alt="Increasing influence" /&gt;&lt;/p&gt;

&lt;h3&gt;Angry Black Woman, by Brittany Canty&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Holding back your emotions doesn’t always help; other people need to see how what they’re saying actual impacts you.&lt;/li&gt;
&lt;li&gt;It takes a lot of effort and energy to hold yourself back, instead use the energy for something better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/angry-black-woman.jpg" alt="Being angry is ok" /&gt;&lt;/p&gt;

&lt;h3&gt;5 Stages of Accepting Negative Feedback, by Jessica Hall&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Denial - there’s no way that’s true.&lt;/li&gt;
&lt;li&gt;Anger - why don’t they get it?&lt;/li&gt;
&lt;li&gt;Consideration - maybe they’ve got a point, or we were wrong; is there a pattern or was it a once off?&lt;/li&gt;
&lt;li&gt;Panic - how do you actually improve? How do you improve fast enough?&lt;/li&gt;
&lt;li&gt;Excitement - yay! You know more, and things can get better!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seek out negative feedback, and thank the people who have the courage to give it to you.&lt;/p&gt;

&lt;h3&gt;Scope Creep: Keep It From Creeping Up On You, by Angelina Simms&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We usually only think of scope creep as applying to software. But sometimes &lt;em&gt;life&lt;/em&gt; creeps up on you.&lt;/li&gt;
&lt;li&gt;What systems do you have in place to manage scope creep in your life?&lt;/li&gt;
&lt;li&gt;Set things up to deal with life&amp;#39;s scope creep &lt;em&gt;before&lt;/em&gt; things come up.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Shaving my head made me a better programmer, by Alex Qin&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Being asked at university “Are you a programmer?” and replying “Well, not really, but I’m trying to become one.” Realising that this doesn’t make sense because “the act of programming makes you a programmer.”&lt;/li&gt;
&lt;li&gt;“Become a bad ass programmer and they can’t doubt your programming abilities.” - Alex went for it, and started giving lots of talks and putting her ideas out there.&lt;/li&gt;
&lt;li&gt;Screw it - shaved her hair and &lt;em&gt;boom&lt;/em&gt; community members and coworkers started treating her as a legit programmer&lt;/li&gt;
&lt;li&gt;Wanted to help others who “shouldn’t be programmers,” founded &lt;a href="http://www.c4q.nyc/"&gt;Coalition for Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anyone can succeed if they have the right resources, and people believe in them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="/images/blog/ela-conf/shaved-head.jpg" alt="No hair == better programmer" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
