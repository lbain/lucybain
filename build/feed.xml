<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucy Bain</title>
  <id>http://lucybain.com/blog</id>
  <link href="http://lucybain.com/blog"/>
  <link href="http://lucybain.com/feed.xml" rel="self"/>
  <updated>2015-11-25T00:00:00Z</updated>
  <author>
    <name>Lucy Bain</name>
  </author>
  <entry>
    <title>Programming theory: Evaluation strategies</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/programming-theory-evaluation-strategies/"/>
    <id>http://lucybain.com/blog/2015/programming-theory-evaluation-strategies/</id>
    <published>2015-11-25T00:00:00Z</published>
    <updated>2016-01-24T16:31:03+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is a topic I learned at university, but didn’t fully understand all the repercussions of until later. This post is to help you understand the differences and to help me remember them :)&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But wait, what’s an “evaluation strategy”? I’ve never heard of that before!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I hadn’t either until I did some research for this post. The title for this group of concepts isn’t widely used, so knowing “evaluation strategy” probably won’t be super useful. However, the question all evaluation strategies are trying to answer is “how do parameters work in this particular language?” And it is &lt;em&gt;very&lt;/em&gt; useful to know the answer to that question for your language.&lt;/p&gt;

&lt;p&gt;For example, this non-language below (which is purposefully a mismatch of ruby, python, and JS so it doesn’t look real):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;a = 1

function passBySomething(param):
    param = 2
end

passBySomething(a)
log(a) // what happens here?
&lt;/pre&gt;
&lt;p&gt;There are a few options that could happen, which is what today’s post is all about.&lt;/p&gt;

&lt;p&gt;Since I love metaphors and because we haven’t talked about how computer memory works yet (although it might show up soon!) we won’t cover “under the hood” details. Instead we will work with a story:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you look around your apartment you decide you would like some new artwork to spruce the place up a bit. As it so happens you have a nice piece of canvas at home, all ready to go. You also have a friend, Fred, who is an artist and who’s agreed to make you something (that you’ll pay for, of course!).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that in mind we’re ready to go! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Because we’re not going into the details, nor are we looking at a particular language, these explanations might not apply 100% to your language. Please look up additional examples for your language.&lt;/p&gt;

&lt;h2&gt;Pass by reference&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is probably the easiest one to get our heads around, since it’s pretty much what happens in real life.&lt;/p&gt;

&lt;p&gt;Here’s what pass by reference would be in our pretend language:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (this is a blank canvas)

function artistFred(item):
    paint(item) // notice the lack of return keyword
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;Seems straight forward enough, but what if Fred decides to do something different?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your canvas to Fred and &lt;strong&gt;he makes a sculpture instead&lt;/strong&gt;. Then he gives you the sculpture back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, this translates to the following “code”:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // V (new sculpture)
&lt;/pre&gt;
&lt;p&gt;Now you don’t have your original canvas (Fred replaced it entirely), you only have the sculpture Fred gave you.&lt;/p&gt;

&lt;p&gt;Pass by reference is incredibly trusting. You like Fred, and he’s a really good artist. If he says a sculpture would be better for your space you’re cool to go with that. If he paints the whole canvas one colour and tells you it’s art, you’ll believe him and put it up with pride. After all, Fred’s a good guy and you trust him.&lt;/p&gt;

&lt;h3&gt;More formal definition&lt;/h3&gt;

&lt;p&gt;In pass by reference the original variable (declared outside the function’s scope) can be changed in any way by the function. It can be altered or reassigned in the function and the new value will persist after the function has returned.&lt;/p&gt;

&lt;h2&gt;Pass by value&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You go to the store and buy a new piece of canvas that is exactly the same as the one you already own. You give the new canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back, and you can choose to replace your blank canvas with the painted one, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our pretend coding language it would look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    return paint(item) // notice the new return keyword
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newCanvas = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newCanvas) // [*&amp;amp;] (painted canvas)

canvas = artistFred(canvas) // replace blank canvas with the painted one
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;Of course, Fred might decide to do something else entirely. Let’s look at another possibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You go to the store and buy a new piece of canvas that is exactly the same as the one you already own. You give the new canvas to Fred, but he throws away the new canvas and &lt;strong&gt;decides to make a sculpture instead.&lt;/strong&gt; Then he gives you the sculpture back, and you can choose to replace your blank canvas with the sculpture, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, in our fake language would be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
    return item
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newSculpture = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newSculpture) // V (sculpture)

canvas = artistFred(canvas) // replace blank canvas with the sculpture
log(canvas) // V (sculpture)
&lt;/pre&gt;
&lt;p&gt;I think of pass by value as slightly paranoid. Because really, you don’t trust Fred very much. You think he might make an ugly painting and you want to keep your piece of canvas safe in case that happens. Or you know he doesn’t follow directions well and you didn’t want that sculpture anyway...&lt;/p&gt;

&lt;h3&gt;More formal definition&lt;/h3&gt;

&lt;p&gt;In pass by value the original variable (declared outside the function’s scope) is not altered in any way by the function. It must be explicitly overwritten by reassigning it with the results of the function call.&lt;/p&gt;

&lt;h2&gt;Pass by sharing&lt;/h2&gt;

&lt;p&gt;This is a bit of a mix between pass by reference and pass by value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your (only) canvas to Fred and &lt;strong&gt;he paints it for you&lt;/strong&gt; (thanks Fred!). Then he gives you the painted canvas back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far this is exactly the same as pass by reference.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    paint(item)
end

log(canvas) // [] (blank canvas)
artistFred(canvas)
log(canvas) // [*&amp;amp;] (painted canvas)
&lt;/pre&gt;
&lt;p&gt;But again, Fred might decide to do something different:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You give your (only) canvas to Fred. He sets the untouched canvas aside and &lt;strong&gt;makes a sculpture instead&lt;/strong&gt;. Then he gives you the sculpture back, and you can choose to replace your blank canvas with the sculpture, keep both, or just look at Fred’s work and decide not to keep it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight plaintext"&gt;canvas = [] // (blank canvas)

function artistFred(item):
    item = new Sculpture()
    return item
end

log(canvas) // [] (blank canvas)
artistFred(canvas) // look at the Fred’s work but decide not to keep it
log(canvas) // [] (blank canvas)

newSculpture = artistFred(canvas) // keep both
log(canvas) // [] (blank canvas)
log(newSculpture) // V (sculpture)

canvas = artistFred(canvas) // replace blank canvas with the painted one
log(canvas) // V (sculpture)
&lt;/pre&gt;
&lt;p&gt;This version is exactly the same as pass by value.&lt;/p&gt;

&lt;p&gt;This is probably the most reasonable level of trust. You asked for a painting and a sculpture just won’t do. You trust Fred enough to paint a blank canvas, but you want your canvas to be usable if he decided to go off an make a sculpture instead. After all, you asked for a painting, not a sculpture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What gives? How can you mix and match like that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It all depends on if the canvas is altered or replaced. If Fred simply alters the canvas by painting it, then the original (blank) canvas is changed forever. However, if Fred wants to replace the canvas, he can’t throw it away, but must create a sculpture as an entirely new thing.&lt;/p&gt;

&lt;h3&gt;More fomal definition&lt;/h3&gt;

&lt;p&gt;In pass by sharing the original variable (declared outside the function’s scope) can only be altered in so far as it is mutable. It cannot be reassigned inside the function call. Any changes to a mutable type will persist after the function returns. Any attempts to reassign a variable will not persist.&lt;/p&gt;

&lt;h2&gt;And one more thing...&lt;/h2&gt;

&lt;p&gt;People use the wrong name all. the. time. Officially most languages use pass by sharing. Per &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by languages such as Python, Iota, Java (for object references), Ruby, JavaScript, Scheme, OCaml, AppleScript, and many others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, most people don’t say a particular language is “pass by sharing.” Unfortuantely “pass by reference” and “pass by value” are much more famous phrases than “pass by sharing” (probably because it’s what we’re taught at universities), and so people often use one of those terms even when it’s incorrect.&lt;/p&gt;

&lt;p&gt;This semantic mixing caused me a fair amount of confusion because JS shows some pass by reference qualities:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var obj = {a: 1};

function referenceTest(input) {
    input.a = 2;
}

console.log(obj); // logs {a: 1}
referenceTest(obj);
console.log(obj); // logs {a: 2}
&lt;/pre&gt;
&lt;p&gt;and some pass by value qualities:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var num = 1;

function valueTest(input) {
    input = 1;
}

console.log(num); // logs 1
valueTest(num);
console.log(num); // logs 1
&lt;/pre&gt;
&lt;p&gt;It took me a long time to realise that JS was pass by reference &lt;em&gt;sometimes&lt;/em&gt; and pass by value &lt;em&gt;other times&lt;/em&gt;. And I only learned today that this mix of of the two, which many common languages use, is called pass by sharing.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Examples and explanation for &lt;a href="https://www.jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Destructuring assignment with ES6</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-destructuring-assignment-es6/"/>
    <id>http://lucybain.com/blog/2015/js-destructuring-assignment-es6/</id>
    <published>2015-11-13T00:00:00Z</published>
    <updated>2016-01-24T16:29:10+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In my last post we talked about &lt;a href="/blog/2015/enhanced-obj-literals/"&gt;enhanced object literals&lt;/a&gt; with ES6. This time around we’ll cover destructuring assignment, another bit of sugary syntax that’s available in ES6. Again, we’ll build up increasingly complicated examples.&lt;/p&gt;

&lt;h2&gt;Vanilla JS&lt;/h2&gt;

&lt;p&gt;Since this is syntatic sugar, it’s possible to do everything with vanilla JS. We’re not introducing anything new here, just making existing things easier to do.&lt;/p&gt;

&lt;p&gt;In vanilla JS we can assign array values to variables like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a, b, c;
var arr = [1, 2, 3];

a = arr[0];
b = arr[1];
c = arr[2];

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;There’s nothing wrong with this, but it’s cumbersome and not quite as nice as...&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3];

[a, b, c] = arr;

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;Here you can see that &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; were assigned based on the content of &lt;code&gt;arr&lt;/code&gt;. It’s even easier to read when it’s written like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;[a, b, c] = [1, 2, 3];
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;That’s great, but what’s the &lt;strong&gt;real&lt;/strong&gt; code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You caught me, we can’t run the sugary code above directly in browsers yet. Since we need to put the code through a compiler it’s a good idea to see what actually gets run in the browser.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;amp;&amp;amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;amp;&amp;amp; _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var a = undefined,
    b = undefined,
    c = undefined;
var arr = [1, 2, 3];

var _arr = arr;

var _arr2 = _slicedToArray(_arr, 3);

a = _arr2[0];
b = _arr2[1];
c = _arr2[2];
_arr;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Hmmm, not super readable... what’s with the &lt;code&gt;_slicedToArray&lt;/code&gt; function?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, it turns out you can do more complicated things with destructuring assignment, let’s look at some of those to better understand the compiled code. But keep in mind the line &lt;code&gt;_slicedToArray(_arr, 3);&lt;/code&gt; - the &lt;code&gt;3&lt;/code&gt; in particular will be important!&lt;/p&gt;

&lt;h2&gt;Ignore the ends of an array&lt;/h2&gt;

&lt;p&gt;It’s also possible to ignore the last items of an array:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5];

[a, b, c] = arr;

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;Here we didn’t care what the fourth or fifth items in the array were, only the first three items were of interest. With the longer array the compiled code now looks like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;amp;&amp;amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;amp;&amp;amp; _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var a = undefined,
    b = undefined,
    c = undefined;
var arr = [1, 2, 3, 4, 5];

var _arr = arr;

var _arr2 = _slicedToArray(_arr, 3);

a = _arr2[0];
b = _arr2[1];
c = _arr2[2];
_arr;
&lt;/pre&gt;
&lt;p&gt;Again, the line of interest is &lt;code&gt;_slicedToArray(_arr, 3);&lt;/code&gt; and again the number of interest is &lt;code&gt;3&lt;/code&gt;. Notice that although the array now contains five items the compiled JS knows we&amp;#39;re only interested in the first three for assignment. That’s why the second parameter to &lt;code&gt;_slicedToArray&lt;/code&gt; is still &lt;code&gt;3&lt;/code&gt; rather than five.&lt;/p&gt;

&lt;h2&gt;Ignore particular items&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OK, so far we can assign all the items in an array and just the first &lt;strong&gt;n&lt;/strong&gt;. What else can this do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at assigning only certain items.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5];

[a,,b,,c] = arr;

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs 5
&lt;/pre&gt;
&lt;p&gt;Here we ignored items &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; from the array, but assigned the other elements. Again, nothing we couldn’t do with vanilla JS:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a, b, c;
var arr = [1, 2, 3, 4, 5, 6];

a = arr[0];
b = arr[2];
c = arr[4];

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs 5
&lt;/pre&gt;
&lt;p&gt;But the ES6 way is a little bit shorter (and sweeter!).&lt;/p&gt;

&lt;h2&gt;Assign “the rest”&lt;/h2&gt;

&lt;p&gt;A handy feature of ES6 is &lt;code&gt;...&lt;/code&gt; which says “everything else.” We can use this for destructing assignment as well:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3];

[a,...b] = arr;

console.log(a); // logs 1
console.log(b); // logs [2, 3]
&lt;/pre&gt;
&lt;p&gt;And of course you can use it along with the other features:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c;
let arr = [1, 2, 3, 4, 5, 6];

[a,,b,...c] = arr;

console.log(a); // logs 1
console.log(b); // logs 3
console.log(c); // logs [4, 5, 6]
&lt;/pre&gt;
&lt;h2&gt;With objects&lt;/h2&gt;

&lt;p&gt;I’ve seen this feature used more with arrays than objects, but it is possible to use destructuring assignment with objects as well. Let’s take a look:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {cat, dog, mouse} = obj;
console.log(a); // logs 'meow'
console.log(b); // logs 'woof'
console.log(c); // logs 'squeak'
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Weird, I tried a version in the REPL and it didn’t work...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I found the syntax for objects much less intuitive and picky than expected. Here are a couple of examples that &lt;strong&gt;don’t&lt;/strong&gt; work.&lt;/p&gt;

&lt;h3&gt;Need the key names&lt;/h3&gt;

&lt;p&gt;This doesn&amp;#39;t work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {a, b, c} = obj;
&lt;/pre&gt;
&lt;p&gt;This doesn’t work because object keys aren’t ordered. There’s no way for JS to know that you want &lt;code&gt;cat&lt;/code&gt; to be first because there is no concept of “first” for objects.&lt;/p&gt;

&lt;p&gt;This does work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

let {cat: a, dog: b, mouse: c} = obj;
&lt;/pre&gt;
&lt;h3&gt;Special syntax for pre-declare variables&lt;/h3&gt;

&lt;p&gt;This doesn’t work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c
let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

{cat: a, dog: b, mouse: c} = obj;
&lt;/pre&gt;
&lt;p&gt;I was particularly confused about this. So I asked a &lt;a href="http://stackoverflow.com/questions/34836126/can-i-pre-declare-variables-for-destructuring-assignment-of-objects"&gt;question&lt;/a&gt; about it and got an answer in no time (thank you Stackoverflow!).&lt;/p&gt;

&lt;p&gt;Since there’s no keyword before the first &lt;code&gt;{&lt;/code&gt; in the line &lt;code&gt;{cat: a, dog: b, mouse: c} = obj;&lt;/code&gt; the &lt;code&gt;{&lt;/code&gt; is interpreted as opening a new block, rather than being part of an assignment operation. To overcome this we need to tell JS to interpret the &lt;code&gt;{&lt;/code&gt; as part of the assignment by giving more syntax. This does work:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a, b, c
let obj = {cat: 'meow', dog: 'woof', mouse: 'squeak'};

({cat: a, dog: b, mouse: c} = obj);
&lt;/pre&gt;
&lt;h2&gt;Usage: Function returns&lt;/h2&gt;

&lt;p&gt;A really cool use for this feature is to easily process multiple results returned from a function. (Python typically uses tuples for this.)&lt;/p&gt;

&lt;p&gt;For example, a function can return multiple values:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function counting() {
    return [1, 2, 3];
}
&lt;/pre&gt;
&lt;p&gt;And when it get’s called the return values can be quickly assigned:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;[a, b, c] = counting();

console.log(a); // logs 1
console.log(b); // logs 2
console.log(c); // logs 3
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Well that’s pretty handy!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;bunch&lt;/em&gt; of &lt;a href="https://gist.github.com/mikaelbr/9900818"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A more &lt;a href="http://fitzgeraldnick.com/weblog/50/"&gt;in depth&lt;/a&gt; discussion&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>JS: Enhanced object literals</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/enhanced-obj-literals/"/>
    <id>http://lucybain.com/blog/2015/enhanced-obj-literals/</id>
    <published>2015-11-01T00:00:00Z</published>
    <updated>2016-01-10T14:13:09+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here’s some nice &lt;a href="/blog/tags/es6/"&gt;ES6&lt;/a&gt; syntactic sugar for creating object literals. I found it hard to read at first and needed a few examples before I could understand what was happening. It’s got a few uses, so we’ll build up more and more complicated examples to see what it can do.&lt;/p&gt;

&lt;h2&gt;Ordinary object literals&lt;/h2&gt;

&lt;p&gt;In vanilla JS we create object literals like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var a = 1,
    b = 2,
    c = 3;

var obj = {
    a : a,
    b : b,
    c : c
};

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;What’s wrong with this way?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This works, but is quite repetitive and fairly heavy. You have to give the name of the key, even though it’s the same as the name of the variable.&lt;/p&gt;

&lt;p&gt;Let’s rewrite it with ES6 object literals:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a = 1,
    b = 2,
    c = 3;

let obj = { a, b, c };

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Gah! What’s happening here??&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is how I felt when I first read the &lt;code&gt;let obj = { a, b, c };&lt;/code&gt; line as well. Especially because &lt;code&gt;{}&lt;/code&gt; is a pretty common way to create hashes (Ruby) or dictionaries (Python). This syntax just felt wrong. But it is certainly more concise so we’re just gonna need to get past the weirdness.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeah, but what’s the code &lt;strong&gt;really&lt;/strong&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To ease concerns... If you put the above ES6 code into the &lt;a href="https://babeljs.io/repl/"&gt;Babel REPL&lt;/a&gt; it will produce the following vanilla JS code:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict";

var a = 1,
    b = 2,
    c = 3;

var obj = { a: a, b: b, c: c };

console.log(obj);
&lt;/pre&gt;
&lt;p&gt;No funny business here - promise!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;#39;m not convinced - what’s an example of this being useful?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What happens if you change the name of a variable to be something more meaningful, but forget to change the object key? In vanilla JS we have something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var firstPlace = 1,
    secondPlace = 2,
    thirdPlace = 3;

var obj = {
    a : firstPlace,
    b : secondPlace,
    c : thirdPlace
};

console.log(obj); // logs { "a" : 1, "b" : 2, "c" : 3 }
console.log(obj.thirdPlace); // undefined
&lt;/pre&gt;
&lt;p&gt;We had all the best intentions of using better names, but they didn’t come through after you created the object. (I’m sure you’re a perfect dev who would never do something like this. But I have, and it was super annoying to debug.)&lt;/p&gt;

&lt;p&gt;Here’s the same example with ES6 helping us out:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let firstPlace = 1,
    secondPlace = 2,
    thirdPlace = 3;

let obj = { firstPlace, secondPlace, thirdPlace };

console.log(obj); // logs { "firstPlace" : 1, "secondPlace" : 2, "thirdPlace" : 3 }
console.log(obj.thirdPlace); // logs 3
&lt;/pre&gt;
&lt;p&gt;You can see that it’s a bit easier to keep track of everything with the enhanced object literals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so that was the most basic one. Give me something more interesting!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing!&lt;/p&gt;

&lt;h2&gt;Dynamic keys&lt;/h2&gt;

&lt;p&gt;The new syntax also allows dynamic keys to be created more easily. Here’s an example of the ES6 version:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let a = 1,
    b = 2,
    c = 3;

let obj = {



}

console.log(obj); // logs { "2" : 1, "3" : 2, "4" : 3 }
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But you can have dynamic keys in vanilla JS!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;True, we could use [] notation to remove this problem:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var numbers = [1, 2, 3];
var obj = {};

for (var i = 0; i &amp;lt; numbers.length; i++) {
    obj[numbers[i] + 1] = numbers[i];
}

console.log(obj); // logs { "2" : 1, "3" : 2, "4" : 3 }
&lt;/pre&gt;
&lt;p&gt;Now the keys and values can be dynamic, but look at that code! The new way is certainly easier to read and write.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeah, it’s looking pretty nice, let’s do another one!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Methods&lt;/h2&gt;

&lt;p&gt;It’s easy enough to put methods on objects in vanilla JS:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;var obj = {
    hello: function(name) {
        console.log('hello ' + name);
    }
}
obj.hello('world'); // logs "hello world"
&lt;/pre&gt;
&lt;p&gt;But with enhanced object literals we can get rid of some of the boiler plate code to tighten things up a bit:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;let obj = {
  hello(name) {
    console.log('hello ' + name);
  }
};
obj.hello('world'); // logs "hello world"
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;That’s crazy! Where’s the function keyword?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s not needed any more! ES6 knows &lt;code&gt;hello&lt;/code&gt; is a function because of the &lt;code&gt;()&lt;/code&gt; and the method gets created automatically.&lt;/p&gt;

&lt;h2&gt;Review&lt;/h2&gt;

&lt;p&gt;So there you have it! ES6’s enhanced object literals can make object creating easier by adding syntactic sugar. Remember, this doesn’t change how objects work in general. All of these examples can also be written in vanilla JS, so it does’t add new functionality. But it does make writing JS that much easier!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maximilianhoffmann.com/posts/object-based-javascript-in-es6"&gt;Maximilian Hoffmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Overview of all &lt;a href="https://github.com/lukehoban/es6features#enhanced-object-literals"&gt;ES6 features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>CSS: Flexbox in action - Bitbucket Server pull request header</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/css-flexbox-in-action/"/>
    <id>http://lucybain.com/blog/2015/css-flexbox-in-action/</id>
    <published>2015-10-20T00:00:00Z</published>
    <updated>2016-01-24T16:26:23+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I &lt;a href="/blog/2015/css-flexbox/"&gt;recently wrote&lt;/a&gt; about using the &lt;code&gt;flex-box&lt;/code&gt; rule in CSS. That was a practice round because I knew I needed to use flexbox at work in the future. Well, the time has come!&lt;/p&gt;

&lt;p&gt;As you might know, I work for Atlassian on the &lt;a href="https://www.atlassian.com/software/bitbucket/download"&gt;Bitbucket Server&lt;/a&gt; product. Today I spent some time implementing flexbox on our pull request page, specifically in the header. Let’s take a look at what it’s currently like:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/current.png" /&gt;&lt;/p&gt;

&lt;p&gt;Adding flexbox is part of a much larger chunk of work, so my “finished product” looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="current pull request header" src="/images/blog/pr-header/rough-draft.png" /&gt;&lt;/p&gt;

&lt;p&gt;Obviously it’s got a ways to go, but this little bit is done! The main point is that we utilise all of the space available to us. Previously we were’t able to expand a branch name fully even though there was enough space for it.&lt;/p&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;I was fortunate enough to be able to throw away all existing HTML and CSS. Nothing else relies on this piece of code and I had full control of how to implement this part of the feature (with lots of feedback from my fantastic colleagues!). So we don’t need to talk about what &lt;em&gt;was&lt;/em&gt; there, we’re starting from scratch.&lt;/p&gt;

&lt;h3&gt;Desired outcome&lt;/h3&gt;

&lt;p&gt;The pull request header (known as PRH from now on) has X main sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;author (avatar and name)&lt;/li&gt;
&lt;li&gt;branch details (source, destination and an arrow between them)&lt;/li&gt;
&lt;li&gt;PR status&lt;/li&gt;
&lt;li&gt;reviewers (avatars only)&lt;/li&gt;
&lt;li&gt;approve button&lt;/li&gt;
&lt;li&gt;indication of merge issues&lt;/li&gt;
&lt;li&gt;merge button&lt;/li&gt;
&lt;li&gt;menu for other options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately only the author and branches should be “flexible.” Everything else should always be completely visible. After a little thought and discussion we decided that the branches should be more flexible than the author (i.e. branches should shrink faster than the author).&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;Ok, so now we understand the problem, let’s start coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: to keep the CSS easy to read, the demo pages only work in Chrome.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Getting started&lt;/h3&gt;

&lt;p&gt;When I first got into it I figured I’d just work with everything all together. I already had the HTML set up from another bit of work, so I’d &lt;em&gt;just&lt;/em&gt; add the CSS. This wasn’t successful. There were too many moving parts and I didn’t have a good enough understanding of how flexbox worked to hold all the parts in my head.&lt;/p&gt;

&lt;p&gt;I followed the (very good) advice I give to people new to programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s easier to get a small thing right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than think about the whole thing at once I focused on just the branch details section.&lt;/p&gt;

&lt;h3&gt;Branch details&lt;/h3&gt;

&lt;p&gt;The branch details looks like this:&lt;/p&gt;

&lt;p&gt;your-awesome-branch --&amp;gt; the-destination-branch&lt;/p&gt;

&lt;p&gt;So I set up my HTML like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="branch-details"&amp;gt;
    &amp;lt;div class="source"&amp;gt;
        your-awesome-branch
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="arrow"&amp;gt;
        --&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="destination"&amp;gt;
        the-destination-branch
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;(Obviously we use a better arrow really, but we’ll ignore that for this post.)&lt;/p&gt;

&lt;p&gt;Alright, now we’re getting somewhere!&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; ultimately need to be shrinkable. In order to allow them to shrink we need to make their container, &lt;code&gt;branch-details&lt;/code&gt;, flexible.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.branch-details {
    display: flex;
}
&lt;/pre&gt;
&lt;p&gt;At this point everything is flexible. So if you &lt;a href="/blog/2015/pr-header/simple-flexbox"&gt;play with it&lt;/a&gt; you can see everything shrinks equally and the branch names wrap across lines. This wrapping makes sense for “normal” uses of flexbox (i.e. columns of text) but it isn’t what we want for the branch names.&lt;/p&gt;

&lt;p&gt;We can stop words from wrapping with a quick &lt;code&gt;white-space: nowrap&lt;/code&gt; rule. &lt;a href="/blog/2015/pr-header/no-wrap"&gt;This works&lt;/a&gt; in that the words don’t wrap, but it has the unfortuante side effect of stopping things from shrinking. Let‘s put that back by hiding overflowing text: &lt;code&gt;overflow: hidden;&lt;/code&gt;. While we’re at it, we can style the ending with an ellipsis using &lt;code&gt;text-overflow: ellipsis;&lt;/code&gt;. Ok, we’re &lt;a href="/blog/2015/pr-header/ellipsis"&gt;back in business&lt;/a&gt; now!&lt;/p&gt;

&lt;p&gt;And that’s it for the branch details! The source and destination branches shrink equally while the arrow remains full width.&lt;/p&gt;

&lt;h3&gt;Add the author&lt;/h3&gt;

&lt;p&gt;The other element that can shrink is the author. From the designs the author, branch details and PR status are all to the left, so I’ll group these all together in my HTML. We’ll add this next layer of wrapping to make sure the author can shrink, the PR status cannot shink, and the braches continue to shrink as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/2015/pr-header/author-branches-status"&gt;New HTML:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-info"&amp;gt;
    &amp;lt;div class="author"&amp;gt;
        Author name
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="branch-details"&amp;gt;
        &amp;lt;div class="source"&amp;gt;
            your-awesome-branch
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="arrow"&amp;gt;
            --&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="destination"&amp;gt;
            the-destination-branch
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="status"&amp;gt;
        PR status
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Again, the author name needs to be flexible, so we’ll apply most of the same styles we did for the branch details to the &lt;code&gt;pr-info&lt;/code&gt; section.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}
&lt;/pre&gt;
&lt;p&gt;So we’re left with quite a good &lt;a href="http://localhost:4567/blog/2015/pr-header/author-branches-status-basic-flexible"&gt;base&lt;/a&gt; of what we want. However, you’ll noice that if you start to shrink the screen too much the author gets complete hidden. We need a better way to keep the author at least somewhat visible, and actually we want to shrink the author slower than the branches (something like: for every 5px the branches shrink the author only shrinks 1px).&lt;/p&gt;

&lt;p&gt;Well, keeping the author always somewhat visible is easy enough: we can just chuck a &lt;code&gt;min-width: 5em&lt;/code&gt; on there so we don&amp;#39;t accidentally hide the author completely. But now the branch details section doesn’t flex at all. WHY NOT??? Since the branches can flex down to nothing we’ll give the branch details a &lt;code&gt;min-width: 0&lt;/code&gt;. (In real life the PRH has the same min-width as the page and won’t be able to shrink down to completely hide the branch details. For this post I’m not going to worry about the page shrinking too small.)&lt;/p&gt;

&lt;p&gt;Ok, now we have both the author and the branch details shrinking, time to make that happen at different rates. Flexbox items have a &lt;code&gt;flex-grow&lt;/code&gt; property which says how fast the items should grow; there’s also a &lt;code&gt;flex-shrink&lt;/code&gt; property that, surprise, surprise, deals with how fast items should shrink. So we’ll make the branches shrink faster than the author by adding:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.author {
    flex-shrink: 1;
}

.branch-details {
    flex-shrink: 5;
}
&lt;/pre&gt;
&lt;p&gt;The rates are fairly arbitrary, but easily changed if needed.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href="/blog/2015/pr-header/author-branches-status-flexible"&gt;working version&lt;/a&gt; for you to play with.&lt;/p&gt;

&lt;h3&gt;Put it in context&lt;/h3&gt;

&lt;p&gt;Finally we can add the rest of the PRH code in. As a reminder, that’s the: 
reviewers, approve button, indication of merge issues, merge button, and menu for other options. Thankfully all of these will be full width (no shrinking) and most will be a consistent size.&lt;/p&gt;

&lt;p&gt;New HTML:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&amp;lt;div class="pr-header"&amp;gt;
    &amp;lt;div class="pr-info"&amp;gt;
        &amp;lt;div class="author"&amp;gt;
            Author name that’s really long, like super duper long
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="branch-details"&amp;gt;
            &amp;lt;div class="source"&amp;gt;
                your-awesome-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="arrow"&amp;gt;
                --&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;div class="destination"&amp;gt;
                the-destination-branch-with-a-reall-really-really-long-and-annoying-name
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="status"&amp;gt;
            PR status
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="pr-actions"&amp;gt;
        &amp;lt;div&amp;gt;reviewers&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;approve button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge issues&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;merge button&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;menu&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Since we know we want the header to be flexible I’ll go ahead and add the basics in. Right now the &lt;code&gt;div&lt;/code&gt;s in the &lt;code&gt;.pr-actions&lt;/code&gt; are all displayed as block elements, so let’s line them up nicely. Here are the changes:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.pr-header, .pr-info, .branch-details {
    display: flex;
    white-space: nowrap;
}

.pr-info, .author, .source, .destination {
    overflow: hidden;
    text-overflow: ellipsis;
}

.pr-actions div {
    display: inline-block;
}
&lt;/pre&gt;
&lt;p&gt;And &lt;a href="/blog/2015/pr-header/in-context"&gt;that’s it!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Safari&lt;/h3&gt;

&lt;p&gt;Except for Safari. Once I had the proper vendor prefixing in, everything worked as expected in all browsers (even IE!) but not Safari. This &lt;a href="LINK%20HERE"&gt;bug&lt;/a&gt; might be the culprit, but I’m really not sure. If you have any knowledge about what’s causing this, I’m interested! Anyways, for whatever reason you need to add &lt;code&gt;flex-shrink: 0&lt;/code&gt; to the things you don’t want to shrink. So for this we’ll add:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.arrow, .status, .pr-actions {
    flex-shrink: 0;
}
&lt;/pre&gt;
&lt;p&gt;And with that it’s &lt;a href="/blog/2015/pr-header/in-context-safari"&gt;Safari compliant!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Done&lt;/h2&gt;
</content>
  </entry>
  <entry>
    <title>JS: new keyword and functions</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-new-keyword-and-functions/"/>
    <id>http://lucybain.com/blog/2015/js-new-keyword-and-functions/</id>
    <published>2015-10-12T00:00:00Z</published>
    <updated>2016-01-24T16:26:22+11:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’m still slowly making my through the &lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#js"&gt;javascript interview questions&lt;/a&gt;, despite having started a new job on JS. There&amp;#39;s just so much I don’t know! Maybe one day I&amp;#39;ll actually interview someone with these questions...&lt;/p&gt;

&lt;p&gt;Alright, let’s get to today’s question:&lt;/p&gt;

&lt;h2&gt;What’s the difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = new Person()&lt;/code&gt;, and &lt;code&gt;var person = Person()&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gah! Too many things!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s take them one by one:&lt;/p&gt;

&lt;h3&gt;1. &lt;code&gt;function Person(){}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Ok, well this defined a function. Hopefully that was fairly obvious by the &lt;code&gt;function&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wow, mind blowing stuff here...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The more interesting side of it is the &lt;code&gt;Person&lt;/code&gt;. Now, the name of the function is user defined (i.e. not a keyword like &lt;code&gt;function&lt;/code&gt;), but what’s interesting here is the capital &lt;code&gt;P&lt;/code&gt;. This is a JS convention. (JS doesn’t care at all if you follow it or not, but all the other devs will be sad if you don’t.) The convention is that if a function name starts with a capital letter then that function defines a constructor (similar to a class in other languages). So we can infer that &lt;code&gt;function Person(){}&lt;/code&gt; defines a constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so functions with names starting with a capital letter are usually constructors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, it’s really, really common (hopefully you’re using this convention too!), so it’s a pretty safe bet. Let’s move on.&lt;/p&gt;

&lt;h3&gt;2. &lt;code&gt;var person = new Person()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So in many other languages we’d say “The &lt;code&gt;new&lt;/code&gt; keyword creates an instance of the &lt;code&gt;Person&lt;/code&gt; class.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But this is JS, not some “other language.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, very true. JS is a world unto itself. But I hope the sentence above will probably help someone from a more traditional object-oriented background.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, so how does &lt;code&gt;new&lt;/code&gt; work for JS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt; does three main things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; creates a new object. It’s just a plain old, bog standard, nothing-in-it object. It looks like &lt;code&gt;{}&lt;/code&gt;. Boring, I know, but it’s very important.&lt;/li&gt;
&lt;li&gt;The newly created object has it’s prototype set to whatever the &lt;code&gt;Person&lt;/code&gt;’s prototype is right now.&lt;/li&gt;
&lt;li&gt;Finally the constructor function is called (the body of &lt;code&gt;Person&lt;/code&gt;) with any references to &lt;code&gt;this&lt;/code&gt; replaced with the object created in step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why is this important?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although I knew the final outcome of using the &lt;code&gt;new&lt;/code&gt; keyword before, having those three steps spelled out helped remove some of the magic. So let’s talk about them in more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; (the plain old empty JS object) means that you get a unique “deep copy” (other languages would say “instance”) of the constructor each time it’s run. If &lt;code&gt;new&lt;/code&gt; didn’t create a new object then you’d constantly be overwriting things in seemingly different objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; (setting the prototype) means that you can set methods on the constructor’s prototype and they’ll be available on your new object. Something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy');
lucy.introduce(); // logs out: "Hi, my name is Lucy"
&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;lucy&lt;/code&gt;’s prototype hadn’t been set to &lt;code&gt;Person&lt;/code&gt;’s prototype then the &lt;code&gt;introduce&lt;/code&gt; method wouldn’t have been available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; (constructor with &lt;code&gt;this&lt;/code&gt; set) means that each object’s &lt;code&gt;this&lt;/code&gt; points to the object, rather than the window or something else. Without the third step &lt;code&gt;this&lt;/code&gt; from the &lt;code&gt;Person&lt;/code&gt; constructor wouldn’t work correctly and &lt;code&gt;lucy&lt;/code&gt; wouldn’t be able to introduce herself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huh, ok, so the &lt;code&gt;new&lt;/code&gt; keyword is super important for getting &lt;strong&gt;new&lt;/strong&gt; objects. See what I did there?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moving on...&lt;/p&gt;

&lt;h3&gt;3. &lt;code&gt;var person = Person()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Things get a little tricky here, since we don’t actually have the &lt;code&gt;Person&lt;/code&gt; constructor. It can go one of three ways so let’s look at all of them.&lt;/p&gt;

&lt;h4&gt;Scenario 1 - everything is ruined&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; is a constructor that was written to work with the &lt;code&gt;new&lt;/code&gt; keyword, such as the &lt;code&gt;Person&lt;/code&gt; in my example above. In this case things will break, hopefully in an expected way given the three steps above.&lt;/p&gt;

&lt;p&gt;So, without the &lt;code&gt;new&lt;/code&gt; keyword from above those three steps won’t happen. Let’s look at what that means step by step. We’re going to use the same example as above, but without the &lt;code&gt;new&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = Person('Lucy'); // &amp;lt;-- NO NEW KEYWORD
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; (the plain old empty JS object) doesn’t happen. Now instead of getting a new object for &lt;code&gt;lucy&lt;/code&gt; all we get is the return value of &lt;code&gt;Person&lt;/code&gt;. Which is nothing (a.k.a &lt;code&gt;undefined&lt;/code&gt;). Bummer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; (setting the prototype) doesn&amp;#39;t happen. Well that’s kind of a given. Since there’s no new object (see step 1 that didn’t happen) there can’t be a prototype set on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; (constructor with &lt;code&gt;this&lt;/code&gt; set) tries to happen. It really does it’s very best. Since there’s no new object to set &lt;code&gt;this&lt;/code&gt; to, JS does the next best thing and uses the default &lt;code&gt;this&lt;/code&gt;, the window. So now there’s a brand new property on the window, and you can call it with &lt;code&gt;window.name&lt;/code&gt; or &lt;code&gt;this.name&lt;/code&gt; both of which are &lt;code&gt;&amp;quot;Lucy&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well that’s a problem.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yep, leaving of the &lt;code&gt;new&lt;/code&gt; keyword when it’s expected will cause all kinds of headaches.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s the “when it’s expected” caveat for?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great question! The above scenario is, I think, the most likely one, both for what the question was asking about, and in buggy real life code. However, there are two other options. Let’s look at them now.&lt;/p&gt;

&lt;h4&gt;Scenario 2 - nobody cares&lt;/h4&gt;

&lt;p&gt;It’s possible that the &lt;code&gt;Person&lt;/code&gt; constructor was written to avoid just this pitfall. It would look something like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;function Person(name) {
    if (this instanceof Person) {
        this.name = name;
      } else {
        return new Person(name);
      }
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy'); // &amp;lt;-- NEW KEYWORD IS PRESENT
lucy.introduce(); // logs out: "Hi, my name is Lucy"

var bob = Person('Bob'); // &amp;lt;-- NO NEW KEYWORD
bob.introduce(); // logs out: "Hi, my name is Bob"
&lt;/pre&gt;
&lt;p&gt;This takes advantage of the three steps that &lt;code&gt;new&lt;/code&gt; goes through as discussed above. By the time the constructor is actually run there &lt;em&gt;should&lt;/em&gt; be an object assigned to &lt;code&gt;this&lt;/code&gt; with it’s prototype set correctly so &lt;code&gt;this instanceof Person&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;em&gt;However&lt;/em&gt; if someone happened to forget the &lt;code&gt;new&lt;/code&gt; keyword then the constructor would go straight to the &lt;code&gt;else&lt;/code&gt; section and create a new object, using the &lt;code&gt;new&lt;/code&gt; keyword correctly.&lt;/p&gt;

&lt;p&gt;This means using the constructor with and without the &lt;code&gt;new&lt;/code&gt; keyword works correctly (as shown by &lt;code&gt;bob&lt;/code&gt; and &lt;code&gt;lucy&lt;/code&gt; above).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s a pretty sneaky trick!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, it’s quite clever. It’s also &lt;em&gt;really&lt;/em&gt; defensive programming. I mean, we can’t write everything to allow important keywords to just be forgotten... I think it’s bad practice (not to mention a little mean) to hide mistakes from people. I want to know when I mess up. Which brings us nicely to:&lt;/p&gt;

&lt;h4&gt;Scenario 3 - warning&lt;/h4&gt;

&lt;p&gt;Finally we reach a happy middle ground. Scenario 1 failed quietly. Scenario 2 didn’t fail at all, but also allowed incorrect code to work correctly. But scenario 3 will just give a warning, and it’s quite a simple fix.&lt;/p&gt;

&lt;p&gt;A while ago I wrote about &lt;a href="/blog/2014/js-use-strict/"&gt;strict mode&lt;/a&gt;, which is exactly what we’ll use now. Here’s an example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"use strict"; // &amp;lt;-- THIS LINE HERE

function Person(name) {
    this.name = name;
}
Person.prototype.introduce = function() {
    console.log("Hi, my name is " + this.name);
}

var lucy = new Person('Lucy'); // &amp;lt;-- NEW KEYWORD IS PRESENT
lucy.introduce(); // logs out: "Hi, my name is Lucy"

var bob = Person('Bob'); // &amp;lt;-- NO NEW KEYWORD
// throws "Uncaught TypeError: Cannot set property 'name' of undefined"
&lt;/pre&gt;
&lt;p&gt;As you can see, using the &lt;code&gt;new&lt;/code&gt; keyword works exactly as expected. However, if you forget to use &lt;code&gt;new&lt;/code&gt; an error will be thrown, alerting you to your mistake.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s happening behind the scenes?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; just means that JS won’t allow the &lt;code&gt;this&lt;/code&gt; in the constructor to be bound to the window. Instead it leaves &lt;code&gt;this&lt;/code&gt; as undefined (since no new object was created to be properly bound to &lt;code&gt;this&lt;/code&gt;) which causes the error &lt;code&gt;Cannot set property &amp;#39;name&amp;#39; of undefined&amp;quot;&lt;/code&gt;. I think it’s pretty slick.&lt;/p&gt;

&lt;p&gt;Note: I couldn’t get the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; to work properly in this window’s console when I ran it just now, so here’s a &lt;a href="https://jsfiddle.net/1nu5g2by/"&gt;JSFiddle&lt;/a&gt; of the example if you want to double check. Just be sure to have the console of that window open to see the error.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;That was quite a lot, can I have it one more time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure thing, let’s wrap it up!&lt;/p&gt;

&lt;p&gt;Our question was &amp;quot;What’s the difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = new Person()&lt;/code&gt;, and &lt;code&gt;var person = Person()&lt;/code&gt;?&amp;quot;&lt;/p&gt;

&lt;p&gt;The first one &lt;code&gt;function Person(){}&lt;/code&gt; defines a function. Since it’s got a capital letter at the beginning of the function name we expect that it’s a constructor.&lt;/p&gt;

&lt;p&gt;Next &lt;code&gt;var person = new Person()&lt;/code&gt; is one way to create new objects. Using this method &lt;code&gt;person&lt;/code&gt; will have access to everything &lt;code&gt;Person.prototype&lt;/code&gt; has access to, as well as any instance variables set in the &lt;code&gt;Person&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Finally &lt;code&gt;var person = Person()&lt;/code&gt; is a mistake. There are ways of dealing with mistakes like this (my preference is the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; method), but ultimately this should be corrected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Done?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Done! That was a long one - thanks for sticking with me!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/1564489/863846"&gt;Capitalise constructor function names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/3658673/863846"&gt;What &lt;code&gt;new&lt;/code&gt; does&lt;/a&gt; - I really recommend this question (give it an upvote for me!), as it spelled out the three steps that &lt;code&gt;new&lt;/code&gt; takes&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/383503/863846"&gt;Defensive new&lt;/a&gt; for discussion around scenario 2&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/"&gt;Strict mode and new&lt;/a&gt; - look for the section called “Global Leakage”&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zeekat.nl/articles/constructors-considered-mildly-confusing.html"&gt;More discussion&lt;/a&gt; this was the reference from the “what &lt;code&gt;new&lt;/code&gt; does” answer, so I figured it should get some credit too.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Bower link</title>
    <link rel="alternate" href="http://lucybain.com/blog/2015/js-bower-link/"/>
    <id>http://lucybain.com/blog/2015/js-bower-link/</id>
    <published>2015-09-28T00:00:00Z</published>
    <updated>2015-10-01T20:58:30+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;At work today I used &lt;code&gt;bower link&lt;/code&gt; and wanted to know more about how it works. I&amp;#39;m not going to talk about why you should use Bower, how to use it generally, or really anything useful for most people. I&amp;#39;m only going to talk about the &lt;code&gt;bower link&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;Linking with Bower creates symlinks. It makes a connection between two places on your computer so you can keep a clean file structure but still have all the code where you need it. It also means if you need the code in more than one place you only need one “master” copy and it can appear elsewhere as well.&lt;/p&gt;

&lt;h2&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;First, let’s lay out an example. You’re working on a project and need to write some new functionality. Typically you’d just make a new directory and include your feature’s code in there, but for this example you want the code to be stand alone (perhaps you’ll use it in another project, or perhaps you’ll publish it for others to use). So you decide to write a package for Bower to manage.&lt;/p&gt;

&lt;p&gt;Here’s the setup so far:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
&lt;/pre&gt;
&lt;h3&gt;Make your package a Bower package&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower init
&lt;/pre&gt;
&lt;p&gt;I just went ahead and accepted all the defaults, but if it was a real package you’d probably want to think about them. Again, this isn’t a post about all of Bower, so I’ll skip over any details on the &lt;code&gt;bower init&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now your package looks like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;new_package/
  node_modules/ &amp;lt;-- New!
  bower.json &amp;lt;-- New!
&lt;/pre&gt;
&lt;h3&gt;Tell Bower about your package&lt;/h3&gt;

&lt;p&gt;Next we need to tell Bower about the &lt;code&gt;new_package&lt;/code&gt; directory. This command won’t change the &lt;code&gt;new_package&lt;/code&gt; directory at all.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/new_package
$ bower link
&lt;/pre&gt;
&lt;p&gt;For Mac computers, the output of that will be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;bower link /Users/lbain/.local/share/bower/links/new_package &amp;gt; /Users/lbain/code/new_package
&lt;/pre&gt;
&lt;p&gt;(Obviously the &lt;code&gt;lbain&lt;/code&gt; will be different in your case.)&lt;/p&gt;

&lt;p&gt;Ok, let’s take a quick peak under the hood and look into &lt;code&gt;/Users/lbain/.local/share/bower/links&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd /Users/lbain/.local/share/bower/links
&lt;/pre&gt;
&lt;p&gt;From here you can see all the links you’ve created (probably just the one &lt;code&gt;new_package&lt;/code&gt; link).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd new_package
&lt;/pre&gt;
&lt;p&gt;And now you should see the &lt;code&gt;node_modules&lt;/code&gt; directory and the &lt;code&gt;bower.json&lt;/code&gt; right there. So you can see using &lt;code&gt;bower link&lt;/code&gt; creates a connection (some might even go so far as to say “link”) between the original and the bower-controlled code.&lt;/p&gt;

&lt;p&gt;Ok, we’re halfway there! &lt;/p&gt;

&lt;h3&gt;Tell your project about your package&lt;/h3&gt;

&lt;p&gt;Now we can go back to your project and get to include your package.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ cd ~/code/my_awesome_project
&lt;/pre&gt;
&lt;p&gt;From here we run the &lt;code&gt;bower link&lt;/code&gt; command, but with a parameter of the package name.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link new_package
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The fact that you’re just giving the name of the directory you want to link is pretty much the only really clear advantage of using &lt;code&gt;bower link&lt;/code&gt; over a traditional symlink. Yes, you get all of the associated Bower-goodness, but for this example (where we’re not looking at the Bower-goodness) the name is about the only interesting thing.&lt;/p&gt;

&lt;p&gt;The output of that is:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ bower link /Users/lbain/code/my_awesome_project/bower_components/new_package &amp;gt; /Users/lbain/.local/share/bower/links/new_package
&lt;/pre&gt;
&lt;p&gt;The content of &lt;code&gt;/Users/lbain/.local/share/bower/links/&lt;/code&gt; hasn’t changed. Rather, that directory keeps a list of all linkable packages, not the packages that have been linked.&lt;/p&gt;

&lt;p&gt;Now your directories should look like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    bower_components/ &amp;lt;-- New!
      new_package/ &amp;lt;-- New!
        node_modules/ &amp;lt;-- New!
        bower.json &amp;lt;-- New!
    node_modules/ &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
&lt;/pre&gt;
&lt;p&gt;So, as you can see, you&amp;#39;ve got all of &lt;code&gt;new_package&lt;/code&gt;’s content in &lt;code&gt;my_awesome_project/bower_components&lt;/code&gt;. Any other Bower packages you link would also go to the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;Prove it!&lt;/h3&gt;

&lt;p&gt;Alright, let’s give it a quick test. Make a new file in &lt;code&gt;new_package&lt;/code&gt; and save it. It should also be in &lt;code&gt;my_awesome_project&lt;/code&gt;!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;code/
  my_awesome_project/
    new_package/
      node_modules/
      bower.json
      test.txt &amp;lt;-- New!
    lots.txt
    of.rb
    files.js
    here.html

  new_package/
    node_modules/
    bower.json
    test.txt &amp;lt;-- New!
&lt;/pre&gt;
&lt;p&gt;You can also add files the other way. Make a new file in &lt;code&gt;my_awesome_project&lt;/code&gt; and save it. It should also be in &lt;code&gt;new_package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can develop as though your code was inline, but actually keep it as a stand alone package.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Again, this is a 100% normal symlink. The code used to make the link can be found on &lt;a href="https://github.com/bower/bower/blob/master/lib/util/createLink.js"&gt;Bower’s GitHub&lt;/a&gt; and doesn’t do anything fancy. If you go around moving &lt;code&gt;new_package&lt;/code&gt; the symlinks will break!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.tutsplus.com/tutorials/meet-bower-a-package-manager-for-the-web--net-27774"&gt;Intro to Bower&lt;/a&gt; - I really liked the style of this one, it’s quite chatty, just like me!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bower/bower/"&gt;Bower’s code&lt;/a&gt; if you want to look under the hood&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
