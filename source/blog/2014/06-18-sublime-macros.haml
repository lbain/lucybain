---
title: "Sublime Text Macros"
---
%p
  My coworker users vim, and has a snazzy macro to put a <code>binding.pry</code> wherever he using a keyboad shortcut. I thought it was a neat trick (and he mentioned something about Sublime not being a real editor), so I decided to implement it for Sublime as well.

%p
  I looked up #{link_to 'how to make macros', 'http://docs.sublimetext.info/en/latest/extensibility/macros.html'} and wrote one for adding <code>binding.pry</code>. Basically you need to use <code>control + q</code> to start and stop your macro recording. Then you save the macro by going to <code>Tools/Save Macro...</code>. You should name it something memerable, like <code>add_binding</code>.
%p
  Ok, now we've got our macro, and you can invoke it by going to <code>Tools/Macros/User/add_macro</code>. (Note: you might need to restart Sublime first.) But going to the menu each time is lame, we're better than that.

%p
  Letâ€™s add a key binding!

%p
  I've done #{link_to 'key bindings', 'http://docs.sublimetext.info/en/latest/customization/key_bindings.html'} in the #{link_to 'past', '/blog/2014/Sublime-Auto-Indent/'}, but not #{link_to 'with macros', 'http://superuser.com/questions/609057/how-do-i-assign-a-keyboard-shortcut-to-recorded-macro-in-sublime-text'}. I chose to use <code>command + b</code> for mine (you might have that map to build, just a heads up...). So my key binding looked like this:

:code
  { "keys": ["super+b"],
    "command": "run_macro_file",
    "args": {"file": "Packages/User/add_binding.sublime-macro"} }
%p
  Awesome, now <code>command + b</code> will add a <code>binding.pry</code> inline. Handy!
%p
  But I wanted more, a <code>- binding.pry</code> in haml, and a <code>debugger</code> in javascript. I also wanted to use the same key binding. I didn't want to think about if I'm in haml or JS.
%p
  Creating the macros was the same, but I needed the key bindings to know what kind of file I was in. I looked into how to make #{link_to 'key bindings source aware', 'http://www.guiguan.net/how-to-set-a-key-binding-in-sublime-text-based-on-the-file-type-the-command-is-running-on/.'}. I also needed to know how #{link_to 'sublime names file types', 'https://gist.github.com/iambibhas/4705378'}.
%p
  Putting it all together, the final key bindings look like this:

:code
  { "keys": ["super+b"],
    "command": "run_macro_file",
    "args": {"file": "Packages/User/add_binding.sublime-macro"},
    "context": [{"key": "selector", "operator": "equal", "operand": "source.ruby,source.ruby.rails"}] },

  { "keys": ["super+b"],
    "command": "run_macro_file",
    "args": {"file": "Packages/User/add_haml_binding.sublime-macro"},
    "context": [{"key": "selector", "operator": "equal", "operand": "text.haml"}] },

  { "keys": ["super+b"],
    "command": "run_macro_file",
    "args": {"file": "Packages/User/add_debugger.sublime-macro"},
    "context": [{"key": "selector", "operator": "equal", "operand": "source.js,source.coffee"}] }